name: Build and Test

on: [push]

jobs:
#   build:
#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: ["8.15"]
#         mongodb-version: ["3.4"]

#     steps:
#     - uses: actions/checkout@v1
#       with:
#         fetch-depth: 1
      
#     - name: Cache node modules
#       uses: actions/cache@v1
#       with:
#         path: node_modules
#         key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
#         restore-keys: |
#           ${{ runner.OS }}-build-${{ env.cache-name }}-
#           ${{ runner.OS }}-build-
          
#     - name: Cache meteor local
#       uses: actions/cache@v1
#       with:
#         path: ./.meteor/local
#         key: ${{ runner.OS }}-meteor-cache-${{ hashFiles('.meteor/versions') }}
#         restore-keys: |
#           ${{ runner.OS }}-meteor-cache-${{ env.cache-name }}-
#           ${{ runner.OS }}-meteor-cache-

#     - name: Cache meteor
#       uses: actions/cache@v1
#       with:
#         path: ~/.meteor
#         key: ${{ runner.OS }}-meteor-${{ hashFiles('.meteor/release') }}
#         restore-keys: |
#           ${{ runner.OS }}-meteor-${{ env.cache-name }}-
#           ${{ runner.OS }}-meteor-

#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v1
#       with:
#         node-version: ${{ matrix.node-version }}

#     - name: Install Meteor
#       run: |
#         # Restore bin from cache
#         set +e
#         METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
#         METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
#         set -e
#         LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
#         if [ -e $LAUNCHER ]
#         then
#           echo "Cached Meteor bin found, restoring it"
#           sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
#         else
#           echo "No cached Meteor bin found."
#         fi

#         # only install meteor if bin isn't found
#         command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh

#     - name: Versions
#       run: |
#         npm --versions
#         node -v
#         meteor --version
#         meteor npm --versions
#         meteor node -v
#         git version
#         echo $GITHUB_REF

#     - name: npm install
#       run: |
#         meteor npm install

#     - name: Launch MongoDB
#       uses: wbari/start-mongoDB@v0.2
#       with:
#         mongoDBVersion: ${{ matrix.mongodb-version }}

#     - name: npm lint and test
#       run: |
#         npm run lint
#         npm run testunit
#       env:
#         CI: true
#         MONGO_URL: mongodb://localhost:27017

#     # To reduce memory need during actual build, build the packages solely first
#     - name: Build a Meteor cache
#       run: |
#         # to do this we can clear the main files and it build the rest
#         echo "" > server/main.js
#         echo "" > client/main.js
#         meteor build --server-only --debug --directory /tmp/build-temp
#         git checkout -- server/main.js client/main.js


#     # TODO: Fix env variables
#     - name: Build Rocket.Chat
#       env:
#         TOOL_NODE_FLAGS: --max_old_space_size=3072
#       run: |
#         #if [[ $CIRCLE_TAG ]] || [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
#         #  meteor reset;
#         #fi

#         #export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"
#         #if [[ -z $CIRCLE_PR_NUMBER ]]; then
#         #  meteor build --server-only --directory /tmp/build-test
#         #else
#         export METEOR_PROFILE=1000
#         meteor build --server-only --directory --debug /tmp/build-test
#         #fi;

#     - name: Prepare build
#       run: |
#         mkdir /tmp/build/
#         cd /tmp/build-test
#         tar czf /tmp/build/Rocket.Chat.tar.gz bundle
#         cd /tmp/build-test/bundle/programs/server
#         npm install
#         cd /tmp
#         tar czf Rocket.Chat.test.tar.gz ./build-test
        
#     - name: Store build for tests
#       uses: actions/upload-artifact@v1
#       with:
#         name: build-test
#         path: /tmp/Rocket.Chat.test.tar.gz

#     - name: Store build
#       uses: actions/upload-artifact@v1
#       with:
#         name: build
#         path: /tmp/build

  test:
    runs-on: ubuntu-latest
#     needs: build

    strategy:
      matrix:
        node-version: ["8.15"]
#         mongodb-version: ["3.4", "3.6", "4.0"]
        mongodb-version: ["3.4"]

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-

#     - name: Restore build for tests
#       uses: actions/download-artifact@v1
#       with:
#         name: build-test
#         path: /tmp
        
#     - name: Decompress build
#       run: |
#         cd /tmp
#         tar xzf Rocket.Chat.test.tar.gz 
#         cd -

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup Chromedriver
      run: |
        sudo apt-fast install -y xvfb screen google-chrome-stable

        wget -c -nc --retry-connrefused --tries=0 https://chromedriver.storage.googleapis.com/77.0.3865.40/chromedriver_linux64.zip
        unzip -o -q chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/chromedriver
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional

#     - name: Launch MongoDB
#       uses: wbari/start-mongoDB@v0.2
#       with:
#         mongoDBVersion: ${{ matrix.mongodb-version }} --noprealloc --smallfiles --replSet=rs0

    - name: Install dependencies
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
        echo "deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.0 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-org-shell google-chrome-stable
        
    - name: Configure Replica Set
      run: |
        mongo --eval 'rs.initiate({_id:"rs0", members: [{"_id":1, "host":"localhost:27017"}]})'
        mongo --eval 'rs.status()'
        
#     - name: NPM install
#       run: |
#         npm install

    - name: Test
      env:
        TEST_MODE: "true"
        MONGO_URL: mongodb://localhost:27017/rocketchat
        MONGO_OPLOG_URL: mongodb://localhost:27017/local
      run: |
        #for i in $(seq 1 5); do mongo rocketchat --eval 'db.dropDatabase()' && npm test && s=0 && break || s=$? && sleep 1; done; (exit $s)
        npm run chimp-test
      
