{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/methods/joinRoom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/methods/joinRoom.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/methods/joinRoom.ts","inputSourceMap":{"version":3,"file":"app/lib/server/methods/joinRoom.ts","sourceRoot":"","sources":["app/lib/server/methods/joinRoom.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAErC,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAC7E,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,2BAA2B,EAAE,MAAM,2BAA2B,CAAC;AACnF,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,wCAAwC,CAAC;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,8CAA8C,CAAC;AAE/E,MAAM,CAAC,OAAO,CAAC;IACd,QAAQ,CAAC,GAAG,EAAE,IAAI;QACjB,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAEnB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAE3B,IAAI,CAAC,IAAI,EAAE;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;SACrF;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC,IAAI,EAAE;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC,IAAI,CAAC,EAAE;YAChG,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;SACnF;QAED,qGAAqG;QAErG,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YACvE,MAAM,QAAQ,GAAG,2BAA2B,CAAC,IAAI,CAAC,CAAC;YAEnD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE;gBACxD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,gBAAgB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;aACtF;SACD;aAAM;YACN,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;gBAC/B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;aACnF;YACD,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,QAAQ,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,wBAAwB,CAAC,EAAE;gBACnH,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,uBAAuB,EAAE;oBACrE,MAAM,EAAE,UAAU;iBAClB,CAAC,CAAC;aACH;SACD;QAED,OAAO,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport { hasPermission, canAccessRoom } from '../../../authorization/server';\nimport { Rooms } from '../../../models/server';\nimport { Tokenpass, updateUserTokenpassBalances } from '../../../tokenpass/server';\nimport { addUserToRoom } from '../functions';\nimport { RoomMemberActions } from '../../../../definition/IRoomTypeConfig';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\n\nMeteor.methods({\n\tjoinRoom(rid, code) {\n\t\tcheck(rid, String);\n\n\t\tconst user = Meteor.user();\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'joinRoom' });\n\t\t}\n\n\t\tconst room = Rooms.findOneById(rid);\n\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', { method: 'joinRoom' });\n\t\t}\n\n\t\tif (!roomCoordinator.getRoomDirectives(room.t)?.allowMemberAction(room, RoomMemberActions.JOIN)) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'joinRoom' });\n\t\t}\n\n\t\t// TODO we should have a 'beforeJoinRoom' call back so external services can do their own validations\n\n\t\tif (room.tokenpass && user && user.services && user.services.tokenpass) {\n\t\t\tconst balances = updateUserTokenpassBalances(user);\n\n\t\t\tif (!Tokenpass.validateAccess(room.tokenpass, balances)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Token required', { method: 'joinRoom' });\n\t\t\t}\n\t\t} else {\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'joinRoom' });\n\t\t\t}\n\t\t\tif (room.joinCodeRequired === true && code !== room.joinCode && !hasPermission(user._id, 'join-without-join-code')) {\n\t\t\t\tthrow new Meteor.Error('error-code-invalid', 'Invalid Room Password', {\n\t\t\t\t\tmethod: 'joinRoom',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn addUserToRoom(rid, user);\n\t},\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/methods/joinRoom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/methods/joinRoom.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet hasPermission, canAccessRoom;\nmodule.link(\"../../../authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  },\n\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  }\n\n}, 2);\nlet Rooms;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet Tokenpass, updateUserTokenpassBalances;\nmodule.link(\"../../../tokenpass/server\", {\n  Tokenpass(v) {\n    Tokenpass = v;\n  },\n\n  updateUserTokenpassBalances(v) {\n    updateUserTokenpassBalances = v;\n  }\n\n}, 4);\nlet addUserToRoom;\nmodule.link(\"../functions\", {\n  addUserToRoom(v) {\n    addUserToRoom = v;\n  }\n\n}, 5);\nlet RoomMemberActions;\nmodule.link(\"../../../../definition/IRoomTypeConfig\", {\n  RoomMemberActions(v) {\n    RoomMemberActions = v;\n  }\n\n}, 6);\nlet roomCoordinator;\nmodule.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n  roomCoordinator(v) {\n    roomCoordinator = v;\n  }\n\n}, 7);\nMeteor.methods({\n  joinRoom(rid, code) {\n    var _roomCoordinator$getR;\n\n    check(rid, String);\n    const user = Meteor.user();\n\n    if (!user) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'joinRoom'\n      });\n    }\n\n    const room = Rooms.findOneById(rid);\n\n    if (!room) {\n      throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n        method: 'joinRoom'\n      });\n    }\n\n    if (!((_roomCoordinator$getR = roomCoordinator.getRoomDirectives(room.t)) !== null && _roomCoordinator$getR !== void 0 && _roomCoordinator$getR.allowMemberAction(room, RoomMemberActions.JOIN))) {\n      throw new Meteor.Error('error-not-allowed', 'Not allowed', {\n        method: 'joinRoom'\n      });\n    } // TODO we should have a 'beforeJoinRoom' call back so external services can do their own validations\n\n\n    if (room.tokenpass && user && user.services && user.services.tokenpass) {\n      const balances = updateUserTokenpassBalances(user);\n\n      if (!Tokenpass.validateAccess(room.tokenpass, balances)) {\n        throw new Meteor.Error('error-not-allowed', 'Token required', {\n          method: 'joinRoom'\n        });\n      }\n    } else {\n      if (!canAccessRoom(room, user)) {\n        throw new Meteor.Error('error-not-allowed', 'Not allowed', {\n          method: 'joinRoom'\n        });\n      }\n\n      if (room.joinCodeRequired === true && code !== room.joinCode && !hasPermission(user._id, 'join-without-join-code')) {\n        throw new Meteor.Error('error-code-invalid', 'Invalid Room Password', {\n          method: 'joinRoom'\n        });\n      }\n    }\n\n    return addUserToRoom(rid, user);\n  }\n\n});","map":{"version":3,"sources":["app/lib/server/methods/joinRoom.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\n\nimport { hasPermission, canAccessRoom } from '../../../authorization/server';\nimport { Rooms } from '../../../models/server';\nimport { Tokenpass, updateUserTokenpassBalances } from '../../../tokenpass/server';\nimport { addUserToRoom } from '../functions';\nimport { RoomMemberActions } from '../../../../definition/IRoomTypeConfig';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\n\nMeteor.methods({\n\tjoinRoom(rid, code) {\n\t\tcheck(rid, String);\n\n\t\tconst user = Meteor.user();\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'joinRoom' });\n\t\t}\n\n\t\tconst room = Rooms.findOneById(rid);\n\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', { method: 'joinRoom' });\n\t\t}\n\n\t\tif (!roomCoordinator.getRoomDirectives(room.t)?.allowMemberAction(room, RoomMemberActions.JOIN)) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'joinRoom' });\n\t\t}\n\n\t\t// TODO we should have a 'beforeJoinRoom' call back so external services can do their own validations\n\n\t\tif (room.tokenpass && user && user.services && user.services.tokenpass) {\n\t\t\tconst balances = updateUserTokenpassBalances(user);\n\n\t\t\tif (!Tokenpass.validateAccess(room.tokenpass, balances)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Token required', { method: 'joinRoom' });\n\t\t\t}\n\t\t} else {\n\t\t\tif (!canAccessRoom(room, user)) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'joinRoom' });\n\t\t\t}\n\t\t\tif (room.joinCodeRequired === true && code !== room.joinCode && !hasPermission(user._id, 'join-without-join-code')) {\n\t\t\t\tthrow new Meteor.Error('error-code-invalid', 'Invalid Room Password', {\n\t\t\t\t\tmethod: 'joinRoom',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn addUserToRoom(rid, user);\n\t},\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"ae2a995eb98b71c388365761b7cc5666f70297ea"}
