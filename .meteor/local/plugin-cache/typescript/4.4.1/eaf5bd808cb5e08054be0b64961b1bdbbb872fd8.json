{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts","inputSourceMap":{"version":3,"file":"server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts","sourceRoot":"","sources":["server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for continuously monitoring the activity happening\n * on the asterisk. It is suggested that this class should be used only\n * for events which needs a continuous monitoring. For other types of action based events\n * such as queuesummary etc, Other classes should be used.\n *\n *\n * @remarks :\n * To begin with, we need 2 events tobe monitored\n * QueueCallerJoin.count would give us the total elements in the queue.\n * AgentCalled.queue and AgentCalled.destcalleridnum to signify which agent is currently ringing to serve the call.\n * (AgentConnect.calleridnum, connectedlinenum, queue) to signify which agent ansered the call from which queue.\n *\n */\nimport { Db } from 'mongodb';\n\nimport { Command, CommandType } from '../Command';\nimport { Logger } from '../../../../../lib/logger/Logger';\nimport { CallbackContext } from './CallbackContext';\n// import { sendMessage } from '../../../../../../app/lib/server/functions/sendMessage';\nimport { UsersRaw } from '../../../../../../app/models/server/raw/Users';\nimport { PbxEventsRaw } from '../../../../../../app/models/server/raw/PbxEvents';\nimport { api } from '../../../../../sdk/api';\nimport { ACDQueue } from './ACDQueue';\nimport { Commands } from '../Commands';\nimport { IQueueDetails } from '../../../../../../definition/ACDQueues';\nimport {\n\tIAgentCalledEvent,\n\tIAgentConnectEvent,\n\tIEventBase,\n\tIQueueCallerAbandon,\n\tIQueueCallerJoinEvent,\n\tIQueueEvent,\n\tIQueueMemberAdded,\n\tIQueueMemberRemoved,\n\tisIAgentCalledEvent,\n\tisIAgentConnectEvent,\n\tisIQueueCallerAbandonEvent,\n\tisIQueueCallerJoinEvent,\n\tisIQueueMemberAddedEvent,\n\tisIQueueMemberRemovedEvent,\n\tisICallOnHoldEvent,\n\tisICallUnHoldEvent,\n\tICallOnHold,\n\tICallUnHold,\n\tisIContactStatusEvent,\n\tIContactStatus,\n\tisICallHangupEvent,\n\tICallHangup,\n} from '../../../../../../definition/voip/IEvents';\n\nexport class ContinuousMonitor extends Command {\n\tprivate logger: Logger;\n\n\tprivate users: UsersRaw;\n\n\tprivate pbxEvents: PbxEventsRaw;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis._type = CommandType.AMI;\n\t\tthis.logger = new Logger('ContinuousMonitor');\n\t\tthis.users = new UsersRaw(db.collection('users'));\n\t\tthis.pbxEvents = new PbxEventsRaw(db.collection('pbx_events'));\n\t}\n\n\tprivate async getMembersFromQueueDetails(queueDetails: IQueueDetails): Promise<string[]> {\n\t\tconst { members } = queueDetails;\n\t\tif (!members) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst extensionList = members.map((m) => {\n\t\t\treturn m.name.toLowerCase().replace('pjsip/', '');\n\t\t});\n\n\t\tthis.logger.debug(`Finding members of queue ${queueDetails.name} between users`);\n\t\treturn (await this.users.findByExtensions(extensionList).toArray()).map((u) => u._id);\n\t}\n\n\t// Todo : Move this out of connector. This class is a busy class.\n\t// Not sure if we should do it here.\n\tprivate async getQueueDetails(queueName: string): Promise<IQueueDetails> {\n\t\tconst queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n\t\tqueue.connection = this.connection;\n\t\tconst queueDetails = await queue.executeCommand({ queueName });\n\t\treturn queueDetails.result as unknown as IQueueDetails;\n\t}\n\n\tasync processQueueMembershipChange(event: IQueueMemberAdded | IQueueMemberRemoved): Promise<void> {\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst queueName = event.queue;\n\t\tconst queueDetails = await this.getQueueDetails(queueName);\n\t\tconst { calls } = queueDetails;\n\t\tconst user = await this.users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\t\tif (user) {\n\t\t\tif (isIQueueMemberAddedEvent(event)) {\n\t\t\t\tapi.broadcast(`queue.queuememberadded`, user._id, queueName, calls);\n\t\t\t} else if (isIQueueMemberRemovedEvent(event)) {\n\t\t\t\tapi.broadcast(`queue.queuememberremoved`, user._id, queueName, calls);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processAgentCalled(event: IAgentCalledEvent): Promise<void> {\n\t\tthis.logger.debug(`Got new event queue.agentcalled at ${event.queue}`);\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst user = await this.users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthis.logger.debug(`Cannot broadcast queue.agentcalled. No agent found at extension ${extension}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.debug(`Broadcasting event queue.agentcalled to ${user._id}@${event.queue} on extension ${extension}`);\n\t\tconst callerId = {\n\t\t\tid: event.calleridnum,\n\t\t\tname: event.calleridname,\n\t\t};\n\n\t\tapi.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n\t}\n\n\tasync storePbxEvent(event: IQueueEvent | IContactStatus, eventName: string): Promise<void> {\n\t\ttry {\n\t\t\tconst now = new Date();\n\t\t\t// store pbx event\n\t\t\tif (isIContactStatusEvent(event)) {\n\t\t\t\t// This event represents when an agent drops a call because of disconnection\n\t\t\t\t// May happen for any reason outside of our control, like closing the browswer\n\t\t\t\t// Or network/power issues\n\t\t\t\tawait this.pbxEvents.insertOne({\n\t\t\t\t\tevent: eventName,\n\t\t\t\t\tuniqueId: `${eventName}-${event.contactstatus}-${now.getTime()}`,\n\t\t\t\t\tts: now,\n\t\t\t\t\tagentExtension: event.aor,\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n\t\t\t// However, since we're not using it for anything special, it's a \"fair use\"\n\t\t\t// uniqueId => {server}/{epoch}.{id of channel associated with this call}\n\t\t\tawait this.pbxEvents.insertOne({\n\t\t\t\tuniqueId: `${eventName}-${event.calleridnum}-${event.queue}-${event.uniqueid}`,\n\t\t\t\tevent: eventName,\n\t\t\t\tts: now,\n\t\t\t\tphone: event.calleridnum,\n\t\t\t\tqueue: event.queue,\n\t\t\t\tholdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event?.connectedlinenum,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthis.logger.debug('Event was handled by other instance');\n\t\t}\n\t}\n\n\tasync processAndBroadcastEventToAllQueueMembers(\n\t\tevent: IQueueCallerJoinEvent | IQueueCallerAbandon | IAgentConnectEvent | ICallHangup,\n\t): Promise<void> {\n\t\tthis.logger.debug(`Broadcasting to memebers, event =  ${event.event}`);\n\t\tconst queueDetails = await this.getQueueDetails(event.queue);\n\t\tconst members = await this.getMembersFromQueueDetails(queueDetails);\n\t\tswitch (event.event) {\n\t\t\tcase 'QueueCallerJoin': {\n\t\t\t\tconst callerId = {\n\t\t\t\t\tid: event.calleridnum,\n\t\t\t\t\tname: event.calleridname,\n\t\t\t\t};\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerJoin');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callerjoined to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tapi.broadcast('queue.callerjoined', m, event.queue, callerId, event.count);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'QueueCallerAbandon': {\n\t\t\t\tconst { calls } = queueDetails;\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerAbandon');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callabandoned to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tapi.broadcast('queue.callabandoned', m, event.queue, calls);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'AgentConnect': {\n\t\t\t\tconst { calls } = queueDetails;\n\n\t\t\t\tawait this.storePbxEvent(event, 'AgentConnect');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.agentconnected to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\t// event.holdtime signifies wait time in the queue.\n\t\t\t\t\tapi.broadcast('queue.agentconnected', m, event.queue, calls, event.holdtime);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`Cant process ${event}. No handlers associated with it`);\n\t\t}\n\t}\n\n\tasync processHoldUnholdEvents(event: ICallOnHold | ICallUnHold): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processHangupEvents(event: ICallHangup): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processContactStatusEvent(event: IContactStatus): Promise<void> {\n\t\tif (event.contactstatus === 'Removed') {\n\t\t\t// Room closing logic should be added here for the aor\n\t\t\t// aor signifies address of record, which should be used for\n\t\t\t// fetching the room for which serverBy = event.aor\n\t\t\treturn this.storePbxEvent(event, event.event);\n\t\t}\n\t}\n\n\tasync onEvent(event: IEventBase): Promise<void> {\n\t\tthis.logger.debug(`Received event ${event.event}`);\n\t\t// Event received when a queue member is notified of a call in queue\n\t\tif (isIAgentCalledEvent(event)) {\n\t\t\treturn this.processAgentCalled(event);\n\t\t}\n\n\t\t// Event received when a call joins queue\n\t\tif (isIQueueCallerJoinEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIAgentConnectEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueCallerAbandonEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n\t\t\treturn this.processQueueMembershipChange(event);\n\t\t}\n\n\t\tif (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n\t\t\treturn this.processHoldUnholdEvents(event);\n\t\t}\n\n\t\tif (isIContactStatusEvent(event)) {\n\t\t\treturn this.processContactStatusEvent(event);\n\t\t}\n\n\t\tif (isICallHangupEvent(event)) {\n\t\t\treturn this.processHangupEvents(event);\n\t\t}\n\n\t\t// Asterisk sends a metric ton of events, some may be useful but others doesn't\n\t\t// We need to check which ones we want to use in future, but until that moment, this log\n\t\t// Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n\t\tthis.logger.debug(`Cannot handle event ${event.event}`);\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tthis.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n\t}\n\n\tresetEventHandlers(): void {\n\t\tthis.connection.off('queuecallerjoin', this);\n\t\tthis.connection.off('agentcalled', this);\n\t\tthis.connection.off('agentconnect', this);\n\t\tthis.connection.off('queuememberadded', this);\n\t\tthis.connection.off('queuememberremoved', this);\n\t\tthis.connection.off('queuecallerabandon', this);\n\t\tthis.connection.off('hold', this);\n\t\tthis.connection.off('unhold', this);\n\t\tthis.connection.off('contactstatus', this);\n\t\tthis.connection.off('hangup', this);\n\t}\n\n\tinitMonitor(_data: any): boolean {\n\t\t/**\n\t\t * See the implementation of |call| function in CallbackContext to understand\n\t\t * why we are using regex here.\n\t\t */\n\t\tthis.actionid = '.*';\n\t\tthis.setupEventHandlers();\n\t\treturn true;\n\t}\n\n\tcleanMonitor(): boolean {\n\t\tthis.resetEventHandlers();\n\t\treturn true;\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts"}},"code":"module.export({\n  ContinuousMonitor: () => ContinuousMonitor\n});\nlet Command, CommandType;\nmodule.link(\"../Command\", {\n  Command(v) {\n    Command = v;\n  },\n\n  CommandType(v) {\n    CommandType = v;\n  }\n\n}, 0);\nlet Logger;\nmodule.link(\"../../../../../lib/logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 1);\nlet CallbackContext;\nmodule.link(\"./CallbackContext\", {\n  CallbackContext(v) {\n    CallbackContext = v;\n  }\n\n}, 2);\nlet UsersRaw;\nmodule.link(\"../../../../../../app/models/server/raw/Users\", {\n  UsersRaw(v) {\n    UsersRaw = v;\n  }\n\n}, 3);\nlet PbxEventsRaw;\nmodule.link(\"../../../../../../app/models/server/raw/PbxEvents\", {\n  PbxEventsRaw(v) {\n    PbxEventsRaw = v;\n  }\n\n}, 4);\nlet api;\nmodule.link(\"../../../../../sdk/api\", {\n  api(v) {\n    api = v;\n  }\n\n}, 5);\nlet ACDQueue;\nmodule.link(\"./ACDQueue\", {\n  ACDQueue(v) {\n    ACDQueue = v;\n  }\n\n}, 6);\nlet Commands;\nmodule.link(\"../Commands\", {\n  Commands(v) {\n    Commands = v;\n  }\n\n}, 7);\nlet isIAgentCalledEvent, isIAgentConnectEvent, isIQueueCallerAbandonEvent, isIQueueCallerJoinEvent, isIQueueMemberAddedEvent, isIQueueMemberRemovedEvent, isICallOnHoldEvent, isICallUnHoldEvent, isIContactStatusEvent, isICallHangupEvent;\nmodule.link(\"../../../../../../definition/voip/IEvents\", {\n  isIAgentCalledEvent(v) {\n    isIAgentCalledEvent = v;\n  },\n\n  isIAgentConnectEvent(v) {\n    isIAgentConnectEvent = v;\n  },\n\n  isIQueueCallerAbandonEvent(v) {\n    isIQueueCallerAbandonEvent = v;\n  },\n\n  isIQueueCallerJoinEvent(v) {\n    isIQueueCallerJoinEvent = v;\n  },\n\n  isIQueueMemberAddedEvent(v) {\n    isIQueueMemberAddedEvent = v;\n  },\n\n  isIQueueMemberRemovedEvent(v) {\n    isIQueueMemberRemovedEvent = v;\n  },\n\n  isICallOnHoldEvent(v) {\n    isICallOnHoldEvent = v;\n  },\n\n  isICallUnHoldEvent(v) {\n    isICallUnHoldEvent = v;\n  },\n\n  isIContactStatusEvent(v) {\n    isIContactStatusEvent = v;\n  },\n\n  isICallHangupEvent(v) {\n    isICallHangupEvent = v;\n  }\n\n}, 8);\n\nclass ContinuousMonitor extends Command {\n  constructor(command, parametersNeeded, db) {\n    super(command, parametersNeeded, db);\n    this.logger = void 0;\n    this.users = void 0;\n    this.pbxEvents = void 0;\n    this._type = CommandType.AMI;\n    this.logger = new Logger('ContinuousMonitor');\n    this.users = new UsersRaw(db.collection('users'));\n    this.pbxEvents = new PbxEventsRaw(db.collection('pbx_events'));\n  }\n\n  getMembersFromQueueDetails(queueDetails) {\n    return Promise.asyncApply(() => {\n      const {\n        members\n      } = queueDetails;\n\n      if (!members) {\n        return [];\n      }\n\n      const extensionList = members.map(m => {\n        return m.name.toLowerCase().replace('pjsip/', '');\n      });\n      this.logger.debug(\"Finding members of queue \".concat(queueDetails.name, \" between users\"));\n      return Promise.await(this.users.findByExtensions(extensionList).toArray()).map(u => u._id);\n    });\n  } // Todo : Move this out of connector. This class is a busy class.\n  // Not sure if we should do it here.\n\n\n  getQueueDetails(queueName) {\n    return Promise.asyncApply(() => {\n      const queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n      queue.connection = this.connection;\n      const queueDetails = Promise.await(queue.executeCommand({\n        queueName\n      }));\n      return queueDetails.result;\n    });\n  }\n\n  processQueueMembershipChange(event) {\n    return Promise.asyncApply(() => {\n      const extension = event.interface.toLowerCase().replace('pjsip/', '');\n      const queueName = event.queue;\n      const queueDetails = Promise.await(this.getQueueDetails(queueName));\n      const {\n        calls\n      } = queueDetails;\n      const user = Promise.await(this.users.findOneByExtension(extension, {\n        projection: {\n          _id: 1,\n          username: 1,\n          extension: 1\n        }\n      }));\n\n      if (user) {\n        if (isIQueueMemberAddedEvent(event)) {\n          api.broadcast(\"queue.queuememberadded\", user._id, queueName, calls);\n        } else if (isIQueueMemberRemovedEvent(event)) {\n          api.broadcast(\"queue.queuememberremoved\", user._id, queueName, calls);\n        }\n      }\n    });\n  }\n\n  processAgentCalled(event) {\n    return Promise.asyncApply(() => {\n      this.logger.debug(\"Got new event queue.agentcalled at \".concat(event.queue));\n      const extension = event.interface.toLowerCase().replace('pjsip/', '');\n      const user = Promise.await(this.users.findOneByExtension(extension, {\n        projection: {\n          _id: 1,\n          username: 1,\n          extension: 1\n        }\n      }));\n\n      if (!user) {\n        this.logger.debug(\"Cannot broadcast queue.agentcalled. No agent found at extension \".concat(extension));\n        return;\n      }\n\n      this.logger.debug(\"Broadcasting event queue.agentcalled to \".concat(user._id, \"@\").concat(event.queue, \" on extension \").concat(extension));\n      const callerId = {\n        id: event.calleridnum,\n        name: event.calleridname\n      };\n      api.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n    });\n  }\n\n  storePbxEvent(event, eventName) {\n    return Promise.asyncApply(() => {\n      try {\n        const now = new Date(); // store pbx event\n\n        if (isIContactStatusEvent(event)) {\n          // This event represents when an agent drops a call because of disconnection\n          // May happen for any reason outside of our control, like closing the browswer\n          // Or network/power issues\n          Promise.await(this.pbxEvents.insertOne({\n            event: eventName,\n            uniqueId: \"\".concat(eventName, \"-\").concat(event.contactstatus, \"-\").concat(now.getTime()),\n            ts: now,\n            agentExtension: event.aor\n          }));\n          return;\n        } // NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n        // However, since we're not using it for anything special, it's a \"fair use\"\n        // uniqueId => {server}/{epoch}.{id of channel associated with this call}\n\n\n        Promise.await(this.pbxEvents.insertOne({\n          uniqueId: \"\".concat(eventName, \"-\").concat(event.calleridnum, \"-\").concat(event.queue, \"-\").concat(event.uniqueid),\n          event: eventName,\n          ts: now,\n          phone: event.calleridnum,\n          queue: event.queue,\n          holdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n          callUniqueId: event.uniqueid,\n          callUniqueIdFallback: event.linkedid,\n          agentExtension: event === null || event === void 0 ? void 0 : event.connectedlinenum\n        }));\n      } catch (e) {\n        this.logger.debug('Event was handled by other instance');\n      }\n    });\n  }\n\n  processAndBroadcastEventToAllQueueMembers(event) {\n    return Promise.asyncApply(() => {\n      this.logger.debug(\"Broadcasting to memebers, event =  \".concat(event.event));\n      const queueDetails = Promise.await(this.getQueueDetails(event.queue));\n      const members = Promise.await(this.getMembersFromQueueDetails(queueDetails));\n\n      switch (event.event) {\n        case 'QueueCallerJoin':\n          {\n            const callerId = {\n              id: event.calleridnum,\n              name: event.calleridname\n            };\n            Promise.await(this.storePbxEvent(event, 'QueueCallerJoin'));\n            this.logger.debug(\"Broadcasting event queue.callerjoined to \".concat(members.length, \" agents on queue \").concat(event.queue));\n            members.forEach(m => {\n              api.broadcast('queue.callerjoined', m, event.queue, callerId, event.count);\n            });\n            break;\n          }\n\n        case 'QueueCallerAbandon':\n          {\n            const {\n              calls\n            } = queueDetails;\n            Promise.await(this.storePbxEvent(event, 'QueueCallerAbandon'));\n            this.logger.debug(\"Broadcasting event queue.callabandoned to \".concat(members.length, \" agents on queue \").concat(event.queue));\n            members.forEach(m => {\n              api.broadcast('queue.callabandoned', m, event.queue, calls);\n            });\n            break;\n          }\n\n        case 'AgentConnect':\n          {\n            const {\n              calls\n            } = queueDetails;\n            Promise.await(this.storePbxEvent(event, 'AgentConnect'));\n            this.logger.debug(\"Broadcasting event queue.agentconnected to \".concat(members.length, \" agents on queue \").concat(event.queue));\n            members.forEach(m => {\n              // event.holdtime signifies wait time in the queue.\n              api.broadcast('queue.agentconnected', m, event.queue, calls, event.holdtime);\n            });\n            break;\n          }\n\n        default:\n          this.logger.error(\"Cant process \".concat(event, \". No handlers associated with it\"));\n      }\n    });\n  }\n\n  processHoldUnholdEvents(event) {\n    return Promise.asyncApply(() => {\n      return this.storePbxEvent(event, event.event);\n    });\n  }\n\n  processHangupEvents(event) {\n    return Promise.asyncApply(() => {\n      return this.storePbxEvent(event, event.event);\n    });\n  }\n\n  processContactStatusEvent(event) {\n    return Promise.asyncApply(() => {\n      if (event.contactstatus === 'Removed') {\n        // Room closing logic should be added here for the aor\n        // aor signifies address of record, which should be used for\n        // fetching the room for which serverBy = event.aor\n        return this.storePbxEvent(event, event.event);\n      }\n    });\n  }\n\n  onEvent(event) {\n    return Promise.asyncApply(() => {\n      this.logger.debug(\"Received event \".concat(event.event)); // Event received when a queue member is notified of a call in queue\n\n      if (isIAgentCalledEvent(event)) {\n        return this.processAgentCalled(event);\n      } // Event received when a call joins queue\n\n\n      if (isIQueueCallerJoinEvent(event)) {\n        return this.processAndBroadcastEventToAllQueueMembers(event);\n      }\n\n      if (isIAgentConnectEvent(event)) {\n        return this.processAndBroadcastEventToAllQueueMembers(event);\n      }\n\n      if (isIQueueCallerAbandonEvent(event)) {\n        return this.processAndBroadcastEventToAllQueueMembers(event);\n      }\n\n      if (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n        return this.processQueueMembershipChange(event);\n      }\n\n      if (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n        return this.processHoldUnholdEvents(event);\n      }\n\n      if (isIContactStatusEvent(event)) {\n        return this.processContactStatusEvent(event);\n      }\n\n      if (isICallHangupEvent(event)) {\n        return this.processHangupEvents(event);\n      } // Asterisk sends a metric ton of events, some may be useful but others doesn't\n      // We need to check which ones we want to use in future, but until that moment, this log\n      // Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n\n\n      this.logger.debug(\"Cannot handle event \".concat(event.event));\n    });\n  }\n\n  setupEventHandlers() {\n    // Setup necessary command event handlers based on the command\n    this.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n    this.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n  }\n\n  resetEventHandlers() {\n    this.connection.off('queuecallerjoin', this);\n    this.connection.off('agentcalled', this);\n    this.connection.off('agentconnect', this);\n    this.connection.off('queuememberadded', this);\n    this.connection.off('queuememberremoved', this);\n    this.connection.off('queuecallerabandon', this);\n    this.connection.off('hold', this);\n    this.connection.off('unhold', this);\n    this.connection.off('contactstatus', this);\n    this.connection.off('hangup', this);\n  }\n\n  initMonitor(_data) {\n    /**\n     * See the implementation of |call| function in CallbackContext to understand\n     * why we are using regex here.\n     */\n    this.actionid = '.*';\n    this.setupEventHandlers();\n    return true;\n  }\n\n  cleanMonitor() {\n    this.resetEventHandlers();\n    return true;\n  }\n\n}","map":{"version":3,"sources":["server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for continuously monitoring the activity happening\n * on the asterisk. It is suggested that this class should be used only\n * for events which needs a continuous monitoring. For other types of action based events\n * such as queuesummary etc, Other classes should be used.\n *\n *\n * @remarks :\n * To begin with, we need 2 events tobe monitored\n * QueueCallerJoin.count would give us the total elements in the queue.\n * AgentCalled.queue and AgentCalled.destcalleridnum to signify which agent is currently ringing to serve the call.\n * (AgentConnect.calleridnum, connectedlinenum, queue) to signify which agent ansered the call from which queue.\n *\n */\nimport { Db } from 'mongodb';\n\nimport { Command, CommandType } from '../Command';\nimport { Logger } from '../../../../../lib/logger/Logger';\nimport { CallbackContext } from './CallbackContext';\n// import { sendMessage } from '../../../../../../app/lib/server/functions/sendMessage';\nimport { UsersRaw } from '../../../../../../app/models/server/raw/Users';\nimport { PbxEventsRaw } from '../../../../../../app/models/server/raw/PbxEvents';\nimport { api } from '../../../../../sdk/api';\nimport { ACDQueue } from './ACDQueue';\nimport { Commands } from '../Commands';\nimport { IQueueDetails } from '../../../../../../definition/ACDQueues';\nimport {\n\tIAgentCalledEvent,\n\tIAgentConnectEvent,\n\tIEventBase,\n\tIQueueCallerAbandon,\n\tIQueueCallerJoinEvent,\n\tIQueueEvent,\n\tIQueueMemberAdded,\n\tIQueueMemberRemoved,\n\tisIAgentCalledEvent,\n\tisIAgentConnectEvent,\n\tisIQueueCallerAbandonEvent,\n\tisIQueueCallerJoinEvent,\n\tisIQueueMemberAddedEvent,\n\tisIQueueMemberRemovedEvent,\n\tisICallOnHoldEvent,\n\tisICallUnHoldEvent,\n\tICallOnHold,\n\tICallUnHold,\n\tisIContactStatusEvent,\n\tIContactStatus,\n\tisICallHangupEvent,\n\tICallHangup,\n} from '../../../../../../definition/voip/IEvents';\n\nexport class ContinuousMonitor extends Command {\n\tprivate logger: Logger;\n\n\tprivate users: UsersRaw;\n\n\tprivate pbxEvents: PbxEventsRaw;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis._type = CommandType.AMI;\n\t\tthis.logger = new Logger('ContinuousMonitor');\n\t\tthis.users = new UsersRaw(db.collection('users'));\n\t\tthis.pbxEvents = new PbxEventsRaw(db.collection('pbx_events'));\n\t}\n\n\tprivate async getMembersFromQueueDetails(queueDetails: IQueueDetails): Promise<string[]> {\n\t\tconst { members } = queueDetails;\n\t\tif (!members) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst extensionList = members.map((m) => {\n\t\t\treturn m.name.toLowerCase().replace('pjsip/', '');\n\t\t});\n\n\t\tthis.logger.debug(`Finding members of queue ${queueDetails.name} between users`);\n\t\treturn (await this.users.findByExtensions(extensionList).toArray()).map((u) => u._id);\n\t}\n\n\t// Todo : Move this out of connector. This class is a busy class.\n\t// Not sure if we should do it here.\n\tprivate async getQueueDetails(queueName: string): Promise<IQueueDetails> {\n\t\tconst queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n\t\tqueue.connection = this.connection;\n\t\tconst queueDetails = await queue.executeCommand({ queueName });\n\t\treturn queueDetails.result as unknown as IQueueDetails;\n\t}\n\n\tasync processQueueMembershipChange(event: IQueueMemberAdded | IQueueMemberRemoved): Promise<void> {\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst queueName = event.queue;\n\t\tconst queueDetails = await this.getQueueDetails(queueName);\n\t\tconst { calls } = queueDetails;\n\t\tconst user = await this.users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\t\tif (user) {\n\t\t\tif (isIQueueMemberAddedEvent(event)) {\n\t\t\t\tapi.broadcast(`queue.queuememberadded`, user._id, queueName, calls);\n\t\t\t} else if (isIQueueMemberRemovedEvent(event)) {\n\t\t\t\tapi.broadcast(`queue.queuememberremoved`, user._id, queueName, calls);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processAgentCalled(event: IAgentCalledEvent): Promise<void> {\n\t\tthis.logger.debug(`Got new event queue.agentcalled at ${event.queue}`);\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst user = await this.users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthis.logger.debug(`Cannot broadcast queue.agentcalled. No agent found at extension ${extension}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.debug(`Broadcasting event queue.agentcalled to ${user._id}@${event.queue} on extension ${extension}`);\n\t\tconst callerId = {\n\t\t\tid: event.calleridnum,\n\t\t\tname: event.calleridname,\n\t\t};\n\n\t\tapi.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n\t}\n\n\tasync storePbxEvent(event: IQueueEvent | IContactStatus, eventName: string): Promise<void> {\n\t\ttry {\n\t\t\tconst now = new Date();\n\t\t\t// store pbx event\n\t\t\tif (isIContactStatusEvent(event)) {\n\t\t\t\t// This event represents when an agent drops a call because of disconnection\n\t\t\t\t// May happen for any reason outside of our control, like closing the browswer\n\t\t\t\t// Or network/power issues\n\t\t\t\tawait this.pbxEvents.insertOne({\n\t\t\t\t\tevent: eventName,\n\t\t\t\t\tuniqueId: `${eventName}-${event.contactstatus}-${now.getTime()}`,\n\t\t\t\t\tts: now,\n\t\t\t\t\tagentExtension: event.aor,\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n\t\t\t// However, since we're not using it for anything special, it's a \"fair use\"\n\t\t\t// uniqueId => {server}/{epoch}.{id of channel associated with this call}\n\t\t\tawait this.pbxEvents.insertOne({\n\t\t\t\tuniqueId: `${eventName}-${event.calleridnum}-${event.queue}-${event.uniqueid}`,\n\t\t\t\tevent: eventName,\n\t\t\t\tts: now,\n\t\t\t\tphone: event.calleridnum,\n\t\t\t\tqueue: event.queue,\n\t\t\t\tholdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event?.connectedlinenum,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthis.logger.debug('Event was handled by other instance');\n\t\t}\n\t}\n\n\tasync processAndBroadcastEventToAllQueueMembers(\n\t\tevent: IQueueCallerJoinEvent | IQueueCallerAbandon | IAgentConnectEvent | ICallHangup,\n\t): Promise<void> {\n\t\tthis.logger.debug(`Broadcasting to memebers, event =  ${event.event}`);\n\t\tconst queueDetails = await this.getQueueDetails(event.queue);\n\t\tconst members = await this.getMembersFromQueueDetails(queueDetails);\n\t\tswitch (event.event) {\n\t\t\tcase 'QueueCallerJoin': {\n\t\t\t\tconst callerId = {\n\t\t\t\t\tid: event.calleridnum,\n\t\t\t\t\tname: event.calleridname,\n\t\t\t\t};\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerJoin');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callerjoined to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tapi.broadcast('queue.callerjoined', m, event.queue, callerId, event.count);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'QueueCallerAbandon': {\n\t\t\t\tconst { calls } = queueDetails;\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerAbandon');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callabandoned to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tapi.broadcast('queue.callabandoned', m, event.queue, calls);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'AgentConnect': {\n\t\t\t\tconst { calls } = queueDetails;\n\n\t\t\t\tawait this.storePbxEvent(event, 'AgentConnect');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.agentconnected to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\t// event.holdtime signifies wait time in the queue.\n\t\t\t\t\tapi.broadcast('queue.agentconnected', m, event.queue, calls, event.holdtime);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`Cant process ${event}. No handlers associated with it`);\n\t\t}\n\t}\n\n\tasync processHoldUnholdEvents(event: ICallOnHold | ICallUnHold): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processHangupEvents(event: ICallHangup): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processContactStatusEvent(event: IContactStatus): Promise<void> {\n\t\tif (event.contactstatus === 'Removed') {\n\t\t\t// Room closing logic should be added here for the aor\n\t\t\t// aor signifies address of record, which should be used for\n\t\t\t// fetching the room for which serverBy = event.aor\n\t\t\treturn this.storePbxEvent(event, event.event);\n\t\t}\n\t}\n\n\tasync onEvent(event: IEventBase): Promise<void> {\n\t\tthis.logger.debug(`Received event ${event.event}`);\n\t\t// Event received when a queue member is notified of a call in queue\n\t\tif (isIAgentCalledEvent(event)) {\n\t\t\treturn this.processAgentCalled(event);\n\t\t}\n\n\t\t// Event received when a call joins queue\n\t\tif (isIQueueCallerJoinEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIAgentConnectEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueCallerAbandonEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n\t\t\treturn this.processQueueMembershipChange(event);\n\t\t}\n\n\t\tif (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n\t\t\treturn this.processHoldUnholdEvents(event);\n\t\t}\n\n\t\tif (isIContactStatusEvent(event)) {\n\t\t\treturn this.processContactStatusEvent(event);\n\t\t}\n\n\t\tif (isICallHangupEvent(event)) {\n\t\t\treturn this.processHangupEvents(event);\n\t\t}\n\n\t\t// Asterisk sends a metric ton of events, some may be useful but others doesn't\n\t\t// We need to check which ones we want to use in future, but until that moment, this log\n\t\t// Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n\t\tthis.logger.debug(`Cannot handle event ${event.event}`);\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tthis.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n\t}\n\n\tresetEventHandlers(): void {\n\t\tthis.connection.off('queuecallerjoin', this);\n\t\tthis.connection.off('agentcalled', this);\n\t\tthis.connection.off('agentconnect', this);\n\t\tthis.connection.off('queuememberadded', this);\n\t\tthis.connection.off('queuememberremoved', this);\n\t\tthis.connection.off('queuecallerabandon', this);\n\t\tthis.connection.off('hold', this);\n\t\tthis.connection.off('unhold', this);\n\t\tthis.connection.off('contactstatus', this);\n\t\tthis.connection.off('hangup', this);\n\t}\n\n\tinitMonitor(_data: any): boolean {\n\t\t/**\n\t\t * See the implementation of |call| function in CallbackContext to understand\n\t\t * why we are using regex here.\n\t\t */\n\t\tthis.actionid = '.*';\n\t\tthis.setupEventHandlers();\n\t\treturn true;\n\t}\n\n\tcleanMonitor(): boolean {\n\t\tthis.resetEventHandlers();\n\t\treturn true;\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"eaf5bd808cb5e08054be0b64961b1bdbbb872fd8"}
