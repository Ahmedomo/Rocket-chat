{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/rooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/api/server/v1/voip/rooms.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/rooms.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/rooms.ts","sourceRoot":"","sources":["app/api/server/v1/voip/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nimport { API } from '../../api';\nimport { VoipRoom, LivechatVisitors, Users } from '../../../../models/server/raw';\nimport { LivechatVoip } from '../../../../../server/sdk';\nimport { ILivechatAgent } from '../../../../../definition/ILivechatAgent';\nimport { hasPermission } from '../../../../authorization/server';\nimport { typedJsonParse } from '../../../../../lib/typedJSONParse';\n\ntype DateParam = { start?: string; end?: string };\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};\n};\nconst validateDateParams = (property: string, date: DateParam = {}): DateParam => {\n\tif (date?.start && isNaN(Date.parse(date.start))) {\n\t\tthrow new Error(`The \"${property}.start\" query parameter must be a valid date.`);\n\t}\n\tif (date?.end && isNaN(Date.parse(date.end))) {\n\t\tthrow new Error(`The \"${property}.end\" query parameter must be a valid date.`);\n\t}\n\treturn date;\n};\nconst parseAndValidate = (property: string, date?: string): DateParam => {\n\treturn validateDateParams(property, parseDateParams(date));\n};\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room\n *    get:\n *      description: Creates a new room if rid is not passed, else gets an existing room\n * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n * \t\tcenter is 600 calls a day\n * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n * \t\twe will keep the safe limit which is 5 calls a minute.\n *      security:\n *      parameters:\n *        - name: token\n *          in: query\n *          description: The visitor token\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: rid\n *          in: query\n *          description: The room id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: agentId\n *          in: query\n *          description: Agent Id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: Room object and flag indicating whether a new room is created.\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      room:\n *                        type: object\n *                        items:\n *                          $ref: '#/components/schemas/IRoom'\n *                      newRoom:\n *                        type: boolean\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{ authRequired: false, rateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 } },\n\t{\n\t\tasync get() {\n\t\t\tconst defaultCheckParams = {\n\t\t\t\ttoken: String,\n\t\t\t\tagentId: Match.Maybe(String),\n\t\t\t\trid: Match.Maybe(String),\n\t\t\t};\n\t\t\tcheck(this.queryParams, defaultCheckParams);\n\n\t\t\tconst { token, rid, agentId } = this.queryParams;\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!guest) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await VoipRoom.findOneOpenByVisitorToken(token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\n\t\t\t\tconst agentObj: ILivechatAgent = await Users.findOneAgentById(agentId, {\n\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t});\n\t\t\t\tif (!agentObj?.username) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst { username, _id } = agentObj;\n\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(await LivechatVoip.getNewRoom(guest, agent, rid, { projection: API.v1.defaultFieldsToExclude }));\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/rooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields } = this.parseJsonQuery();\n\t\t\tconst { agents, open, tags, queue, visitorId } = this.requestParams();\n\t\t\tconst { createdAt: createdAtParam, closedAt: closedAtParam } = this.requestParams();\n\n\t\t\tcheck(agents, Match.Maybe([String]));\n\t\t\tcheck(open, Match.Maybe(String));\n\t\t\tcheck(tags, Match.Maybe([String]));\n\t\t\tcheck(queue, Match.Maybe(String));\n\t\t\tcheck(visitorId, Match.Maybe(String));\n\n\t\t\t// Reusing same L room permissions for simplicity\n\t\t\tconst hasAdminAccess = hasPermission(this.userId, 'view-livechat-rooms');\n\t\t\tconst hasAgentAccess = hasPermission(this.userId, 'view-l-room') && agents?.includes(this.userId) && agents?.length === 1;\n\t\t\tif (!hasAdminAccess && !hasAgentAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\toptions: { sort, offset, count, fields },\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room.close\n *    post:\n *      description: Closes an open room\n * \t\tbased on rid and token. Setting rate limit for this too\n * \t\tBecause room creation happens 5/minute, rate limit for this api\n * \t\tis also set to 5/minute.\n *      security:\n *\t\trequestBody:\n *      required: true\n *      content:\n *\t\t\tapplication/json:\n *          schema:\n *          \ttype: object\n *\t\t\t  \tproperties:\n *\t\t\t\t\trid:\n *                 \t\ttype: string\n *\t\t\t\t\ttoken:\n *\t\t\t\t\t\ttype: string\n *      responses:\n *        200:\n *          description: rid of closed room and a comment for closing room\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      rid:\n *                        \ttype: string\n *                      comment:\n *                      \ttype: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'voip/room.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\trid: String,\n\t\t\t\ttoken: String,\n\t\t\t\tcomment: Match.Maybe(String),\n\t\t\t\ttags: Match.Maybe([String]),\n\t\t\t});\n\t\t\tconst { rid, token, comment, tags } = this.bodyParams;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!visitor) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\t\t\tconst room = await LivechatVoip.findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\tif (!room.open) {\n\t\t\t\treturn API.v1.failure('room-closed');\n\t\t\t}\n\t\t\tconst closeResult = await LivechatVoip.closeRoom(visitor, room, this.user, comment, tags);\n\t\t\tif (!closeResult) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\t\t\treturn API.v1.success({ rid });\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/rooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/voip/rooms.ts"}},"code":"let Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet API;\nmodule.link(\"../../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 2);\nlet VoipRoom, LivechatVisitors, Users;\nmodule.link(\"../../../../models/server/raw\", {\n  VoipRoom(v) {\n    VoipRoom = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 3);\nlet LivechatVoip;\nmodule.link(\"../../../../../server/sdk\", {\n  LivechatVoip(v) {\n    LivechatVoip = v;\n  }\n\n}, 4);\nlet hasPermission;\nmodule.link(\"../../../../authorization/server\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 5);\nlet typedJsonParse;\nmodule.link(\"../../../../../lib/typedJSONParse\", {\n  typedJsonParse(v) {\n    typedJsonParse = v;\n  }\n\n}, 6);\n\nconst parseDateParams = date => {\n  return date && typeof date === 'string' ? typedJsonParse(date) : {};\n};\n\nconst validateDateParams = function (property) {\n  let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (date !== null && date !== void 0 && date.start && isNaN(Date.parse(date.start))) {\n    throw new Error(\"The \\\"\".concat(property, \".start\\\" query parameter must be a valid date.\"));\n  }\n\n  if (date !== null && date !== void 0 && date.end && isNaN(Date.parse(date.end))) {\n    throw new Error(\"The \\\"\".concat(property, \".end\\\" query parameter must be a valid date.\"));\n  }\n\n  return date;\n};\n\nconst parseAndValidate = (property, date) => {\n  return validateDateParams(property, parseDateParams(date));\n};\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room\n *    get:\n *      description: Creates a new room if rid is not passed, else gets an existing room\n * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n * \t\tcenter is 600 calls a day\n * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n * \t\twe will keep the safe limit which is 5 calls a minute.\n *      security:\n *      parameters:\n *        - name: token\n *          in: query\n *          description: The visitor token\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: rid\n *          in: query\n *          description: The room id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: agentId\n *          in: query\n *          description: Agent Id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: Room object and flag indicating whether a new room is created.\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      room:\n *                        type: object\n *                        items:\n *                          $ref: '#/components/schemas/IRoom'\n *                      newRoom:\n *                        type: boolean\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\n\nAPI.v1.addRoute('voip/room', {\n  authRequired: false,\n  rateLimiterOptions: {\n    numRequestsAllowed: 5,\n    intervalTimeInMS: 60000\n  }\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const defaultCheckParams = {\n        token: String,\n        agentId: Match.Maybe(String),\n        rid: Match.Maybe(String)\n      };\n      check(this.queryParams, defaultCheckParams);\n      const {\n        token,\n        rid,\n        agentId\n      } = this.queryParams;\n      const guest = Promise.await(LivechatVisitors.getVisitorByToken(token, {}));\n\n      if (!guest) {\n        return API.v1.failure('invalid-token');\n      }\n\n      if (!rid) {\n        const room = Promise.await(VoipRoom.findOneOpenByVisitorToken(token, {\n          projection: API.v1.defaultFieldsToExclude\n        }));\n\n        if (room) {\n          return API.v1.success({\n            room,\n            newRoom: false\n          });\n        }\n\n        const agentObj = Promise.await(Users.findOneAgentById(agentId, {\n          projection: {\n            username: 1\n          }\n        }));\n\n        if (!(agentObj !== null && agentObj !== void 0 && agentObj.username)) {\n          return API.v1.failure('agent-not-found');\n        }\n\n        const {\n          username,\n          _id\n        } = agentObj;\n        const agent = {\n          agentId: _id,\n          username\n        };\n        const rid = Random.id();\n        return API.v1.success(Promise.await(LivechatVoip.getNewRoom(guest, agent, rid, {\n          projection: API.v1.defaultFieldsToExclude\n        })));\n      }\n\n      const room = Promise.await(VoipRoom.findOneByIdAndVisitorToken(rid, token, {\n        projection: API.v1.defaultFieldsToExclude\n      }));\n\n      if (!room) {\n        return API.v1.failure('invalid-room');\n      }\n\n      return API.v1.success({\n        room,\n        newRoom: false\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('voip/rooms', {\n  authRequired: true\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const {\n        sort,\n        fields\n      } = this.parseJsonQuery();\n      const {\n        agents,\n        open,\n        tags,\n        queue,\n        visitorId\n      } = this.requestParams();\n      const {\n        createdAt: createdAtParam,\n        closedAt: closedAtParam\n      } = this.requestParams();\n      check(agents, Match.Maybe([String]));\n      check(open, Match.Maybe(String));\n      check(tags, Match.Maybe([String]));\n      check(queue, Match.Maybe(String));\n      check(visitorId, Match.Maybe(String)); // Reusing same L room permissions for simplicity\n\n      const hasAdminAccess = hasPermission(this.userId, 'view-livechat-rooms');\n      const hasAgentAccess = hasPermission(this.userId, 'view-l-room') && (agents === null || agents === void 0 ? void 0 : agents.includes(this.userId)) && (agents === null || agents === void 0 ? void 0 : agents.length) === 1;\n\n      if (!hasAdminAccess && !hasAgentAccess) {\n        return API.v1.unauthorized();\n      }\n\n      const createdAt = parseAndValidate('createdAt', createdAtParam);\n      const closedAt = parseAndValidate('closedAt', closedAtParam);\n      return API.v1.success(Promise.await(LivechatVoip.findVoipRooms({\n        agents,\n        open: open === 'true',\n        tags,\n        queue,\n        visitorId,\n        createdAt,\n        closedAt,\n        options: {\n          sort,\n          offset,\n          count,\n          fields\n        }\n      })));\n    });\n  }\n\n});\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room.close\n *    post:\n *      description: Closes an open room\n * \t\tbased on rid and token. Setting rate limit for this too\n * \t\tBecause room creation happens 5/minute, rate limit for this api\n * \t\tis also set to 5/minute.\n *      security:\n *\t\trequestBody:\n *      required: true\n *      content:\n *\t\t\tapplication/json:\n *          schema:\n *          \ttype: object\n *\t\t\t  \tproperties:\n *\t\t\t\t\trid:\n *                 \t\ttype: string\n *\t\t\t\t\ttoken:\n *\t\t\t\t\t\ttype: string\n *      responses:\n *        200:\n *          description: rid of closed room and a comment for closing room\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      rid:\n *                        \ttype: string\n *                      comment:\n *                      \ttype: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute('voip/room.close', {\n  authRequired: true\n}, {\n  post() {\n    return Promise.asyncApply(() => {\n      check(this.bodyParams, {\n        rid: String,\n        token: String,\n        comment: Match.Maybe(String),\n        tags: Match.Maybe([String])\n      });\n      const {\n        rid,\n        token,\n        comment,\n        tags\n      } = this.bodyParams;\n      const visitor = Promise.await(LivechatVisitors.getVisitorByToken(token, {}));\n\n      if (!visitor) {\n        return API.v1.failure('invalid-token');\n      }\n\n      const room = Promise.await(LivechatVoip.findRoom(token, rid));\n\n      if (!room) {\n        return API.v1.failure('invalid-room');\n      }\n\n      if (!room.open) {\n        return API.v1.failure('room-closed');\n      }\n\n      const closeResult = Promise.await(LivechatVoip.closeRoom(visitor, room, this.user, comment, tags));\n\n      if (!closeResult) {\n        return API.v1.failure();\n      }\n\n      return API.v1.success({\n        rid\n      });\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/voip/rooms.ts"],"names":[],"mappings":"AAAA,IAAA,KAAA,EAAS,KAAT;AAAgB,MAAK,CAAE,IAAP,CAAO,cAAP,EAA2B;AAAC,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA,GAAD;;AAAC,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAD,CAA3B,EAA4B,CAA5B;AAA4B,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,GAAA;AAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AAAA,EAAA,GAAA,CAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA,EAAA,gBAAA,EAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,YAAA;AAAA,MAAA,CAAA,IAAA,CAAA,2BAAA,EAAA;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kCAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,mCAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAW5C,MAAM,eAAe,GAAI,IAAD,IAA6B;AACpD,SAAO,IAAI,IAAI,OAAO,IAAP,KAAgB,QAAxB,GAAmC,cAAc,CAAY,IAAZ,CAAjD,GAAqE,EAA5E;AACA,CAFD;;AAGA,MAAM,kBAAkB,GAAG,UAAC,QAAD,EAAsD;AAAA,MAAnC,IAAmC,uEAAjB,EAAiB;;AAChF,MAAI,IAAI,SAAJ,IAAA,IAAI,WAAJ,IAAA,IAAI,CAAE,KAAN,IAAe,KAAK,CAAC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,KAAhB,CAAD,CAAxB,EAAkD;AACjD,UAAM,IAAI,KAAJ,iBAAkB,QAAlB,oDAAN;AACA;;AACD,MAAI,IAAI,SAAJ,IAAA,IAAI,WAAJ,IAAA,IAAI,CAAE,GAAN,IAAa,KAAK,CAAC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAhB,CAAD,CAAtB,EAA8C;AAC7C,UAAM,IAAI,KAAJ,iBAAkB,QAAlB,kDAAN;AACA;;AACD,SAAO,IAAP;AACA,CARD;;AASA,MAAM,gBAAgB,GAAG,CAAC,QAAD,EAAmB,IAAnB,KAA+C;AACvE,SAAO,kBAAkB,CAAC,QAAD,EAAW,eAAe,CAAC,IAAD,CAA1B,CAAzB;AACA,CAFD;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDG;;;AAEH,GAAG,CAAC,EAAJ,CAAO,QAAP,CACC,WADD,EAEC;AAAE,EAAA,YAAY,EAAE,KAAhB;AAAuB,EAAA,kBAAkB,EAAE;AAAE,IAAA,kBAAkB,EAAE,CAAtB;AAAyB,IAAA,gBAAgB,EAAE;AAA3C;AAA3C,CAFD,EAGC;AACO,EAAA,GAAN;AAAA,oCAAS;AACR,YAAM,kBAAkB,GAAG;AAC1B,QAAA,KAAK,EAAE,MADmB;AAE1B,QAAA,OAAO,EAAE,KAAK,CAAC,KAAN,CAAY,MAAZ,CAFiB;AAG1B,QAAA,GAAG,EAAE,KAAK,CAAC,KAAN,CAAY,MAAZ;AAHqB,OAA3B;AAKA,MAAA,KAAK,CAAC,KAAK,WAAN,EAAmB,kBAAnB,CAAL;AAEA,YAAM;AAAE,QAAA,KAAF;AAAS,QAAA,GAAT;AAAc,QAAA;AAAd,UAA0B,KAAK,WAArC;AACA,YAAM,KAAK,iBAAS,gBAAgB,CAAC,iBAAjB,CAAmC,KAAnC,EAA0C,EAA1C,CAAT,CAAX;;AACA,UAAI,CAAC,KAAL,EAAY;AACX,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe,eAAf,CAAP;AACA;;AAED,UAAI,CAAC,GAAL,EAAU;AACT,cAAM,IAAI,iBAAS,QAAQ,CAAC,yBAAT,CAAmC,KAAnC,EAA0C;AAAE,UAAA,UAAU,EAAE,GAAG,CAAC,EAAJ,CAAO;AAArB,SAA1C,CAAT,CAAV;;AACA,YAAI,IAAJ,EAAU;AACT,iBAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe;AAAE,YAAA,IAAF;AAAQ,YAAA,OAAO,EAAE;AAAjB,WAAf,CAAP;AACA;;AAED,cAAM,QAAQ,iBAAyB,KAAK,CAAC,gBAAN,CAAuB,OAAvB,EAAgC;AACtE,UAAA,UAAU,EAAE;AAAE,YAAA,QAAQ,EAAE;AAAZ;AAD0D,SAAhC,CAAzB,CAAd;;AAGA,YAAI,EAAC,QAAD,aAAC,QAAD,eAAC,QAAQ,CAAE,QAAX,CAAJ,EAAyB;AACxB,iBAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe,iBAAf,CAAP;AACA;;AAED,cAAM;AAAE,UAAA,QAAF;AAAY,UAAA;AAAZ,YAAoB,QAA1B;AACA,cAAM,KAAK,GAAG;AAAE,UAAA,OAAO,EAAE,GAAX;AAAgB,UAAA;AAAhB,SAAd;AACA,cAAM,GAAG,GAAG,MAAM,CAAC,EAAP,EAAZ;AAEA,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,eAAqB,YAAY,CAAC,UAAb,CAAwB,KAAxB,EAA+B,KAA/B,EAAsC,GAAtC,EAA2C;AAAE,UAAA,UAAU,EAAE,GAAG,CAAC,EAAJ,CAAO;AAArB,SAA3C,CAArB,EAAP;AACA;;AAED,YAAM,IAAI,iBAAS,QAAQ,CAAC,0BAAT,CAAoC,GAApC,EAAyC,KAAzC,EAAgD;AAAE,QAAA,UAAU,EAAE,GAAG,CAAC,EAAJ,CAAO;AAArB,OAAhD,CAAT,CAAV;;AACA,UAAI,CAAC,IAAL,EAAW;AACV,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe,cAAf,CAAP;AACA;;AACD,aAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe;AAAE,QAAA,IAAF;AAAQ,QAAA,OAAO,EAAE;AAAjB,OAAf,CAAP;AACA,KAvCD;AAAA;;AADD,CAHD;AA+CA,GAAG,CAAC,EAAJ,CAAO,QAAP,CACC,YADD,EAEC;AAAE,EAAA,YAAY,EAAE;AAAhB,CAFD,EAGC;AACO,EAAA,GAAN;AAAA,oCAAS;AACR,YAAM;AAAE,QAAA,MAAF;AAAU,QAAA;AAAV,UAAoB,KAAK,kBAAL,EAA1B;AACA,YAAM;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,UAAmB,KAAK,cAAL,EAAzB;AACA,YAAM;AAAE,QAAA,MAAF;AAAU,QAAA,IAAV;AAAgB,QAAA,IAAhB;AAAsB,QAAA,KAAtB;AAA6B,QAAA;AAA7B,UAA2C,KAAK,aAAL,EAAjD;AACA,YAAM;AAAE,QAAA,SAAS,EAAE,cAAb;AAA6B,QAAA,QAAQ,EAAE;AAAvC,UAAyD,KAAK,aAAL,EAA/D;AAEA,MAAA,KAAK,CAAC,MAAD,EAAS,KAAK,CAAC,KAAN,CAAY,CAAC,MAAD,CAAZ,CAAT,CAAL;AACA,MAAA,KAAK,CAAC,IAAD,EAAO,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAP,CAAL;AACA,MAAA,KAAK,CAAC,IAAD,EAAO,KAAK,CAAC,KAAN,CAAY,CAAC,MAAD,CAAZ,CAAP,CAAL;AACA,MAAA,KAAK,CAAC,KAAD,EAAQ,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAR,CAAL;AACA,MAAA,KAAK,CAAC,SAAD,EAAY,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAZ,CAAL,CAVQ,CAYR;;AACA,YAAM,cAAc,GAAG,aAAa,CAAC,KAAK,MAAN,EAAc,qBAAd,CAApC;AACA,YAAM,cAAc,GAAG,aAAa,CAAC,KAAK,MAAN,EAAc,aAAd,CAAb,KAA6C,MAA7C,aAA6C,MAA7C,uBAA6C,MAAM,CAAE,QAAR,CAAiB,KAAK,MAAtB,CAA7C,KAA8E,CAAA,MAAM,SAAN,IAAA,MAAM,WAAN,YAAA,MAAM,CAAE,MAAR,MAAmB,CAAxH;;AACA,UAAI,CAAC,cAAD,IAAmB,CAAC,cAAxB,EAAwC;AACvC,eAAO,GAAG,CAAC,EAAJ,CAAO,YAAP,EAAP;AACA;;AAED,YAAM,SAAS,GAAG,gBAAgB,CAAC,WAAD,EAAc,cAAd,CAAlC;AACA,YAAM,QAAQ,GAAG,gBAAgB,CAAC,UAAD,EAAa,aAAb,CAAjC;AAEA,aAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,eACA,YAAY,CAAC,aAAb,CAA2B;AAChC,QAAA,MADgC;AAEhC,QAAA,IAAI,EAAE,IAAI,KAAK,MAFiB;AAGhC,QAAA,IAHgC;AAIhC,QAAA,KAJgC;AAKhC,QAAA,SALgC;AAMhC,QAAA,SANgC;AAOhC,QAAA,QAPgC;AAQhC,QAAA,OAAO,EAAE;AAAE,UAAA,IAAF;AAAQ,UAAA,MAAR;AAAgB,UAAA,KAAhB;AAAuB,UAAA;AAAvB;AARuB,OAA3B,CADA,EAAP;AAYA,KAlCD;AAAA;;AADD,CAHD;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCG;;AACH,GAAG,CAAC,EAAJ,CAAO,QAAP,CACC,iBADD,EAEC;AAAE,EAAA,YAAY,EAAE;AAAhB,CAFD,EAGC;AACO,EAAA,IAAN;AAAA,oCAAU;AACT,MAAA,KAAK,CAAC,KAAK,UAAN,EAAkB;AACtB,QAAA,GAAG,EAAE,MADiB;AAEtB,QAAA,KAAK,EAAE,MAFe;AAGtB,QAAA,OAAO,EAAE,KAAK,CAAC,KAAN,CAAY,MAAZ,CAHa;AAItB,QAAA,IAAI,EAAE,KAAK,CAAC,KAAN,CAAY,CAAC,MAAD,CAAZ;AAJgB,OAAlB,CAAL;AAMA,YAAM;AAAE,QAAA,GAAF;AAAO,QAAA,KAAP;AAAc,QAAA,OAAd;AAAuB,QAAA;AAAvB,UAAgC,KAAK,UAA3C;AAEA,YAAM,OAAO,iBAAS,gBAAgB,CAAC,iBAAjB,CAAmC,KAAnC,EAA0C,EAA1C,CAAT,CAAb;;AACA,UAAI,CAAC,OAAL,EAAc;AACb,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe,eAAf,CAAP;AACA;;AACD,YAAM,IAAI,iBAAS,YAAY,CAAC,QAAb,CAAsB,KAAtB,EAA6B,GAA7B,CAAT,CAAV;;AACA,UAAI,CAAC,IAAL,EAAW;AACV,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe,cAAf,CAAP;AACA;;AACD,UAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACf,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe,aAAf,CAAP;AACA;;AACD,YAAM,WAAW,iBAAS,YAAY,CAAC,SAAb,CAAuB,OAAvB,EAAgC,IAAhC,EAAsC,KAAK,IAA3C,EAAiD,OAAjD,EAA0D,IAA1D,CAAT,CAAjB;;AACA,UAAI,CAAC,WAAL,EAAkB;AACjB,eAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,EAAP;AACA;;AACD,aAAO,GAAG,CAAC,EAAJ,CAAO,OAAP,CAAe;AAAE,QAAA;AAAF,OAAf,CAAP;AACA,KAzBD;AAAA;;AADD,CAHD","sourcesContent":["import { Match, check } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nimport { API } from '../../api';\nimport { VoipRoom, LivechatVisitors, Users } from '../../../../models/server/raw';\nimport { LivechatVoip } from '../../../../../server/sdk';\nimport { ILivechatAgent } from '../../../../../definition/ILivechatAgent';\nimport { hasPermission } from '../../../../authorization/server';\nimport { typedJsonParse } from '../../../../../lib/typedJSONParse';\n\ntype DateParam = { start?: string; end?: string };\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};\n};\nconst validateDateParams = (property: string, date: DateParam = {}): DateParam => {\n\tif (date?.start && isNaN(Date.parse(date.start))) {\n\t\tthrow new Error(`The \"${property}.start\" query parameter must be a valid date.`);\n\t}\n\tif (date?.end && isNaN(Date.parse(date.end))) {\n\t\tthrow new Error(`The \"${property}.end\" query parameter must be a valid date.`);\n\t}\n\treturn date;\n};\nconst parseAndValidate = (property: string, date?: string): DateParam => {\n\treturn validateDateParams(property, parseDateParams(date));\n};\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room\n *    get:\n *      description: Creates a new room if rid is not passed, else gets an existing room\n * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n * \t\tcenter is 600 calls a day\n * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n * \t\twe will keep the safe limit which is 5 calls a minute.\n *      security:\n *      parameters:\n *        - name: token\n *          in: query\n *          description: The visitor token\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: rid\n *          in: query\n *          description: The room id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: agentId\n *          in: query\n *          description: Agent Id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: Room object and flag indicating whether a new room is created.\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      room:\n *                        type: object\n *                        items:\n *                          $ref: '#/components/schemas/IRoom'\n *                      newRoom:\n *                        type: boolean\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{ authRequired: false, rateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 } },\n\t{\n\t\tasync get() {\n\t\t\tconst defaultCheckParams = {\n\t\t\t\ttoken: String,\n\t\t\t\tagentId: Match.Maybe(String),\n\t\t\t\trid: Match.Maybe(String),\n\t\t\t};\n\t\t\tcheck(this.queryParams, defaultCheckParams);\n\n\t\t\tconst { token, rid, agentId } = this.queryParams;\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!guest) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await VoipRoom.findOneOpenByVisitorToken(token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\n\t\t\t\tconst agentObj: ILivechatAgent = await Users.findOneAgentById(agentId, {\n\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t});\n\t\t\t\tif (!agentObj?.username) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst { username, _id } = agentObj;\n\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(await LivechatVoip.getNewRoom(guest, agent, rid, { projection: API.v1.defaultFieldsToExclude }));\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/rooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort, fields } = this.parseJsonQuery();\n\t\t\tconst { agents, open, tags, queue, visitorId } = this.requestParams();\n\t\t\tconst { createdAt: createdAtParam, closedAt: closedAtParam } = this.requestParams();\n\n\t\t\tcheck(agents, Match.Maybe([String]));\n\t\t\tcheck(open, Match.Maybe(String));\n\t\t\tcheck(tags, Match.Maybe([String]));\n\t\t\tcheck(queue, Match.Maybe(String));\n\t\t\tcheck(visitorId, Match.Maybe(String));\n\n\t\t\t// Reusing same L room permissions for simplicity\n\t\t\tconst hasAdminAccess = hasPermission(this.userId, 'view-livechat-rooms');\n\t\t\tconst hasAgentAccess = hasPermission(this.userId, 'view-l-room') && agents?.includes(this.userId) && agents?.length === 1;\n\t\t\tif (!hasAdminAccess && !hasAgentAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\toptions: { sort, offset, count, fields },\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room.close\n *    post:\n *      description: Closes an open room\n * \t\tbased on rid and token. Setting rate limit for this too\n * \t\tBecause room creation happens 5/minute, rate limit for this api\n * \t\tis also set to 5/minute.\n *      security:\n *\t\trequestBody:\n *      required: true\n *      content:\n *\t\t\tapplication/json:\n *          schema:\n *          \ttype: object\n *\t\t\t  \tproperties:\n *\t\t\t\t\trid:\n *                 \t\ttype: string\n *\t\t\t\t\ttoken:\n *\t\t\t\t\t\ttype: string\n *      responses:\n *        200:\n *          description: rid of closed room and a comment for closing room\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      rid:\n *                        \ttype: string\n *                      comment:\n *                      \ttype: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'voip/room.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\trid: String,\n\t\t\t\ttoken: String,\n\t\t\t\tcomment: Match.Maybe(String),\n\t\t\t\ttags: Match.Maybe([String]),\n\t\t\t});\n\t\t\tconst { rid, token, comment, tags } = this.bodyParams;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!visitor) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\t\t\tconst room = await LivechatVoip.findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\tif (!room.open) {\n\t\t\t\treturn API.v1.failure('room-closed');\n\t\t\t}\n\t\t\tconst closeResult = await LivechatVoip.closeRoom(visitor, room, this.user, comment, tags);\n\t\t\tif (!closeResult) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\t\t\treturn API.v1.success({ rid });\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"58e7b764f93b53391a8795e4523bec0dc6e91605"}
