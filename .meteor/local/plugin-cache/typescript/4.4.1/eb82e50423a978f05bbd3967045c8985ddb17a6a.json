{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/updateGroupDMsName.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/updateGroupDMsName.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/updateGroupDMsName.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/updateGroupDMsName.ts","sourceRoot":"","sources":["app/lib/server/functions/updateGroupDMsName.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDirectMessageRoom } from '../../../../definition/IRoom';\nimport { IUser } from '../../../../definition/IUser';\nimport { Rooms, Subscriptions, Users } from '../../../models/server';\nimport { ISubscription } from '../../../../definition/ISubscription';\n\nconst getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');\nconst getName = (members: IUser[]): string => members.map(({ username }) => username).join(',');\n\nfunction getUsersWhoAreInTheSameGroupDMsAs(user: IUser): unknown {\n\t// add all users to single array so we can fetch details from them all at once\n\tconst rooms = Rooms.findGroupDMsByUids(user._id, { fields: { uids: 1 } });\n\tif (rooms.count() === 0) {\n\t\treturn;\n\t}\n\n\tconst userIds = new Set();\n\tconst users = new Map();\n\n\trooms.forEach((room: IDirectMessageRoom) => room.uids.forEach((uid) => uid !== user._id && userIds.add(uid)));\n\n\tUsers.findByIds([...userIds], { fields: { username: 1, name: 1 } }).forEach((user: IUser) => users.set(user._id, user));\n\n\treturn users;\n}\n\nfunction sortUsersAlphabetically(u1: IUser, u2: IUser): number {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\treturn (u1.name! || u1.username!).localeCompare(u2.name! || u2.username!);\n}\n\nexport const updateGroupDMsName = (userThatChangedName: IUser): void => {\n\tif (!userThatChangedName.username) {\n\t\treturn;\n\t}\n\n\tconst users: any = getUsersWhoAreInTheSameGroupDMsAs(userThatChangedName);\n\tif (!users) {\n\t\treturn;\n\t}\n\n\tusers.set(userThatChangedName._id, userThatChangedName);\n\n\tconst rooms = Rooms.findGroupDMsByUids(userThatChangedName._id, { fields: { uids: 1 } });\n\n\t// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\tconst getMembers = (uids: string[]) => uids.map((uid) => users.get(uid)).filter(Boolean);\n\n\t// loop rooms to update the subcriptions from them all\n\trooms.forEach((room: IDirectMessageRoom) => {\n\t\tconst members = getMembers(room.uids);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { fields: { '_id': 1, 'u._id': 1 } });\n\t\tsubs.forEach((sub: ISubscription) => {\n\t\t\tconst otherMembers = sortedMembers.filter(({ _id }) => _id !== sub.u._id);\n\t\t\tSubscriptions.updateNameAndFnameById(sub._id, getName(otherMembers), getFname(otherMembers));\n\t\t});\n\t});\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/updateGroupDMsName.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/updateGroupDMsName.ts"}},"code":"module.export({\n  updateGroupDMsName: () => updateGroupDMsName\n});\nlet Rooms, Subscriptions, Users;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Users(v) {\n    Users = v;\n  }\n\n}, 0);\n\nconst getFname = members => members.map(_ref => {\n  let {\n    name,\n    username\n  } = _ref;\n  return name || username;\n}).join(', ');\n\nconst getName = members => members.map(_ref2 => {\n  let {\n    username\n  } = _ref2;\n  return username;\n}).join(',');\n\nfunction getUsersWhoAreInTheSameGroupDMsAs(user) {\n  // add all users to single array so we can fetch details from them all at once\n  const rooms = Rooms.findGroupDMsByUids(user._id, {\n    fields: {\n      uids: 1\n    }\n  });\n\n  if (rooms.count() === 0) {\n    return;\n  }\n\n  const userIds = new Set();\n  const users = new Map();\n  rooms.forEach(room => room.uids.forEach(uid => uid !== user._id && userIds.add(uid)));\n  Users.findByIds([...userIds], {\n    fields: {\n      username: 1,\n      name: 1\n    }\n  }).forEach(user => users.set(user._id, user));\n  return users;\n}\n\nfunction sortUsersAlphabetically(u1, u2) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return (u1.name || u1.username).localeCompare(u2.name || u2.username);\n}\n\nconst updateGroupDMsName = userThatChangedName => {\n  if (!userThatChangedName.username) {\n    return;\n  }\n\n  const users = getUsersWhoAreInTheSameGroupDMsAs(userThatChangedName);\n\n  if (!users) {\n    return;\n  }\n\n  users.set(userThatChangedName._id, userThatChangedName);\n  const rooms = Rooms.findGroupDMsByUids(userThatChangedName._id, {\n    fields: {\n      uids: 1\n    }\n  }); // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\n  const getMembers = uids => uids.map(uid => users.get(uid)).filter(Boolean); // loop rooms to update the subcriptions from them all\n\n\n  rooms.forEach(room => {\n    const members = getMembers(room.uids);\n    const sortedMembers = members.sort(sortUsersAlphabetically);\n    const subs = Subscriptions.findByRoomId(room._id, {\n      fields: {\n        '_id': 1,\n        'u._id': 1\n      }\n    });\n    subs.forEach(sub => {\n      const otherMembers = sortedMembers.filter(_ref3 => {\n        let {\n          _id\n        } = _ref3;\n        return _id !== sub.u._id;\n      });\n      Subscriptions.updateNameAndFnameById(sub._id, getName(otherMembers), getFname(otherMembers));\n    });\n  });\n};","map":{"version":3,"sources":["app/lib/server/functions/updateGroupDMsName.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDirectMessageRoom } from '../../../../definition/IRoom';\nimport { IUser } from '../../../../definition/IUser';\nimport { Rooms, Subscriptions, Users } from '../../../models/server';\nimport { ISubscription } from '../../../../definition/ISubscription';\n\nconst getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');\nconst getName = (members: IUser[]): string => members.map(({ username }) => username).join(',');\n\nfunction getUsersWhoAreInTheSameGroupDMsAs(user: IUser): unknown {\n\t// add all users to single array so we can fetch details from them all at once\n\tconst rooms = Rooms.findGroupDMsByUids(user._id, { fields: { uids: 1 } });\n\tif (rooms.count() === 0) {\n\t\treturn;\n\t}\n\n\tconst userIds = new Set();\n\tconst users = new Map();\n\n\trooms.forEach((room: IDirectMessageRoom) => room.uids.forEach((uid) => uid !== user._id && userIds.add(uid)));\n\n\tUsers.findByIds([...userIds], { fields: { username: 1, name: 1 } }).forEach((user: IUser) => users.set(user._id, user));\n\n\treturn users;\n}\n\nfunction sortUsersAlphabetically(u1: IUser, u2: IUser): number {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\treturn (u1.name! || u1.username!).localeCompare(u2.name! || u2.username!);\n}\n\nexport const updateGroupDMsName = (userThatChangedName: IUser): void => {\n\tif (!userThatChangedName.username) {\n\t\treturn;\n\t}\n\n\tconst users: any = getUsersWhoAreInTheSameGroupDMsAs(userThatChangedName);\n\tif (!users) {\n\t\treturn;\n\t}\n\n\tusers.set(userThatChangedName._id, userThatChangedName);\n\n\tconst rooms = Rooms.findGroupDMsByUids(userThatChangedName._id, { fields: { uids: 1 } });\n\n\t// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\tconst getMembers = (uids: string[]) => uids.map((uid) => users.get(uid)).filter(Boolean);\n\n\t// loop rooms to update the subcriptions from them all\n\trooms.forEach((room: IDirectMessageRoom) => {\n\t\tconst members = getMembers(room.uids);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { fields: { '_id': 1, 'u._id': 1 } });\n\t\tsubs.forEach((sub: ISubscription) => {\n\t\t\tconst otherMembers = sortedMembers.filter(({ _id }) => _id !== sub.u._id);\n\t\t\tSubscriptions.updateNameAndFnameById(sub._id, getName(otherMembers), getFname(otherMembers));\n\t\t});\n\t});\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"eb82e50423a978f05bbd3967045c8985ddb17a6a"}
