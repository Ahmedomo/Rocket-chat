{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/services/voip/service.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/service.ts","inputSourceMap":{"version":3,"file":"server/services/voip/service.ts","sourceRoot":"","sources":["server/services/voip/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Db } from 'mongodb';\nimport mem from 'mem';\n\nimport { IVoipService } from '../../sdk/types/IVoipService';\nimport { ServiceClassInternal } from '../../sdk/types/ServiceClass';\nimport { Logger } from '../../lib/logger/Logger';\nimport {\n\tServerType,\n\tisICallServerConfigData,\n\tIVoipCallServerConfig,\n\tIVoipManagementServerConfig,\n} from '../../../definition/IVoipServerConfig';\nimport { CommandHandler } from './connector/asterisk/CommandHandler';\nimport { CommandType } from './connector/asterisk/Command';\nimport { Commands } from './connector/asterisk/Commands';\nimport { IVoipConnectorResult } from '../../../definition/IVoipConnectorResult';\nimport {\n\tIQueueMembershipDetails,\n\tIQueueMembershipSubscription,\n\tIRegistrationInfo,\n\tisIExtensionDetails,\n} from '../../../definition/IVoipExtension';\nimport { IQueueDetails, IQueueSummary } from '../../../definition/ACDQueues';\nimport { getServerConfigDataFromSettings, voipEnabled } from './lib/Helper';\nimport { IManagementServerConnectionStatus } from '../../../definition/IVoipServerConnectivityStatus';\n\nexport class VoipService extends ServiceClassInternal implements IVoipService {\n\tprotected name = 'voip';\n\n\tprivate logger: Logger;\n\n\tcommandHandler: CommandHandler;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.logger = new Logger('VoIPService');\n\t\tthis.commandHandler = new CommandHandler(db);\n\t\tif (!voipEnabled()) {\n\t\t\tthis.logger.warn({ msg: 'Voip is not enabled. Cant start the service' });\n\t\t\treturn;\n\t\t}\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tthis.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP service');\n\t\ttry {\n\t\t\tawait this.commandHandler.initConnection(CommandType.AMI);\n\t\t\tthis.logger.info('VoIP service started');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error initializing VOIP service', err });\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tthis.logger.info('Stopping VoIP service');\n\t\ttry {\n\t\t\tthis.commandHandler.stop();\n\t\t\tthis.logger.info('VoIP service stopped');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error stopping VoIP service', err });\n\t\t}\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tthis.logger.info('Restarting VoIP service due to settings changes');\n\t\tawait this.stop();\n\t\tawait this.init();\n\t}\n\n\tgetServerConfigData(type: ServerType): IVoipCallServerConfig | IVoipManagementServerConfig {\n\t\treturn getServerConfigDataFromSettings(type);\n\t}\n\n\tgetConnector(): CommandHandler {\n\t\treturn this.commandHandler;\n\t}\n\n\tasync getQueueSummary(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.queue_summary);\n\t}\n\n\tprivate cachedQueueSummary(): () => Promise<IVoipConnectorResult> {\n\t\t// arbitrary 5 secs cache to prevent fetching this from asterisk too often\n\t\treturn mem(this.getQueueSummary.bind(this), { maxAge: 5000 });\n\t}\n\n\tcachedQueueDetails(): () => Promise<{ name: string; members: string[] }[]> {\n\t\treturn mem(this.getQueueDetails.bind(this), { maxAge: 5000 });\n\t}\n\n\tprivate async getQueueDetails(): Promise<{ name: string; members: string[] }[]> {\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tfor await (const queue of queues) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue,\n\t\t\t})) as IVoipConnectorResult;\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\t\t\tif (!details.members || !details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tqueueInfo.push({\n\t\t\t\tname: queue,\n\t\t\t\tmembers: (queueDetails.result as IQueueDetails).members.map((member) => member.name.replace('PJSIP/', '')),\n\t\t\t});\n\t\t}\n\n\t\treturn queueInfo;\n\t}\n\n\tasync getQueuedCallsForThisExtension({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipDetails = {\n\t\t\tqueueCount: 0,\n\t\t\tcallWaitingCount: 0,\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmembershipDetails.callWaitingCount += Number(details.calls);\n\t\t\tmembershipDetails.queueCount++;\n\t\t}\n\n\t\treturn { result: membershipDetails };\n\t}\n\n\tasync getQueueMembership({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipSubscription = {\n\t\t\tqueues: [],\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members || !details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmembershipDetails.queues.push(queue);\n\t\t}\n\t\treturn { result: membershipDetails };\n\t}\n\n\tgetConnectorVersion(): string {\n\t\treturn this.commandHandler.getVersion();\n\t}\n\n\tasync getExtensionList(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_list, undefined);\n\t}\n\n\tasync getExtensionDetails(requestParams: { extension: string }): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\t}\n\n\tasync getRegistrationInfo(requestParams: { extension: string }): Promise<{ result: IRegistrationInfo }> {\n\t\tconst config = this.getServerConfigData(ServerType.CALL_SERVER);\n\t\tif (!config) {\n\t\t\tthis.logger.warn({ msg: 'API = connector.extension.getRegistrationInfo callserver settings not found' });\n\t\t\tthis.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n\t\t\tthrow new Error('Not found');\n\t\t}\n\n\t\tconst endpointDetails = await this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\n\t\tif (!isIExtensionDetails(endpointDetails.result)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid endpointDetails response');\n\t\t}\n\t\tif (!isICallServerConfigData(config.configData)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid configData response');\n\t\t}\n\n\t\tconst result = {\n\t\t\thost: config.host,\n\t\t\tcallServerConfig: config.configData,\n\t\t\textensionDetails: endpointDetails.result,\n\t\t};\n\n\t\treturn {\n\t\t\tresult,\n\t\t};\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking management server connection');\n\t\treturn this.commandHandler.checkManagementConnection(host, port, userName, password);\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking call server connection');\n\t\treturn this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip/service.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  VoipService: () => VoipService\n});\nlet mem;\nmodule.link(\"mem\", {\n  default(v) {\n    mem = v;\n  }\n\n}, 0);\nlet ServiceClassInternal;\nmodule.link(\"../../sdk/types/ServiceClass\", {\n  ServiceClassInternal(v) {\n    ServiceClassInternal = v;\n  }\n\n}, 1);\nlet Logger;\nmodule.link(\"../../lib/logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet ServerType, isICallServerConfigData;\nmodule.link(\"../../../definition/IVoipServerConfig\", {\n  ServerType(v) {\n    ServerType = v;\n  },\n\n  isICallServerConfigData(v) {\n    isICallServerConfigData = v;\n  }\n\n}, 3);\nlet CommandHandler;\nmodule.link(\"./connector/asterisk/CommandHandler\", {\n  CommandHandler(v) {\n    CommandHandler = v;\n  }\n\n}, 4);\nlet CommandType;\nmodule.link(\"./connector/asterisk/Command\", {\n  CommandType(v) {\n    CommandType = v;\n  }\n\n}, 5);\nlet Commands;\nmodule.link(\"./connector/asterisk/Commands\", {\n  Commands(v) {\n    Commands = v;\n  }\n\n}, 6);\nlet isIExtensionDetails;\nmodule.link(\"../../../definition/IVoipExtension\", {\n  isIExtensionDetails(v) {\n    isIExtensionDetails = v;\n  }\n\n}, 7);\nlet getServerConfigDataFromSettings, voipEnabled;\nmodule.link(\"./lib/Helper\", {\n  getServerConfigDataFromSettings(v) {\n    getServerConfigDataFromSettings = v;\n  },\n\n  voipEnabled(v) {\n    voipEnabled = v;\n  }\n\n}, 8);\n\nclass VoipService extends ServiceClassInternal {\n  constructor(db) {\n    super();\n    this.name = 'voip';\n    this.logger = void 0;\n    this.commandHandler = void 0;\n    this.logger = new Logger('VoIPService');\n    this.commandHandler = new CommandHandler(db);\n\n    if (!voipEnabled()) {\n      this.logger.warn({\n        msg: 'Voip is not enabled. Cant start the service'\n      });\n      return;\n    } // Init from constructor if we already have\n    // voip enabled by default while starting the server\n\n\n    this.init();\n  }\n\n  init() {\n    return Promise.asyncApply(() => {\n      this.logger.info('Starting VoIP service');\n\n      try {\n        Promise.await(this.commandHandler.initConnection(CommandType.AMI));\n        this.logger.info('VoIP service started');\n      } catch (err) {\n        this.logger.error({\n          msg: 'Error initializing VOIP service',\n          err\n        });\n      }\n    });\n  }\n\n  stop() {\n    return Promise.asyncApply(() => {\n      this.logger.info('Stopping VoIP service');\n\n      try {\n        this.commandHandler.stop();\n        this.logger.info('VoIP service stopped');\n      } catch (err) {\n        this.logger.error({\n          msg: 'Error stopping VoIP service',\n          err\n        });\n      }\n    });\n  }\n\n  refresh() {\n    return Promise.asyncApply(() => {\n      this.logger.info('Restarting VoIP service due to settings changes');\n      Promise.await(this.stop());\n      Promise.await(this.init());\n    });\n  }\n\n  getServerConfigData(type) {\n    return getServerConfigDataFromSettings(type);\n  }\n\n  getConnector() {\n    return this.commandHandler;\n  }\n\n  getQueueSummary() {\n    return Promise.asyncApply(() => {\n      return this.commandHandler.executeCommand(Commands.queue_summary);\n    });\n  }\n\n  cachedQueueSummary() {\n    // arbitrary 5 secs cache to prevent fetching this from asterisk too often\n    return mem(this.getQueueSummary.bind(this), {\n      maxAge: 5000\n    });\n  }\n\n  cachedQueueDetails() {\n    return mem(this.getQueueDetails.bind(this), {\n      maxAge: 5000\n    });\n  }\n\n  getQueueDetails() {\n    return Promise.asyncApply(() => {\n      const summary = Promise.await(this.cachedQueueSummary()());\n      const queues = summary.result.map(q => q.name);\n      const queueInfo = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(queues), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const queue = _step.value;\n          const queueDetails = Promise.await(this.commandHandler.executeCommand(Commands.queue_details, {\n            queueName: queue\n          }));\n          const details = queueDetails.result;\n\n          if (!details.members || !details.members.length) {\n            // Go to the next queue if queue does not have any\n            // memmbers.\n            continue;\n          }\n\n          queueInfo.push({\n            name: queue,\n            members: queueDetails.result.members.map(member => member.name.replace('PJSIP/', ''))\n          });\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            Promise.await(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return queueInfo;\n    });\n  }\n\n  getQueuedCallsForThisExtension(_ref) {\n    return Promise.asyncApply(() => {\n      let {\n        extension\n      } = _ref;\n      const membershipDetails = {\n        queueCount: 0,\n        callWaitingCount: 0,\n        extension\n      };\n      const queueSummary = Promise.await(this.commandHandler.executeCommand(Commands.queue_summary));\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(queueSummary.result), _step2; _iteratorAbruptCompletion2 = !(_step2 = Promise.await(_iterator2.next())).done; _iteratorAbruptCompletion2 = false) {\n          const queue = _step2.value;\n          const queueDetails = Promise.await(this.commandHandler.executeCommand(Commands.queue_details, {\n            queueName: queue.name\n          }));\n          const details = queueDetails.result;\n\n          if (!details.members.length) {\n            // Go to the next queue if queue does not have any\n            // memmbers.\n            continue;\n          }\n\n          const isAMember = details.members.some(element => element.name.endsWith(extension));\n\n          if (!isAMember) {\n            // Current extension is not a member of queue in question.\n            // continue with next queue.\n            continue;\n          }\n\n          membershipDetails.callWaitingCount += Number(details.calls);\n          membershipDetails.queueCount++;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            Promise.await(_iterator2.return());\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return {\n        result: membershipDetails\n      };\n    });\n  }\n\n  getQueueMembership(_ref2) {\n    return Promise.asyncApply(() => {\n      let {\n        extension\n      } = _ref2;\n      const membershipDetails = {\n        queues: [],\n        extension\n      };\n      const queueSummary = Promise.await(this.commandHandler.executeCommand(Commands.queue_summary));\n      var _iteratorAbruptCompletion3 = false;\n      var _didIteratorError3 = false;\n\n      var _iteratorError3;\n\n      try {\n        for (var _iterator3 = _asyncIterator(queueSummary.result), _step3; _iteratorAbruptCompletion3 = !(_step3 = Promise.await(_iterator3.next())).done; _iteratorAbruptCompletion3 = false) {\n          const queue = _step3.value;\n          const queueDetails = Promise.await(this.commandHandler.executeCommand(Commands.queue_details, {\n            queueName: queue.name\n          }));\n          const details = queueDetails.result;\n\n          if (!details.members || !details.members.length) {\n            // Go to the next queue if queue does not have any\n            // memmbers.\n            continue;\n          }\n\n          const isAMember = details.members.some(element => element.name.endsWith(extension));\n\n          if (!isAMember) {\n            // Current extension is not a member of queue in question.\n            // continue with next queue.\n            continue;\n          }\n\n          membershipDetails.queues.push(queue);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n            Promise.await(_iterator3.return());\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return {\n        result: membershipDetails\n      };\n    });\n  }\n\n  getConnectorVersion() {\n    return this.commandHandler.getVersion();\n  }\n\n  getExtensionList() {\n    return Promise.asyncApply(() => {\n      return this.commandHandler.executeCommand(Commands.extension_list, undefined);\n    });\n  }\n\n  getExtensionDetails(requestParams) {\n    return Promise.asyncApply(() => {\n      return this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n    });\n  }\n\n  getRegistrationInfo(requestParams) {\n    return Promise.asyncApply(() => {\n      const config = this.getServerConfigData(ServerType.CALL_SERVER);\n\n      if (!config) {\n        this.logger.warn({\n          msg: 'API = connector.extension.getRegistrationInfo callserver settings not found'\n        });\n        this.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n        throw new Error('Not found');\n      }\n\n      const endpointDetails = Promise.await(this.commandHandler.executeCommand(Commands.extension_info, requestParams));\n\n      if (!isIExtensionDetails(endpointDetails.result)) {\n        throw new Error('getRegistrationInfo Invalid endpointDetails response');\n      }\n\n      if (!isICallServerConfigData(config.configData)) {\n        throw new Error('getRegistrationInfo Invalid configData response');\n      }\n\n      const result = {\n        host: config.host,\n        callServerConfig: config.configData,\n        extensionDetails: endpointDetails.result\n      };\n      return {\n        result\n      };\n    });\n  }\n\n  checkManagementConnection(host, port, userName, password) {\n    return Promise.asyncApply(() => {\n      this.logger.debug('Checking management server connection');\n      return this.commandHandler.checkManagementConnection(host, port, userName, password);\n    });\n  }\n\n  checkCallserverConnection(websocketUrl, protocol) {\n    return Promise.asyncApply(() => {\n      this.logger.debug('Checking call server connection');\n      return this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n    });\n  }\n\n}","map":{"version":3,"sources":["server/services/voip/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Db } from 'mongodb';\nimport mem from 'mem';\n\nimport { IVoipService } from '../../sdk/types/IVoipService';\nimport { ServiceClassInternal } from '../../sdk/types/ServiceClass';\nimport { Logger } from '../../lib/logger/Logger';\nimport {\n\tServerType,\n\tisICallServerConfigData,\n\tIVoipCallServerConfig,\n\tIVoipManagementServerConfig,\n} from '../../../definition/IVoipServerConfig';\nimport { CommandHandler } from './connector/asterisk/CommandHandler';\nimport { CommandType } from './connector/asterisk/Command';\nimport { Commands } from './connector/asterisk/Commands';\nimport { IVoipConnectorResult } from '../../../definition/IVoipConnectorResult';\nimport {\n\tIQueueMembershipDetails,\n\tIQueueMembershipSubscription,\n\tIRegistrationInfo,\n\tisIExtensionDetails,\n} from '../../../definition/IVoipExtension';\nimport { IQueueDetails, IQueueSummary } from '../../../definition/ACDQueues';\nimport { getServerConfigDataFromSettings, voipEnabled } from './lib/Helper';\nimport { IManagementServerConnectionStatus } from '../../../definition/IVoipServerConnectivityStatus';\n\nexport class VoipService extends ServiceClassInternal implements IVoipService {\n\tprotected name = 'voip';\n\n\tprivate logger: Logger;\n\n\tcommandHandler: CommandHandler;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.logger = new Logger('VoIPService');\n\t\tthis.commandHandler = new CommandHandler(db);\n\t\tif (!voipEnabled()) {\n\t\t\tthis.logger.warn({ msg: 'Voip is not enabled. Cant start the service' });\n\t\t\treturn;\n\t\t}\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tthis.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP service');\n\t\ttry {\n\t\t\tawait this.commandHandler.initConnection(CommandType.AMI);\n\t\t\tthis.logger.info('VoIP service started');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error initializing VOIP service', err });\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tthis.logger.info('Stopping VoIP service');\n\t\ttry {\n\t\t\tthis.commandHandler.stop();\n\t\t\tthis.logger.info('VoIP service stopped');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error stopping VoIP service', err });\n\t\t}\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tthis.logger.info('Restarting VoIP service due to settings changes');\n\t\tawait this.stop();\n\t\tawait this.init();\n\t}\n\n\tgetServerConfigData(type: ServerType): IVoipCallServerConfig | IVoipManagementServerConfig {\n\t\treturn getServerConfigDataFromSettings(type);\n\t}\n\n\tgetConnector(): CommandHandler {\n\t\treturn this.commandHandler;\n\t}\n\n\tasync getQueueSummary(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.queue_summary);\n\t}\n\n\tprivate cachedQueueSummary(): () => Promise<IVoipConnectorResult> {\n\t\t// arbitrary 5 secs cache to prevent fetching this from asterisk too often\n\t\treturn mem(this.getQueueSummary.bind(this), { maxAge: 5000 });\n\t}\n\n\tcachedQueueDetails(): () => Promise<{ name: string; members: string[] }[]> {\n\t\treturn mem(this.getQueueDetails.bind(this), { maxAge: 5000 });\n\t}\n\n\tprivate async getQueueDetails(): Promise<{ name: string; members: string[] }[]> {\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tfor await (const queue of queues) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue,\n\t\t\t})) as IVoipConnectorResult;\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\t\t\tif (!details.members || !details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tqueueInfo.push({\n\t\t\t\tname: queue,\n\t\t\t\tmembers: (queueDetails.result as IQueueDetails).members.map((member) => member.name.replace('PJSIP/', '')),\n\t\t\t});\n\t\t}\n\n\t\treturn queueInfo;\n\t}\n\n\tasync getQueuedCallsForThisExtension({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipDetails = {\n\t\t\tqueueCount: 0,\n\t\t\tcallWaitingCount: 0,\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmembershipDetails.callWaitingCount += Number(details.calls);\n\t\t\tmembershipDetails.queueCount++;\n\t\t}\n\n\t\treturn { result: membershipDetails };\n\t}\n\n\tasync getQueueMembership({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipSubscription = {\n\t\t\tqueues: [],\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members || !details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmembershipDetails.queues.push(queue);\n\t\t}\n\t\treturn { result: membershipDetails };\n\t}\n\n\tgetConnectorVersion(): string {\n\t\treturn this.commandHandler.getVersion();\n\t}\n\n\tasync getExtensionList(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_list, undefined);\n\t}\n\n\tasync getExtensionDetails(requestParams: { extension: string }): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\t}\n\n\tasync getRegistrationInfo(requestParams: { extension: string }): Promise<{ result: IRegistrationInfo }> {\n\t\tconst config = this.getServerConfigData(ServerType.CALL_SERVER);\n\t\tif (!config) {\n\t\t\tthis.logger.warn({ msg: 'API = connector.extension.getRegistrationInfo callserver settings not found' });\n\t\t\tthis.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n\t\t\tthrow new Error('Not found');\n\t\t}\n\n\t\tconst endpointDetails = await this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\n\t\tif (!isIExtensionDetails(endpointDetails.result)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid endpointDetails response');\n\t\t}\n\t\tif (!isICallServerConfigData(config.configData)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid configData response');\n\t\t}\n\n\t\tconst result = {\n\t\t\thost: config.host,\n\t\t\tcallServerConfig: config.configData,\n\t\t\textensionDetails: endpointDetails.result,\n\t\t};\n\n\t\treturn {\n\t\t\tresult,\n\t\t};\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking management server connection');\n\t\treturn this.commandHandler.checkManagementConnection(host, port, userName, password);\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking call server connection');\n\t\treturn this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"89187fc2a805980deccf8ff27e6823ee0806c293"}
