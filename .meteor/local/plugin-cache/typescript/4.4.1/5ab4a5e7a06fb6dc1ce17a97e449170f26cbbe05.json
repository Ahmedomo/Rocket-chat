{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/websocket/WebsocketConnection.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/services/voip/connector/websocket/WebsocketConnection.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/websocket/WebsocketConnection.ts","inputSourceMap":{"version":3,"file":"server/services/voip/connector/websocket/WebsocketConnection.ts","sourceRoot":"","sources":["server/services/voip/connector/websocket/WebsocketConnection.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AACH,OAAO,SAAS,MAAM,IAAI,CAAC;AAG3B,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AAIvD,MAAM,OAAO,mBAAmB;IAC/B,UAAU,CAAY;IAEd,MAAM,CAAS;IAEvB;QACC,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,qBAAqB,CAAC,CAAC;IACjD,CAAC;IAED,cAAc,CAAC,aAAqB,EAAE,kBAAkB,GAAG,KAAK;QAC/D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;QACtC,MAAM,aAAa,GAAG,IAAI,OAAO,CAAO,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE;YAC7D,MAAM,OAAO,GAAG,CAAC,KAAU,EAAQ,EAAE;gBACpC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,+CAA+C,EAAE,KAAK,EAAE,CAAC,CAAC;YACpF,CAAC,CAAC;YACF,MAAM,SAAS,GAAG,GAAS,EAAE;gBAC5B,QAAQ,EAAE,CAAC;gBACX,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC;YACF,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;YACnE,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACtC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;IACtB,CAAC;IAED,WAAW;QACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,6BAA6B,EAAE,CAAC,CAAC;QAC1D,OAAO,KAAK,CAAC;IACd,CAAC;IAED,yDAAyD;IACzD,cAAc,CAAC,OAAe,EAAE,qBAA0B;QACzD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,gCAAgC,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,EAAE,CAAC,MAAc,EAAE,gBAAiC;QACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,oBAAoB,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,GAAG,CAAC,MAAc,EAAE,QAAiB;QACpC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,oBAAoB,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,eAAe;QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,mBAAmB,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;CACD","sourcesContent":["/**\n * Class representing Websocket connection.\n * @remarks\n *\n * This class wraps around websocket with asterisk. WebSocket protocol is defaulted to sip\n * for connection but can be passed externally.\n *\n * Websocket configurations can be found in asterisk's http.conf and pjsip.conf\n *\n */\nimport WebSocket from 'ws';\n\nimport { IConnection } from '../asterisk/IConnection';\nimport { Logger } from '../../../../lib/logger/Logger';\nimport { Command } from '../asterisk/Command';\nimport { CallbackContext } from '../asterisk/ami/CallbackContext';\n\nexport class WebsocketConnection implements IConnection {\n\tconnection: WebSocket;\n\n\tprivate logger: Logger;\n\n\tconstructor() {\n\t\tthis.logger = new Logger('WebsocketConnection');\n\t}\n\n\tconnectWithUrl(connectionUrl: string, connectionProtocol = 'sip'): Promise<void> {\n\t\tthis.logger.log({ msg: 'connect()' });\n\t\tconst returnPromise = new Promise<void>((_resolve, _reject) => {\n\t\t\tconst onError = (error: any): void => {\n\t\t\t\t_reject(error);\n\t\t\t\tthis.logger.error({ msg: 'checkCallserverConnection () Connection Error', error });\n\t\t\t};\n\t\t\tconst onConnect = (): void => {\n\t\t\t\t_resolve();\n\t\t\t\tthis.connection.close();\n\t\t\t};\n\t\t\tthis.connection = new WebSocket(connectionUrl, connectionProtocol);\n\t\t\tthis.connection.on('open', onConnect);\n\t\t\tthis.connection.on('error', onError);\n\t\t});\n\t\treturn returnPromise;\n\t}\n\n\tisConnected(): boolean {\n\t\tthis.logger.debug({ msg: 'isConnected() unimplemented' });\n\t\treturn false;\n\t}\n\n\t// Executes an action on asterisk and returns the result.\n\texecuteCommand(_action: object, _actionResultCallback: any): void {\n\t\tthis.logger.debug({ msg: 'executeCommand() unimplemented' });\n\t}\n\n\ton(_event: string, _callbackContext: CallbackContext): void {\n\t\tthis.logger.debug({ msg: 'on() unimplemented' });\n\t}\n\n\toff(_event: string, _command: Command): void {\n\t\tthis.logger.debug({ msg: 'on() unimplemented' });\n\t}\n\n\tcloseConnection(): void {\n\t\tthis.logger.info({ msg: 'closeConnection()' });\n\t\tthis.connection.close();\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/websocket/WebsocketConnection.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip/connector/websocket/WebsocketConnection.ts"}},"code":"module.export({\n  WebsocketConnection: () => WebsocketConnection\n});\nlet WebSocket;\nmodule.link(\"ws\", {\n  default(v) {\n    WebSocket = v;\n  }\n\n}, 0);\nlet Logger;\nmodule.link(\"../../../../lib/logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 1);\n\nclass WebsocketConnection {\n  constructor() {\n    this.connection = void 0;\n    this.logger = void 0;\n    this.logger = new Logger('WebsocketConnection');\n  }\n\n  connectWithUrl(connectionUrl) {\n    let connectionProtocol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'sip';\n    this.logger.log({\n      msg: 'connect()'\n    });\n    const returnPromise = new Promise((_resolve, _reject) => {\n      const onError = error => {\n        _reject(error);\n\n        this.logger.error({\n          msg: 'checkCallserverConnection () Connection Error',\n          error\n        });\n      };\n\n      const onConnect = () => {\n        _resolve();\n\n        this.connection.close();\n      };\n\n      this.connection = new WebSocket(connectionUrl, connectionProtocol);\n      this.connection.on('open', onConnect);\n      this.connection.on('error', onError);\n    });\n    return returnPromise;\n  }\n\n  isConnected() {\n    this.logger.debug({\n      msg: 'isConnected() unimplemented'\n    });\n    return false;\n  } // Executes an action on asterisk and returns the result.\n\n\n  executeCommand(_action, _actionResultCallback) {\n    this.logger.debug({\n      msg: 'executeCommand() unimplemented'\n    });\n  }\n\n  on(_event, _callbackContext) {\n    this.logger.debug({\n      msg: 'on() unimplemented'\n    });\n  }\n\n  off(_event, _command) {\n    this.logger.debug({\n      msg: 'on() unimplemented'\n    });\n  }\n\n  closeConnection() {\n    this.logger.info({\n      msg: 'closeConnection()'\n    });\n    this.connection.close();\n  }\n\n}","map":{"version":3,"sources":["server/services/voip/connector/websocket/WebsocketConnection.ts"],"names":[],"mappings":"AAAA,MAAA,CAAA,MAAA,CAAA;AAAA,EAAA,mBAAA,EAAA,MAAA;AAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAiBM,MAAO,mBAAP,CAA0B;AAK/B,EAAA,WAAA,GAAA;AAAA,SAJA,UAIA;AAAA,SAFQ,MAER;AACC,SAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,qBAAX,CAAd;AACA;;AAED,EAAA,cAAc,CAAC,aAAD,EAAkD;AAAA,QAA1B,kBAA0B,uEAAL,KAAK;AAC/D,SAAK,MAAL,CAAY,GAAZ,CAAgB;AAAE,MAAA,GAAG,EAAE;AAAP,KAAhB;AACA,UAAM,aAAa,GAAG,IAAI,OAAJ,CAAkB,CAAC,QAAD,EAAW,OAAX,KAAsB;AAC7D,YAAM,OAAO,GAAI,KAAD,IAAqB;AACpC,QAAA,OAAO,CAAC,KAAD,CAAP;;AACA,aAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,UAAA,GAAG,EAAE,+CAAP;AAAwD,UAAA;AAAxD,SAAlB;AACA,OAHD;;AAIA,YAAM,SAAS,GAAG,MAAW;AAC5B,QAAA,QAAQ;;AACR,aAAK,UAAL,CAAgB,KAAhB;AACA,OAHD;;AAIA,WAAK,UAAL,GAAkB,IAAI,SAAJ,CAAc,aAAd,EAA6B,kBAA7B,CAAlB;AACA,WAAK,UAAL,CAAgB,EAAhB,CAAmB,MAAnB,EAA2B,SAA3B;AACA,WAAK,UAAL,CAAgB,EAAhB,CAAmB,OAAnB,EAA4B,OAA5B;AACA,KAZqB,CAAtB;AAaA,WAAO,aAAP;AACA;;AAED,EAAA,WAAW,GAAA;AACV,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,GAAG,EAAE;AAAP,KAAlB;AACA,WAAO,KAAP;AACA,GA9B8B,CAgC/B;;;AACA,EAAA,cAAc,CAAC,OAAD,EAAkB,qBAAlB,EAA4C;AACzD,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,GAAG,EAAE;AAAP,KAAlB;AACA;;AAED,EAAA,EAAE,CAAC,MAAD,EAAiB,gBAAjB,EAAkD;AACnD,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,GAAG,EAAE;AAAP,KAAlB;AACA;;AAED,EAAA,GAAG,CAAC,MAAD,EAAiB,QAAjB,EAAkC;AACpC,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,GAAG,EAAE;AAAP,KAAlB;AACA;;AAED,EAAA,eAAe,GAAA;AACd,SAAK,MAAL,CAAY,IAAZ,CAAiB;AAAE,MAAA,GAAG,EAAE;AAAP,KAAjB;AACA,SAAK,UAAL,CAAgB,KAAhB;AACA;;AAhD8B","sourcesContent":["/**\n * Class representing Websocket connection.\n * @remarks\n *\n * This class wraps around websocket with asterisk. WebSocket protocol is defaulted to sip\n * for connection but can be passed externally.\n *\n * Websocket configurations can be found in asterisk's http.conf and pjsip.conf\n *\n */\nimport WebSocket from 'ws';\n\nimport { IConnection } from '../asterisk/IConnection';\nimport { Logger } from '../../../../lib/logger/Logger';\nimport { Command } from '../asterisk/Command';\nimport { CallbackContext } from '../asterisk/ami/CallbackContext';\n\nexport class WebsocketConnection implements IConnection {\n\tconnection: WebSocket;\n\n\tprivate logger: Logger;\n\n\tconstructor() {\n\t\tthis.logger = new Logger('WebsocketConnection');\n\t}\n\n\tconnectWithUrl(connectionUrl: string, connectionProtocol = 'sip'): Promise<void> {\n\t\tthis.logger.log({ msg: 'connect()' });\n\t\tconst returnPromise = new Promise<void>((_resolve, _reject) => {\n\t\t\tconst onError = (error: any): void => {\n\t\t\t\t_reject(error);\n\t\t\t\tthis.logger.error({ msg: 'checkCallserverConnection () Connection Error', error });\n\t\t\t};\n\t\t\tconst onConnect = (): void => {\n\t\t\t\t_resolve();\n\t\t\t\tthis.connection.close();\n\t\t\t};\n\t\t\tthis.connection = new WebSocket(connectionUrl, connectionProtocol);\n\t\t\tthis.connection.on('open', onConnect);\n\t\t\tthis.connection.on('error', onError);\n\t\t});\n\t\treturn returnPromise;\n\t}\n\n\tisConnected(): boolean {\n\t\tthis.logger.debug({ msg: 'isConnected() unimplemented' });\n\t\treturn false;\n\t}\n\n\t// Executes an action on asterisk and returns the result.\n\texecuteCommand(_action: object, _actionResultCallback: any): void {\n\t\tthis.logger.debug({ msg: 'executeCommand() unimplemented' });\n\t}\n\n\ton(_event: string, _callbackContext: CallbackContext): void {\n\t\tthis.logger.debug({ msg: 'on() unimplemented' });\n\t}\n\n\toff(_event: string, _command: Command): void {\n\t\tthis.logger.debug({ msg: 'on() unimplemented' });\n\t}\n\n\tcloseConnection(): void {\n\t\tthis.logger.info({ msg: 'closeConnection()' });\n\t\tthis.connection.close();\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"5ab4a5e7a06fb6dc1ce17a97e449170f26cbbe05"}
