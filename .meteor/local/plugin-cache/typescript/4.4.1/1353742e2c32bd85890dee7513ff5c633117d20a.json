{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/deleteUser.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/deleteUser.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/deleteUser.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/deleteUser.ts","sourceRoot":"","sources":["app/lib/server/functions/deleteUser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { FileUpload } from '../../../file-upload/server';\nimport { Users, Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { FederationServers, Integrations } from '../../../models/server/raw';\nimport { settings } from '../../../settings/server';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { api } from '../../../../server/sdk/api';\nimport { FileProp } from '../../../../definition/IMessage/MessageAttachment/Files/FileProp';\n\nexport async function deleteUser(userId: string, confirmRelinquish = false): Promise<void> {\n\tconst user = Users.findOneById(userId, {\n\t\tfields: { username: 1, avatarOrigin: 1, federation: 1 },\n\t});\n\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tif (user.federation) {\n\t\tconst existingSubscriptions = Subscriptions.find({ 'u._id': user._id }).count();\n\n\t\tif (existingSubscriptions > 0) {\n\t\t\tthrow new Meteor.Error('FEDERATION_Error_user_is_federated_on_rooms');\n\t\t}\n\t}\n\n\tconst subscribedRooms = getSubscribedRoomsForUserWithDetails(userId);\n\n\tif (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n\t\tconst rooms = getUserSingleOwnedRooms(subscribedRooms);\n\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t}\n\n\t// Users without username can't do anything, so there is nothing to remove\n\tif (user.username != null) {\n\t\tawait relinquishRoomOwnerships(userId, subscribedRooms);\n\n\t\tconst messageErasureType = settings.get('Message_ErasureType');\n\t\tswitch (messageErasureType) {\n\t\t\tcase 'Delete':\n\t\t\t\tconst store = FileUpload.getStore('Uploads');\n\t\t\t\tMessages.findFilesByUserId(userId).forEach(function ({ file }: { file: FileProp }) {\n\t\t\t\t\tstore.deleteById(file._id);\n\t\t\t\t});\n\t\t\t\tMessages.removeByUserId(userId);\n\t\t\t\tbreak;\n\t\t\tcase 'Unlink':\n\t\t\t\tconst rocketCat = Users.findOneById('rocket.cat');\n\t\t\t\tconst nameAlias = TAPi18n.__('Removed_User');\n\t\t\t\tMessages.unlinkUserId(userId, rocketCat._id, rocketCat.username, nameAlias);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tRooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n\t\tRooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n\n\t\tSubscriptions.removeByUserId(userId); // Remove user subscriptions\n\n\t\t// removes user's avatar\n\t\tif (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {\n\t\t\tFileUpload.getStore('Avatars').deleteByName(user.username);\n\t\t}\n\n\t\tawait Integrations.disableByUserId(userId); // Disables all the integrations which rely on the user being deleted.\n\n\t\t// Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't dissappear from logged in sessions\n\t\tif (messageErasureType !== 'Keep') {\n\t\t\tapi.broadcast('user.deleted', user);\n\t\t}\n\t}\n\n\t// Remove user from users database\n\tUsers.removeById(userId);\n\n\t// update name and fname of group direct messages\n\tupdateGroupDMsName(user);\n\n\t// Refresh the servers list\n\tawait FederationServers.refreshServers();\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/deleteUser.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/deleteUser.ts"}},"code":"module.export({\n  deleteUser: () => deleteUser\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet TAPi18n;\nmodule.link(\"meteor/rocketchat:tap-i18n\", {\n  TAPi18n(v) {\n    TAPi18n = v;\n  }\n\n}, 1);\nlet FileUpload;\nmodule.link(\"../../../file-upload/server\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 2);\nlet Users, Subscriptions, Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet FederationServers, Integrations;\nmodule.link(\"../../../models/server/raw\", {\n  FederationServers(v) {\n    FederationServers = v;\n  },\n\n  Integrations(v) {\n    Integrations = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\nlet updateGroupDMsName;\nmodule.link(\"./updateGroupDMsName\", {\n  updateGroupDMsName(v) {\n    updateGroupDMsName = v;\n  }\n\n}, 6);\nlet relinquishRoomOwnerships;\nmodule.link(\"./relinquishRoomOwnerships\", {\n  relinquishRoomOwnerships(v) {\n    relinquishRoomOwnerships = v;\n  }\n\n}, 7);\nlet getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner;\nmodule.link(\"./getRoomsWithSingleOwner\", {\n  getSubscribedRoomsForUserWithDetails(v) {\n    getSubscribedRoomsForUserWithDetails = v;\n  },\n\n  shouldRemoveOrChangeOwner(v) {\n    shouldRemoveOrChangeOwner = v;\n  }\n\n}, 8);\nlet getUserSingleOwnedRooms;\nmodule.link(\"./getUserSingleOwnedRooms\", {\n  getUserSingleOwnedRooms(v) {\n    getUserSingleOwnedRooms = v;\n  }\n\n}, 9);\nlet api;\nmodule.link(\"../../../../server/sdk/api\", {\n  api(v) {\n    api = v;\n  }\n\n}, 10);\n\nfunction deleteUser(userId) {\n  return Promise.asyncApply(() => {\n    let confirmRelinquish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const user = Users.findOneById(userId, {\n      fields: {\n        username: 1,\n        avatarOrigin: 1,\n        federation: 1\n      }\n    });\n\n    if (!user) {\n      return;\n    }\n\n    if (user.federation) {\n      const existingSubscriptions = Subscriptions.find({\n        'u._id': user._id\n      }).count();\n\n      if (existingSubscriptions > 0) {\n        throw new Meteor.Error('FEDERATION_Error_user_is_federated_on_rooms');\n      }\n    }\n\n    const subscribedRooms = getSubscribedRoomsForUserWithDetails(userId);\n\n    if (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n      const rooms = getUserSingleOwnedRooms(subscribedRooms);\n      throw new Meteor.Error('user-last-owner', '', rooms);\n    } // Users without username can't do anything, so there is nothing to remove\n\n\n    if (user.username != null) {\n      Promise.await(relinquishRoomOwnerships(userId, subscribedRooms));\n      const messageErasureType = settings.get('Message_ErasureType');\n\n      switch (messageErasureType) {\n        case 'Delete':\n          const store = FileUpload.getStore('Uploads');\n          Messages.findFilesByUserId(userId).forEach(function (_ref) {\n            let {\n              file\n            } = _ref;\n            store.deleteById(file._id);\n          });\n          Messages.removeByUserId(userId);\n          break;\n\n        case 'Unlink':\n          const rocketCat = Users.findOneById('rocket.cat');\n\n          const nameAlias = TAPi18n.__('Removed_User');\n\n          Messages.unlinkUserId(userId, rocketCat._id, rocketCat.username, nameAlias);\n          break;\n      }\n\n      Rooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n\n      Rooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n\n      Subscriptions.removeByUserId(userId); // Remove user subscriptions\n      // removes user's avatar\n\n      if (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {\n        FileUpload.getStore('Avatars').deleteByName(user.username);\n      }\n\n      Promise.await(Integrations.disableByUserId(userId)); // Disables all the integrations which rely on the user being deleted.\n      // Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't dissappear from logged in sessions\n\n      if (messageErasureType !== 'Keep') {\n        api.broadcast('user.deleted', user);\n      }\n    } // Remove user from users database\n\n\n    Users.removeById(userId); // update name and fname of group direct messages\n\n    updateGroupDMsName(user); // Refresh the servers list\n\n    Promise.await(FederationServers.refreshServers());\n  });\n}","map":{"version":3,"sources":["app/lib/server/functions/deleteUser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n\nimport { FileUpload } from '../../../file-upload/server';\nimport { Users, Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { FederationServers, Integrations } from '../../../models/server/raw';\nimport { settings } from '../../../settings/server';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { api } from '../../../../server/sdk/api';\nimport { FileProp } from '../../../../definition/IMessage/MessageAttachment/Files/FileProp';\n\nexport async function deleteUser(userId: string, confirmRelinquish = false): Promise<void> {\n\tconst user = Users.findOneById(userId, {\n\t\tfields: { username: 1, avatarOrigin: 1, federation: 1 },\n\t});\n\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tif (user.federation) {\n\t\tconst existingSubscriptions = Subscriptions.find({ 'u._id': user._id }).count();\n\n\t\tif (existingSubscriptions > 0) {\n\t\t\tthrow new Meteor.Error('FEDERATION_Error_user_is_federated_on_rooms');\n\t\t}\n\t}\n\n\tconst subscribedRooms = getSubscribedRoomsForUserWithDetails(userId);\n\n\tif (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n\t\tconst rooms = getUserSingleOwnedRooms(subscribedRooms);\n\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t}\n\n\t// Users without username can't do anything, so there is nothing to remove\n\tif (user.username != null) {\n\t\tawait relinquishRoomOwnerships(userId, subscribedRooms);\n\n\t\tconst messageErasureType = settings.get('Message_ErasureType');\n\t\tswitch (messageErasureType) {\n\t\t\tcase 'Delete':\n\t\t\t\tconst store = FileUpload.getStore('Uploads');\n\t\t\t\tMessages.findFilesByUserId(userId).forEach(function ({ file }: { file: FileProp }) {\n\t\t\t\t\tstore.deleteById(file._id);\n\t\t\t\t});\n\t\t\t\tMessages.removeByUserId(userId);\n\t\t\t\tbreak;\n\t\t\tcase 'Unlink':\n\t\t\t\tconst rocketCat = Users.findOneById('rocket.cat');\n\t\t\t\tconst nameAlias = TAPi18n.__('Removed_User');\n\t\t\t\tMessages.unlinkUserId(userId, rocketCat._id, rocketCat.username, nameAlias);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tRooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n\t\tRooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n\n\t\tSubscriptions.removeByUserId(userId); // Remove user subscriptions\n\n\t\t// removes user's avatar\n\t\tif (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {\n\t\t\tFileUpload.getStore('Avatars').deleteByName(user.username);\n\t\t}\n\n\t\tawait Integrations.disableByUserId(userId); // Disables all the integrations which rely on the user being deleted.\n\n\t\t// Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't dissappear from logged in sessions\n\t\tif (messageErasureType !== 'Keep') {\n\t\t\tapi.broadcast('user.deleted', user);\n\t\t}\n\t}\n\n\t// Remove user from users database\n\tUsers.removeById(userId);\n\n\t// update name and fname of group direct messages\n\tupdateGroupDMsName(user);\n\n\t// Refresh the servers list\n\tawait FederationServers.refreshServers();\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"1353742e2c32bd85890dee7513ff5c633117d20a"}
