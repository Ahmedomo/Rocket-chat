{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/server/lib/rooms/roomCoordinator.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/lib/rooms/roomCoordinator.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/server/lib/rooms/roomCoordinator.ts","inputSourceMap":{"version":3,"file":"server/lib/rooms/roomCoordinator.ts","sourceRoot":"","sources":["server/lib/rooms/roomCoordinator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoomTypeConfig, IRoomTypeServerDirectives } from '../../../definition/IRoomTypeConfig';\nimport type { IRoom, RoomType } from '../../../definition/IRoom';\nimport type { IUser } from '../../../definition/IUser';\nimport type { IMessage } from '../../../definition/IMessage';\nimport type { ReadReceipt } from '../../../definition/ReadReceipt';\nimport type { IRocketChatRecord } from '../../../definition/IRocketChatRecord';\nimport type { ValueOf, AtLeast } from '../../../definition/utils';\nimport { Users } from '../../../app/models/server';\nimport { RoomSettingsEnum, RoomMemberActions } from '../../../definition/IRoomTypeConfig';\nimport { RoomCoordinator } from '../../../lib/rooms/coordinator';\nimport { settings } from '../../../app/settings/server';\n\nclass RoomCoordinatorServer extends RoomCoordinator {\n\tadd(roomConfig: IRoomTypeConfig, directives: Partial<IRoomTypeServerDirectives>): void {\n\t\tthis.addRoomType(roomConfig, {\n\t\t\tallowRoomSettingChange(_room: IRoom, _setting: ValueOf<typeof RoomSettingsEnum>): boolean {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tallowMemberAction(_room: IRoom, _action: ValueOf<typeof RoomMemberActions>): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\troomName(_room: IRoom, _userId?: string): string {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tisGroupChat(_room: IRoom): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcanBeDeleted(hasPermission: (permissionId: string, rid?: string) => boolean, room: IRoom): boolean {\n\t\t\t\tif (!hasPermission && typeof hasPermission !== 'function') {\n\t\t\t\t\tthrow new Error('You MUST provide the \"hasPermission\" to canBeDeleted function');\n\t\t\t\t}\n\t\t\t\treturn hasPermission(`delete-${room.t}`, room._id);\n\t\t\t},\n\t\t\tpreventRenaming(): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetDiscussionType(): RoomType {\n\t\t\t\treturn 'p';\n\t\t\t},\n\t\t\tcanAccessUploadedFile(_params: { rc_uid: string; rc_rid: string; rc_token: string }): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetNotificationDetails(\n\t\t\t\troom: IRoom,\n\t\t\t\tsender: AtLeast<IUser, '_id' | 'name' | 'username'>,\n\t\t\t\tnotificationMessage: string,\n\t\t\t\tuserId: string,\n\t\t\t): { title: string | undefined; text: string } {\n\t\t\t\tconst title = `#${this.roomName(room, userId)}`;\n\t\t\t\tconst name = settings.get<boolean>('UI_Use_Real_Name') ? sender.name : sender.username;\n\n\t\t\t\tconst text = `${name}: ${notificationMessage}`;\n\n\t\t\t\treturn { title, text };\n\t\t\t},\n\t\t\tgetMsgSender(senderId: IRocketChatRecord['_id']): IRocketChatRecord | undefined {\n\t\t\t\treturn Users.findOneById(senderId);\n\t\t\t},\n\t\t\tincludeInRoomSearch(): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetReadReceiptsExtraData(_message: IMessage): Partial<ReadReceipt> {\n\t\t\t\treturn {};\n\t\t\t},\n\t\t\tincludeInDashboard(): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t...directives,\n\t\t\tconfig: roomConfig,\n\t\t});\n\t}\n\n\tgetRoomDirectives(roomType: string): IRoomTypeServerDirectives | undefined {\n\t\treturn this.roomTypes[roomType]?.directives as IRoomTypeServerDirectives;\n\t}\n\n\topenRoom(_type: string, _name: string, _render = true): void {\n\t\t// Nothing to do on the server side.\n\t}\n\n\tgetTypesToShowOnDashboard(): Array<IRoomTypeConfig['identifier']> {\n\t\treturn Object.keys(this.roomTypes).filter((key) => (this.roomTypes[key].directives as IRoomTypeServerDirectives).includeInDashboard());\n\t}\n\n\tgetRoomName(roomType: string, roomData: IRoom, userId?: string): string {\n\t\treturn this.getRoomDirectives(roomType)?.roomName(roomData, userId) ?? '';\n\t}\n\n\tsetRoomFind(roomType: string, roomFind: Required<Pick<IRoomTypeServerDirectives, 'roomFind'>>['roomFind']): void {\n\t\tconst directives = this.getRoomDirectives(roomType);\n\t\tif (!directives) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (directives.roomFind) {\n\t\t\tthrow new Error('Room find for the given type already exists');\n\t\t}\n\n\t\tdirectives.roomFind = roomFind;\n\t}\n\n\tgetRoomFind(roomType: string): Required<Pick<IRoomTypeServerDirectives, 'roomFind'>>['roomFind'] | undefined {\n\t\treturn this.getRoomDirectives(roomType)?.roomFind;\n\t}\n\n\tsearchableRoomTypes(): Array<string> {\n\t\treturn Object.entries(this.roomTypes)\n\t\t\t.filter(([_identifier, { directives }]) => (directives as IRoomTypeServerDirectives).includeInRoomSearch())\n\t\t\t.map(([identifier]) => identifier);\n\t}\n}\n\nexport const roomCoordinator = new RoomCoordinatorServer();\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/server/lib/rooms/roomCoordinator.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/rooms/roomCoordinator.ts"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  roomCoordinator: () => roomCoordinator\n});\nlet Users;\nmodule.link(\"../../../app/models/server\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 0);\nlet RoomCoordinator;\nmodule.link(\"../../../lib/rooms/coordinator\", {\n  RoomCoordinator(v) {\n    RoomCoordinator = v;\n  }\n\n}, 1);\nlet settings;\nmodule.link(\"../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 2);\n\nclass RoomCoordinatorServer extends RoomCoordinator {\n  add(roomConfig, directives) {\n    this.addRoomType(roomConfig, _objectSpread(_objectSpread({\n      allowRoomSettingChange(_room, _setting) {\n        return true;\n      },\n\n      allowMemberAction(_room, _action) {\n        return false;\n      },\n\n      roomName(_room, _userId) {\n        return '';\n      },\n\n      isGroupChat(_room) {\n        return false;\n      },\n\n      canBeDeleted(hasPermission, room) {\n        if (!hasPermission && typeof hasPermission !== 'function') {\n          throw new Error('You MUST provide the \"hasPermission\" to canBeDeleted function');\n        }\n\n        return hasPermission(\"delete-\".concat(room.t), room._id);\n      },\n\n      preventRenaming() {\n        return false;\n      },\n\n      getDiscussionType() {\n        return 'p';\n      },\n\n      canAccessUploadedFile(_params) {\n        return false;\n      },\n\n      getNotificationDetails(room, sender, notificationMessage, userId) {\n        const title = \"#\".concat(this.roomName(room, userId));\n        const name = settings.get('UI_Use_Real_Name') ? sender.name : sender.username;\n        const text = \"\".concat(name, \": \").concat(notificationMessage);\n        return {\n          title,\n          text\n        };\n      },\n\n      getMsgSender(senderId) {\n        return Users.findOneById(senderId);\n      },\n\n      includeInRoomSearch() {\n        return false;\n      },\n\n      getReadReceiptsExtraData(_message) {\n        return {};\n      },\n\n      includeInDashboard() {\n        return false;\n      }\n\n    }, directives), {}, {\n      config: roomConfig\n    }));\n  }\n\n  getRoomDirectives(roomType) {\n    var _this$roomTypes$roomT;\n\n    return (_this$roomTypes$roomT = this.roomTypes[roomType]) === null || _this$roomTypes$roomT === void 0 ? void 0 : _this$roomTypes$roomT.directives;\n  }\n\n  openRoom(_type, _name) {// Nothing to do on the server side.\n\n    let _render = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  }\n\n  getTypesToShowOnDashboard() {\n    return Object.keys(this.roomTypes).filter(key => this.roomTypes[key].directives.includeInDashboard());\n  }\n\n  getRoomName(roomType, roomData, userId) {\n    var _this$getRoomDirectiv, _this$getRoomDirectiv2;\n\n    return (_this$getRoomDirectiv = (_this$getRoomDirectiv2 = this.getRoomDirectives(roomType)) === null || _this$getRoomDirectiv2 === void 0 ? void 0 : _this$getRoomDirectiv2.roomName(roomData, userId)) !== null && _this$getRoomDirectiv !== void 0 ? _this$getRoomDirectiv : '';\n  }\n\n  setRoomFind(roomType, roomFind) {\n    const directives = this.getRoomDirectives(roomType);\n\n    if (!directives) {\n      return;\n    }\n\n    if (directives.roomFind) {\n      throw new Error('Room find for the given type already exists');\n    }\n\n    directives.roomFind = roomFind;\n  }\n\n  getRoomFind(roomType) {\n    var _this$getRoomDirectiv3;\n\n    return (_this$getRoomDirectiv3 = this.getRoomDirectives(roomType)) === null || _this$getRoomDirectiv3 === void 0 ? void 0 : _this$getRoomDirectiv3.roomFind;\n  }\n\n  searchableRoomTypes() {\n    return Object.entries(this.roomTypes).filter(_ref => {\n      let [_identifier, {\n        directives\n      }] = _ref;\n      return directives.includeInRoomSearch();\n    }).map(_ref2 => {\n      let [identifier] = _ref2;\n      return identifier;\n    });\n  }\n\n}\n\nconst roomCoordinator = new RoomCoordinatorServer();","map":{"version":3,"sources":["server/lib/rooms/roomCoordinator.ts"],"names":[],"mappings":"AAOA,IAAA,aAAA;;AAAgB,MAAM,CAAA,IAAN,CAAM,sCAAN,EAAmC;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAnC,EAAmC,CAAnC;AAAhB,MAAA,CAAO,MAAP,CAAc;AAAA,EAAA,eAAQ,EAAA,MAAA;AAAR,CAAd;AAAmD,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,4BAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gCAAA,EAAA;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,8BAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAKnD,MAAM,qBAAN,SAAoC,eAApC,CAAmD;AAClD,EAAA,GAAG,CAAC,UAAD,EAA8B,UAA9B,EAA4E;AAC9E,SAAK,WAAL,CAAiB,UAAjB;AACC,MAAA,sBAAsB,CAAC,KAAD,EAAe,QAAf,EAAyD;AAC9E,eAAO,IAAP;AACA,OAHF;;AAIC,MAAA,iBAAiB,CAAC,KAAD,EAAe,OAAf,EAAyD;AACzE,eAAO,KAAP;AACA,OANF;;AAOC,MAAA,QAAQ,CAAC,KAAD,EAAe,OAAf,EAA+B;AACtC,eAAO,EAAP;AACA,OATF;;AAUC,MAAA,WAAW,CAAC,KAAD,EAAa;AACvB,eAAO,KAAP;AACA,OAZF;;AAaC,MAAA,YAAY,CAAC,aAAD,EAAiE,IAAjE,EAA4E;AACvF,YAAI,CAAC,aAAD,IAAkB,OAAO,aAAP,KAAyB,UAA/C,EAA2D;AAC1D,gBAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;AACA;;AACD,eAAO,aAAa,kBAAW,IAAI,CAAC,CAAhB,GAAqB,IAAI,CAAC,GAA1B,CAApB;AACA,OAlBF;;AAmBC,MAAA,eAAe,GAAA;AACd,eAAO,KAAP;AACA,OArBF;;AAsBC,MAAA,iBAAiB,GAAA;AAChB,eAAO,GAAP;AACA,OAxBF;;AAyBC,MAAA,qBAAqB,CAAC,OAAD,EAA8D;AAClF,eAAO,KAAP;AACA,OA3BF;;AA4BC,MAAA,sBAAsB,CACrB,IADqB,EAErB,MAFqB,EAGrB,mBAHqB,EAIrB,MAJqB,EAIP;AAEd,cAAM,KAAK,cAAO,KAAK,QAAL,CAAc,IAAd,EAAoB,MAApB,CAAP,CAAX;AACA,cAAM,IAAI,GAAG,QAAQ,CAAC,GAAT,CAAsB,kBAAtB,IAA4C,MAAM,CAAC,IAAnD,GAA0D,MAAM,CAAC,QAA9E;AAEA,cAAM,IAAI,aAAM,IAAN,eAAe,mBAAf,CAAV;AAEA,eAAO;AAAE,UAAA,KAAF;AAAS,UAAA;AAAT,SAAP;AACA,OAxCF;;AAyCC,MAAA,YAAY,CAAC,QAAD,EAAmC;AAC9C,eAAO,KAAK,CAAC,WAAN,CAAkB,QAAlB,CAAP;AACA,OA3CF;;AA4CC,MAAA,mBAAmB,GAAA;AAClB,eAAO,KAAP;AACA,OA9CF;;AA+CC,MAAA,wBAAwB,CAAC,QAAD,EAAmB;AAC1C,eAAO,EAAP;AACA,OAjDF;;AAkDC,MAAA,kBAAkB,GAAA;AACjB,eAAO,KAAP;AACA;;AApDF,OAsDI,UAtDJ;AAuDC,MAAA,MAAM,EAAE;AAvDT;AAyDA;;AAED,EAAA,iBAAiB,CAAC,QAAD,EAAiB;AAAA;;AACjC,oCAAO,KAAK,SAAL,CAAe,QAAf,CAAP,0DAAO,sBAA0B,UAAjC;AACA;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAgB,KAAhB,EAA6C,CACpD;;AADoD,QAAd,OAAc,uEAAJ,IAAI;AAEpD;;AAED,EAAA,yBAAyB,GAAA;AACxB,WAAO,MAAM,CAAC,IAAP,CAAY,KAAK,SAAjB,EAA4B,MAA5B,CAAoC,GAAD,IAAU,KAAK,SAAL,CAAe,GAAf,EAAoB,UAApB,CAA6D,kBAA7D,EAA7C,CAAP;AACA;;AAED,EAAA,WAAW,CAAC,QAAD,EAAmB,QAAnB,EAAoC,MAApC,EAAmD;AAAA;;AAC7D,8DAAO,KAAK,iBAAL,CAAuB,QAAvB,CAAP,2DAAO,uBAAkC,QAAlC,CAA2C,QAA3C,EAAqD,MAArD,CAAP,yEAAuE,EAAvE;AACA;;AAED,EAAA,WAAW,CAAC,QAAD,EAAmB,QAAnB,EAA8F;AACxG,UAAM,UAAU,GAAG,KAAK,iBAAL,CAAuB,QAAvB,CAAnB;;AACA,QAAI,CAAC,UAAL,EAAiB;AAChB;AACA;;AAED,QAAI,UAAU,CAAC,QAAf,EAAyB;AACxB,YAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACA;;AAED,IAAA,UAAU,CAAC,QAAX,GAAsB,QAAtB;AACA;;AAED,EAAA,WAAW,CAAC,QAAD,EAAiB;AAAA;;AAC3B,qCAAO,KAAK,iBAAL,CAAuB,QAAvB,CAAP,2DAAO,uBAAkC,QAAzC;AACA;;AAED,EAAA,mBAAmB,GAAA;AAClB,WAAO,MAAM,CAAC,OAAP,CAAe,KAAK,SAApB,EACL,MADK,CACE;AAAA,UAAC,CAAC,WAAD,EAAc;AAAE,QAAA;AAAF,OAAd,CAAD;AAAA,aAAoC,UAAwC,CAAC,mBAAzC,EAApC;AAAA,KADF,EAEL,GAFK,CAED;AAAA,UAAC,CAAC,UAAD,CAAD;AAAA,aAAkB,UAAlB;AAAA,KAFC,CAAP;AAGA;;AAlGiD;;AAqG5C,MAAM,eAAe,GAAG,IAAI,qBAAJ,EAAxB","sourcesContent":["import type { IRoomTypeConfig, IRoomTypeServerDirectives } from '../../../definition/IRoomTypeConfig';\nimport type { IRoom, RoomType } from '../../../definition/IRoom';\nimport type { IUser } from '../../../definition/IUser';\nimport type { IMessage } from '../../../definition/IMessage';\nimport type { ReadReceipt } from '../../../definition/ReadReceipt';\nimport type { IRocketChatRecord } from '../../../definition/IRocketChatRecord';\nimport type { ValueOf, AtLeast } from '../../../definition/utils';\nimport { Users } from '../../../app/models/server';\nimport { RoomSettingsEnum, RoomMemberActions } from '../../../definition/IRoomTypeConfig';\nimport { RoomCoordinator } from '../../../lib/rooms/coordinator';\nimport { settings } from '../../../app/settings/server';\n\nclass RoomCoordinatorServer extends RoomCoordinator {\n\tadd(roomConfig: IRoomTypeConfig, directives: Partial<IRoomTypeServerDirectives>): void {\n\t\tthis.addRoomType(roomConfig, {\n\t\t\tallowRoomSettingChange(_room: IRoom, _setting: ValueOf<typeof RoomSettingsEnum>): boolean {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tallowMemberAction(_room: IRoom, _action: ValueOf<typeof RoomMemberActions>): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\troomName(_room: IRoom, _userId?: string): string {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tisGroupChat(_room: IRoom): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcanBeDeleted(hasPermission: (permissionId: string, rid?: string) => boolean, room: IRoom): boolean {\n\t\t\t\tif (!hasPermission && typeof hasPermission !== 'function') {\n\t\t\t\t\tthrow new Error('You MUST provide the \"hasPermission\" to canBeDeleted function');\n\t\t\t\t}\n\t\t\t\treturn hasPermission(`delete-${room.t}`, room._id);\n\t\t\t},\n\t\t\tpreventRenaming(): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetDiscussionType(): RoomType {\n\t\t\t\treturn 'p';\n\t\t\t},\n\t\t\tcanAccessUploadedFile(_params: { rc_uid: string; rc_rid: string; rc_token: string }): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetNotificationDetails(\n\t\t\t\troom: IRoom,\n\t\t\t\tsender: AtLeast<IUser, '_id' | 'name' | 'username'>,\n\t\t\t\tnotificationMessage: string,\n\t\t\t\tuserId: string,\n\t\t\t): { title: string | undefined; text: string } {\n\t\t\t\tconst title = `#${this.roomName(room, userId)}`;\n\t\t\t\tconst name = settings.get<boolean>('UI_Use_Real_Name') ? sender.name : sender.username;\n\n\t\t\t\tconst text = `${name}: ${notificationMessage}`;\n\n\t\t\t\treturn { title, text };\n\t\t\t},\n\t\t\tgetMsgSender(senderId: IRocketChatRecord['_id']): IRocketChatRecord | undefined {\n\t\t\t\treturn Users.findOneById(senderId);\n\t\t\t},\n\t\t\tincludeInRoomSearch(): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tgetReadReceiptsExtraData(_message: IMessage): Partial<ReadReceipt> {\n\t\t\t\treturn {};\n\t\t\t},\n\t\t\tincludeInDashboard(): boolean {\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t...directives,\n\t\t\tconfig: roomConfig,\n\t\t});\n\t}\n\n\tgetRoomDirectives(roomType: string): IRoomTypeServerDirectives | undefined {\n\t\treturn this.roomTypes[roomType]?.directives as IRoomTypeServerDirectives;\n\t}\n\n\topenRoom(_type: string, _name: string, _render = true): void {\n\t\t// Nothing to do on the server side.\n\t}\n\n\tgetTypesToShowOnDashboard(): Array<IRoomTypeConfig['identifier']> {\n\t\treturn Object.keys(this.roomTypes).filter((key) => (this.roomTypes[key].directives as IRoomTypeServerDirectives).includeInDashboard());\n\t}\n\n\tgetRoomName(roomType: string, roomData: IRoom, userId?: string): string {\n\t\treturn this.getRoomDirectives(roomType)?.roomName(roomData, userId) ?? '';\n\t}\n\n\tsetRoomFind(roomType: string, roomFind: Required<Pick<IRoomTypeServerDirectives, 'roomFind'>>['roomFind']): void {\n\t\tconst directives = this.getRoomDirectives(roomType);\n\t\tif (!directives) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (directives.roomFind) {\n\t\t\tthrow new Error('Room find for the given type already exists');\n\t\t}\n\n\t\tdirectives.roomFind = roomFind;\n\t}\n\n\tgetRoomFind(roomType: string): Required<Pick<IRoomTypeServerDirectives, 'roomFind'>>['roomFind'] | undefined {\n\t\treturn this.getRoomDirectives(roomType)?.roomFind;\n\t}\n\n\tsearchableRoomTypes(): Array<string> {\n\t\treturn Object.entries(this.roomTypes)\n\t\t\t.filter(([_identifier, { directives }]) => (directives as IRoomTypeServerDirectives).includeInRoomSearch())\n\t\t\t.map(([identifier]) => identifier);\n\t}\n}\n\nexport const roomCoordinator = new RoomCoordinatorServer();\n"],"sourceRoot":""},"sourceType":"module","hash":"0807f88544fe25806c3d5422e96e316afdf0d95c"}
