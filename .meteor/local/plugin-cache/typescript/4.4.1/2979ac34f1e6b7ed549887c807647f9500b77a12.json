{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/server/lib/rooms/roomTypes/direct.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/lib/rooms/roomTypes/direct.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/server/lib/rooms/roomTypes/direct.ts","inputSourceMap":{"version":3,"file":"server/lib/rooms/roomTypes/direct.ts","sourceRoot":"","sources":["server/lib/rooms/roomTypes/direct.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAC;AAG3D,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,wCAAwC,CAAC;AAE7F,OAAO,EAAE,wBAAwB,EAAE,MAAM,wCAAwC,CAAC;AAClF,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAE9D,MAAM,CAAC,MAAM,qBAAqB,GAAG,wBAAwB,CAAC,eAAe,CAAC,CAAC;AAE/E,MAAM,gBAAgB,GAAG,GAAuB,EAAE;IACjD,IAAI;QACH,OAAO,MAAM,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC;KACpC;IAAC,OAAO,EAAE,EAAE;QACZ,EAAE;KACF;AACF,CAAC,CAAC;AAEF,eAAe,CAAC,GAAG,CAAC,qBAAqB,EAAE;IAC1C,sBAAsB,CAAC,KAAK,EAAE,OAAO;QACpC,QAAQ,OAAO,EAAE;YAChB,KAAK,gBAAgB,CAAC,IAAI,CAAC;YAC3B,KAAK,gBAAgB,CAAC,IAAI,CAAC;YAC3B,KAAK,gBAAgB,CAAC,eAAe,CAAC;YACtC,KAAK,gBAAgB,CAAC,WAAW,CAAC;YAClC,KAAK,gBAAgB,CAAC,SAAS,CAAC;YAChC,KAAK,gBAAgB,CAAC,oBAAoB,CAAC;YAC3C,KAAK,gBAAgB,CAAC,oBAAoB,CAAC;YAC3C,KAAK,gBAAgB,CAAC,SAAS;gBAC9B,OAAO,KAAK,CAAC;YACd,KAAK,gBAAgB,CAAC,GAAG;gBACxB,OAAO,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;YAC5C;gBACC,OAAO,IAAI,CAAC;SACb;IACF,CAAC;IAED,iBAAiB,CAAC,IAAW,EAAE,MAAM;QACpC,QAAQ,MAAM,EAAE;YACf,KAAK,iBAAiB,CAAC,KAAK;gBAC3B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAChC;gBACC,OAAO,KAAK,CAAC;SACd;IACF,CAAC;IAED,QAAQ,CAAC,IAAI,EAAE,MAAO;QACrB,MAAM,YAAY,GAAG,CAAC,GAAkD,EAAE;YACzE,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE;gBAC5B,OAAO;oBACN,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;iBACf,CAAC;aACF;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACd,OAAO,SAAS,CAAC;aACjB;YAED,MAAM,GAAG,GAAG,MAAM,IAAI,gBAAgB,EAAE,CAAC;YACzC,IAAI,GAAG,EAAE;gBACR,OAAO,aAAa,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;aAChG;YAED,uFAAuF;YACvF,OAAO,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACpF,CAAC,CAAC,EAAE,CAAC;QAEL,IAAI,CAAC,YAAY,EAAE;YAClB,OAAO;SACP;QAED,IAAI,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;YACnD,OAAO,YAAY,CAAC,KAAK,CAAC;SAC1B;QAED,OAAO,YAAY,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,WAAW,CAAC,IAAI;QACf,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAED,sBAAsB,CAAC,IAAI,EAAE,MAAM,EAAE,mBAAmB,EAAE,MAAM;QAC/D,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAU,kBAAkB,CAAC,CAAC;QAE9D,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YAC3B,OAAO;gBACN,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;gBAClC,IAAI,EAAE,GAAG,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,QAAQ,KAAK,mBAAmB,EAAE;aAClF,CAAC;SACF;QAED,OAAO;YACN,KAAK,EAAE,CAAC,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,QAAQ;YACtD,IAAI,EAAE,mBAAmB;SACzB,CAAC;IACH,CAAC;IAED,kBAAkB;QACjB,OAAO,IAAI,CAAC;IACb,CAAC;CACiE,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { settings } from '../../../../app/settings/server';\nimport type { IRoom } from '../../../../definition/IRoom';\nimport type { IRoomTypeServerDirectives } from '../../../../definition/IRoomTypeConfig';\nimport { RoomSettingsEnum, RoomMemberActions } from '../../../../definition/IRoomTypeConfig';\nimport type { AtLeast } from '../../../../definition/utils';\nimport { getDirectMessageRoomType } from '../../../../lib/rooms/roomTypes/direct';\nimport { roomCoordinator } from '../roomCoordinator';\nimport { Subscriptions } from '../../../../app/models/server';\n\nexport const DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\n\nconst getCurrentUserId = (): string | undefined => {\n\ttry {\n\t\treturn Meteor.userId() || undefined;\n\t} catch (_e) {\n\t\t//\n\t}\n};\n\nroomCoordinator.add(DirectMessageRoomType, {\n\tallowRoomSettingChange(_room, setting) {\n\t\tswitch (setting) {\n\t\t\tcase RoomSettingsEnum.TYPE:\n\t\t\tcase RoomSettingsEnum.NAME:\n\t\t\tcase RoomSettingsEnum.SYSTEM_MESSAGES:\n\t\t\tcase RoomSettingsEnum.DESCRIPTION:\n\t\t\tcase RoomSettingsEnum.READ_ONLY:\n\t\t\tcase RoomSettingsEnum.REACT_WHEN_READ_ONLY:\n\t\t\tcase RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:\n\t\t\tcase RoomSettingsEnum.JOIN_CODE:\n\t\t\t\treturn false;\n\t\t\tcase RoomSettingsEnum.E2E:\n\t\t\t\treturn settings.get('E2E_Enable') === true;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t},\n\n\tallowMemberAction(room: IRoom, action) {\n\t\tswitch (action) {\n\t\t\tcase RoomMemberActions.BLOCK:\n\t\t\t\treturn !this.isGroupChat(room);\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t},\n\n\troomName(room, userId?) {\n\t\tconst subscription = ((): { fname?: string; name?: string } | undefined => {\n\t\t\tif (room.fname || room.name) {\n\t\t\t\treturn {\n\t\t\t\t\tfname: room.fname,\n\t\t\t\t\tname: room.name,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!room._id) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uid = userId || getCurrentUserId();\n\t\t\tif (uid) {\n\t\t\t\treturn Subscriptions.findOneByRoomIdAndUserId(room._id, uid, { fields: { name: 1, fname: 1 } });\n\t\t\t}\n\n\t\t\t// If we don't know what user is requesting the roomName, then any subscription will do\n\t\t\treturn Subscriptions.findOne({ rid: room._id }, { fields: { name: 1, fname: 1 } });\n\t\t})();\n\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (settings.get('UI_Use_Real_Name') && room.fname) {\n\t\t\treturn subscription.fname;\n\t\t}\n\n\t\treturn subscription.name;\n\t},\n\n\tisGroupChat(room) {\n\t\treturn (room?.uids?.length || 0) > 2;\n\t},\n\n\tgetNotificationDetails(room, sender, notificationMessage, userId) {\n\t\tconst useRealName = settings.get<boolean>('UI_Use_Real_Name');\n\n\t\tif (this.isGroupChat(room)) {\n\t\t\treturn {\n\t\t\t\ttitle: this.roomName(room, userId),\n\t\t\t\ttext: `${(useRealName && sender.name) || sender.username}: ${notificationMessage}`,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttitle: (useRealName && sender.name) || sender.username,\n\t\t\ttext: notificationMessage,\n\t\t};\n\t},\n\n\tincludeInDashboard() {\n\t\treturn true;\n\t},\n} as AtLeast<IRoomTypeServerDirectives, 'isGroupChat' | 'roomName'>);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/server/lib/rooms/roomTypes/direct.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/rooms/roomTypes/direct.ts"}},"code":"module.export({\n  DirectMessageRoomType: () => DirectMessageRoomType\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet settings;\nmodule.link(\"../../../../app/settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 1);\nlet RoomSettingsEnum, RoomMemberActions;\nmodule.link(\"../../../../definition/IRoomTypeConfig\", {\n  RoomSettingsEnum(v) {\n    RoomSettingsEnum = v;\n  },\n\n  RoomMemberActions(v) {\n    RoomMemberActions = v;\n  }\n\n}, 2);\nlet getDirectMessageRoomType;\nmodule.link(\"../../../../lib/rooms/roomTypes/direct\", {\n  getDirectMessageRoomType(v) {\n    getDirectMessageRoomType = v;\n  }\n\n}, 3);\nlet roomCoordinator;\nmodule.link(\"../roomCoordinator\", {\n  roomCoordinator(v) {\n    roomCoordinator = v;\n  }\n\n}, 4);\nlet Subscriptions;\nmodule.link(\"../../../../app/models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 5);\nconst DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\n\nconst getCurrentUserId = () => {\n  try {\n    return Meteor.userId() || undefined;\n  } catch (_e) {//\n  }\n};\n\nroomCoordinator.add(DirectMessageRoomType, {\n  allowRoomSettingChange(_room, setting) {\n    switch (setting) {\n      case RoomSettingsEnum.TYPE:\n      case RoomSettingsEnum.NAME:\n      case RoomSettingsEnum.SYSTEM_MESSAGES:\n      case RoomSettingsEnum.DESCRIPTION:\n      case RoomSettingsEnum.READ_ONLY:\n      case RoomSettingsEnum.REACT_WHEN_READ_ONLY:\n      case RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:\n      case RoomSettingsEnum.JOIN_CODE:\n        return false;\n\n      case RoomSettingsEnum.E2E:\n        return settings.get('E2E_Enable') === true;\n\n      default:\n        return true;\n    }\n  },\n\n  allowMemberAction(room, action) {\n    switch (action) {\n      case RoomMemberActions.BLOCK:\n        return !this.isGroupChat(room);\n\n      default:\n        return false;\n    }\n  },\n\n  roomName(room, userId) {\n    const subscription = (() => {\n      if (room.fname || room.name) {\n        return {\n          fname: room.fname,\n          name: room.name\n        };\n      }\n\n      if (!room._id) {\n        return undefined;\n      }\n\n      const uid = userId || getCurrentUserId();\n\n      if (uid) {\n        return Subscriptions.findOneByRoomIdAndUserId(room._id, uid, {\n          fields: {\n            name: 1,\n            fname: 1\n          }\n        });\n      } // If we don't know what user is requesting the roomName, then any subscription will do\n\n\n      return Subscriptions.findOne({\n        rid: room._id\n      }, {\n        fields: {\n          name: 1,\n          fname: 1\n        }\n      });\n    })();\n\n    if (!subscription) {\n      return;\n    }\n\n    if (settings.get('UI_Use_Real_Name') && room.fname) {\n      return subscription.fname;\n    }\n\n    return subscription.name;\n  },\n\n  isGroupChat(room) {\n    var _room$uids;\n\n    return ((room === null || room === void 0 ? void 0 : (_room$uids = room.uids) === null || _room$uids === void 0 ? void 0 : _room$uids.length) || 0) > 2;\n  },\n\n  getNotificationDetails(room, sender, notificationMessage, userId) {\n    const useRealName = settings.get('UI_Use_Real_Name');\n\n    if (this.isGroupChat(room)) {\n      return {\n        title: this.roomName(room, userId),\n        text: \"\".concat(useRealName && sender.name || sender.username, \": \").concat(notificationMessage)\n      };\n    }\n\n    return {\n      title: useRealName && sender.name || sender.username,\n      text: notificationMessage\n    };\n  },\n\n  includeInDashboard() {\n    return true;\n  }\n\n});","map":{"version":3,"sources":["server/lib/rooms/roomTypes/direct.ts"],"names":[],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAS;AAAM,EAAA,qBAAQ,EAAA,MAAgB;AAA9B,CAAT;AAAuC,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iCAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,gBAAA,EAAA,iBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wCAAA,EAAA;AAAA,EAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,wBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wCAAA,EAAA;AAAA,EAAA,wBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,wBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA;AAAA,MAAA,CAAA,IAAA,CAAA,oBAAA,EAAA;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,+BAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAWhC,MAAM,qBAAqB,GAAG,wBAAwB,CAAC,eAAD,CAAtD;;AAEP,MAAM,gBAAgB,GAAG,MAAyB;AACjD,MAAI;AACH,WAAO,MAAM,CAAC,MAAP,MAAmB,SAA1B;AACA,GAFD,CAEE,OAAO,EAAP,EAAW,CACZ;AACA;AACD,CAND;;AAQA,eAAe,CAAC,GAAhB,CAAoB,qBAApB,EAA2C;AAC1C,EAAA,sBAAsB,CAAC,KAAD,EAAQ,OAAR,EAAe;AACpC,YAAQ,OAAR;AACC,WAAK,gBAAgB,CAAC,IAAtB;AACA,WAAK,gBAAgB,CAAC,IAAtB;AACA,WAAK,gBAAgB,CAAC,eAAtB;AACA,WAAK,gBAAgB,CAAC,WAAtB;AACA,WAAK,gBAAgB,CAAC,SAAtB;AACA,WAAK,gBAAgB,CAAC,oBAAtB;AACA,WAAK,gBAAgB,CAAC,oBAAtB;AACA,WAAK,gBAAgB,CAAC,SAAtB;AACC,eAAO,KAAP;;AACD,WAAK,gBAAgB,CAAC,GAAtB;AACC,eAAO,QAAQ,CAAC,GAAT,CAAa,YAAb,MAA+B,IAAtC;;AACD;AACC,eAAO,IAAP;AAbF;AAeA,GAjByC;;AAmB1C,EAAA,iBAAiB,CAAC,IAAD,EAAc,MAAd,EAAoB;AACpC,YAAQ,MAAR;AACC,WAAK,iBAAiB,CAAC,KAAvB;AACC,eAAO,CAAC,KAAK,WAAL,CAAiB,IAAjB,CAAR;;AACD;AACC,eAAO,KAAP;AAJF;AAMA,GA1ByC;;AA4B1C,EAAA,QAAQ,CAAC,IAAD,EAAO,MAAP,EAAc;AACrB,UAAM,YAAY,GAAG,CAAC,MAAoD;AACzE,UAAI,IAAI,CAAC,KAAL,IAAc,IAAI,CAAC,IAAvB,EAA6B;AAC5B,eAAO;AACN,UAAA,KAAK,EAAE,IAAI,CAAC,KADN;AAEN,UAAA,IAAI,EAAE,IAAI,CAAC;AAFL,SAAP;AAIA;;AAED,UAAI,CAAC,IAAI,CAAC,GAAV,EAAe;AACd,eAAO,SAAP;AACA;;AAED,YAAM,GAAG,GAAG,MAAM,IAAI,gBAAgB,EAAtC;;AACA,UAAI,GAAJ,EAAS;AACR,eAAO,aAAa,CAAC,wBAAd,CAAuC,IAAI,CAAC,GAA5C,EAAiD,GAAjD,EAAsD;AAAE,UAAA,MAAM,EAAE;AAAE,YAAA,IAAI,EAAE,CAAR;AAAW,YAAA,KAAK,EAAE;AAAlB;AAAV,SAAtD,CAAP;AACA,OAfwE,CAiBzE;;;AACA,aAAO,aAAa,CAAC,OAAd,CAAsB;AAAE,QAAA,GAAG,EAAE,IAAI,CAAC;AAAZ,OAAtB,EAAyC;AAAE,QAAA,MAAM,EAAE;AAAE,UAAA,IAAI,EAAE,CAAR;AAAW,UAAA,KAAK,EAAE;AAAlB;AAAV,OAAzC,CAAP;AACA,KAnBoB,GAArB;;AAqBA,QAAI,CAAC,YAAL,EAAmB;AAClB;AACA;;AAED,QAAI,QAAQ,CAAC,GAAT,CAAa,kBAAb,KAAoC,IAAI,CAAC,KAA7C,EAAoD;AACnD,aAAO,YAAY,CAAC,KAApB;AACA;;AAED,WAAO,YAAY,CAAC,IAApB;AACA,GA3DyC;;AA6D1C,EAAA,WAAW,CAAC,IAAD,EAAK;AAAA;;AACf,WAAO,CAAC,CAAA,IAAI,SAAJ,IAAA,IAAI,WAAJ,0BAAA,IAAI,CAAE,IAAN,0DAAY,MAAZ,KAAsB,CAAvB,IAA4B,CAAnC;AACA,GA/DyC;;AAiE1C,EAAA,sBAAsB,CAAC,IAAD,EAAO,MAAP,EAAe,mBAAf,EAAoC,MAApC,EAA0C;AAC/D,UAAM,WAAW,GAAG,QAAQ,CAAC,GAAT,CAAsB,kBAAtB,CAApB;;AAEA,QAAI,KAAK,WAAL,CAAiB,IAAjB,CAAJ,EAA4B;AAC3B,aAAO;AACN,QAAA,KAAK,EAAE,KAAK,QAAL,CAAc,IAAd,EAAoB,MAApB,CADD;AAEN,QAAA,IAAI,YAAM,WAAW,IAAI,MAAM,CAAC,IAAvB,IAAgC,MAAM,CAAC,QAA5C,eAAyD,mBAAzD;AAFE,OAAP;AAIA;;AAED,WAAO;AACN,MAAA,KAAK,EAAG,WAAW,IAAI,MAAM,CAAC,IAAvB,IAAgC,MAAM,CAAC,QADxC;AAEN,MAAA,IAAI,EAAE;AAFA,KAAP;AAIA,GA/EyC;;AAiF1C,EAAA,kBAAkB,GAAA;AACjB,WAAO,IAAP;AACA;;AAnFyC,CAA3C","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { settings } from '../../../../app/settings/server';\nimport type { IRoom } from '../../../../definition/IRoom';\nimport type { IRoomTypeServerDirectives } from '../../../../definition/IRoomTypeConfig';\nimport { RoomSettingsEnum, RoomMemberActions } from '../../../../definition/IRoomTypeConfig';\nimport type { AtLeast } from '../../../../definition/utils';\nimport { getDirectMessageRoomType } from '../../../../lib/rooms/roomTypes/direct';\nimport { roomCoordinator } from '../roomCoordinator';\nimport { Subscriptions } from '../../../../app/models/server';\n\nexport const DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\n\nconst getCurrentUserId = (): string | undefined => {\n\ttry {\n\t\treturn Meteor.userId() || undefined;\n\t} catch (_e) {\n\t\t//\n\t}\n};\n\nroomCoordinator.add(DirectMessageRoomType, {\n\tallowRoomSettingChange(_room, setting) {\n\t\tswitch (setting) {\n\t\t\tcase RoomSettingsEnum.TYPE:\n\t\t\tcase RoomSettingsEnum.NAME:\n\t\t\tcase RoomSettingsEnum.SYSTEM_MESSAGES:\n\t\t\tcase RoomSettingsEnum.DESCRIPTION:\n\t\t\tcase RoomSettingsEnum.READ_ONLY:\n\t\t\tcase RoomSettingsEnum.REACT_WHEN_READ_ONLY:\n\t\t\tcase RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:\n\t\t\tcase RoomSettingsEnum.JOIN_CODE:\n\t\t\t\treturn false;\n\t\t\tcase RoomSettingsEnum.E2E:\n\t\t\t\treturn settings.get('E2E_Enable') === true;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t},\n\n\tallowMemberAction(room: IRoom, action) {\n\t\tswitch (action) {\n\t\t\tcase RoomMemberActions.BLOCK:\n\t\t\t\treturn !this.isGroupChat(room);\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t},\n\n\troomName(room, userId?) {\n\t\tconst subscription = ((): { fname?: string; name?: string } | undefined => {\n\t\t\tif (room.fname || room.name) {\n\t\t\t\treturn {\n\t\t\t\t\tfname: room.fname,\n\t\t\t\t\tname: room.name,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!room._id) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uid = userId || getCurrentUserId();\n\t\t\tif (uid) {\n\t\t\t\treturn Subscriptions.findOneByRoomIdAndUserId(room._id, uid, { fields: { name: 1, fname: 1 } });\n\t\t\t}\n\n\t\t\t// If we don't know what user is requesting the roomName, then any subscription will do\n\t\t\treturn Subscriptions.findOne({ rid: room._id }, { fields: { name: 1, fname: 1 } });\n\t\t})();\n\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (settings.get('UI_Use_Real_Name') && room.fname) {\n\t\t\treturn subscription.fname;\n\t\t}\n\n\t\treturn subscription.name;\n\t},\n\n\tisGroupChat(room) {\n\t\treturn (room?.uids?.length || 0) > 2;\n\t},\n\n\tgetNotificationDetails(room, sender, notificationMessage, userId) {\n\t\tconst useRealName = settings.get<boolean>('UI_Use_Real_Name');\n\n\t\tif (this.isGroupChat(room)) {\n\t\t\treturn {\n\t\t\t\ttitle: this.roomName(room, userId),\n\t\t\t\ttext: `${(useRealName && sender.name) || sender.username}: ${notificationMessage}`,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttitle: (useRealName && sender.name) || sender.username,\n\t\t\ttext: notificationMessage,\n\t\t};\n\t},\n\n\tincludeInDashboard() {\n\t\treturn true;\n\t},\n} as AtLeast<IRoomTypeServerDirectives, 'isGroupChat' | 'roomName'>);\n"],"sourceRoot":""},"sourceType":"module","hash":"2979ac34f1e6b7ed549887c807647f9500b77a12"}
