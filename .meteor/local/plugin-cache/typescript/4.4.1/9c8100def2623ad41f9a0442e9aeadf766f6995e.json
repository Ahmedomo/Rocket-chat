{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/methods/getChannelHistory.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/methods/getChannelHistory.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/methods/getChannelHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/methods/getChannelHistory.ts","sourceRoot":"","sources":["app/lib/server/methods/getChannelHistory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,CAAC,MAAM,YAAY,CAAC;AAE3B,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAC7E,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,wBAAwB,EAAE,MAAM,oDAAoD,CAAC;AAC9F,OAAO,EAAE,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AAEzE,MAAM,CAAC,OAAO,CAAC;IACd,iBAAiB,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,OAAO,EAAE,kBAAkB,GAAG,IAAI,EAAE;QAC/G,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAEnB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE;YACrB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,mBAAmB,EAAE,CAAC,CAAC;SAC9F;QAED,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QACnC,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO,KAAK,CAAC;SACb;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,EAAE;YACV,OAAO,KAAK,CAAC;SACb;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE;YAC9C,OAAO,KAAK,CAAC;SACb;QAED,qCAAqC;QACrC,IACC,IAAI,CAAC,CAAC,KAAK,GAAG;YACd,CAAC,aAAa,CAAC,UAAU,EAAE,gBAAgB,CAAC;YAC5C,CAAC,aAAa,CAAC,wBAAwB,CAAC,GAAG,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAC/E;YACD,OAAO,KAAK,CAAC;SACb;QAED,mCAAmC;QACnC,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;SACpB;QAED,uCAAuC;QACvC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAChD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,mBAAmB,EAAE,CAAC,CAAC;SAC9F;QAED,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAEzD,MAAM,OAAO,GAA4B;YACxC,IAAI,EAAE;gBACL,EAAE,EAAE,CAAC,CAAC;aACN;YACD,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,KAAK;SACZ,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAE;YAC9C,OAAO,CAAC,MAAM,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;SACjC;QAED,MAAM,OAAO,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;YACpC,CAAC,CAAC,QAAQ,CAAC,oDAAoD,CAC7D,GAAG,EACH,MAAM,EACN,kBAAkB,EAClB,OAAO,EACP,kBAAkB,EAClB,SAAS,CACR,CAAC,KAAK,EAAE;YACX,CAAC,CAAC,QAAQ,CAAC,sDAAsD,CAC/D,GAAG,EACH,MAAM,EACN,MAAM,EACN,kBAAkB,EAClB,OAAO,EACP,kBAAkB,EAClB,SAAS,CACR,CAAC,KAAK,EAAE,CAAC;QAEb,MAAM,QAAQ,GAAG,wBAAwB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAE/D,IAAI,OAAO,EAAE;YACZ,IAAI,eAAe,GAAG,CAAC,CAAC;YACxB,IAAI,WAAW,GAAG,SAAS,CAAC;YAE5B,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;gBAC3B,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/C,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,EAAE,GAAG,MAAM,EAAE;oBACrD,MAAM,cAAc,GAAG,QAAQ,CAAC,sDAAsD,CACrF,GAAG,EACH,MAAM,EACN,QAAQ,CAAC,EAAE,EACX,kBAAkB,EAClB;wBACC,KAAK,EAAE,CAAC;wBACR,IAAI,EAAE;4BACL,EAAE,EAAE,CAAC;yBACL;qBACD,EACD,kBAAkB,CAClB,CAAC;oBAEF,WAAW,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;oBACxC,eAAe,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC;iBACzC;aACD;YAED,OAAO;gBACN,QAAQ,EAAE,QAAQ,IAAI,EAAE;gBACxB,WAAW;gBACX,eAAe;aACf,CAAC;SACF;QAED,OAAO;YACN,QAAQ,EAAE,QAAQ,IAAI,EAAE;SACxB,CAAC;IACH,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport _ from 'underscore';\n\nimport { canAccessRoom, hasPermission } from '../../../authorization/server';\nimport { Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\nMeteor.methods({\n\tgetChannelHistory({ rid, latest, oldest, inclusive, offset = 0, count = 20, unreads, showThreadMessages = true }) {\n\t\tcheck(rid, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst fromUserId = Meteor.userId();\n\t\tif (!fromUserId) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst room = Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!canAccessRoom(room, { _id: fromUserId })) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure they can access the room\n\t\tif (\n\t\t\troom.t === 'c' &&\n\t\t\t!hasPermission(fromUserId, 'preview-c-room') &&\n\t\t\t!Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, { fields: { _id: 1 } })\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure latest is always defined.\n\t\tif (_.isUndefined(latest)) {\n\t\t\tlatest = new Date();\n\t\t}\n\n\t\t// Verify oldest is a date if it exists\n\t\tif (!_.isUndefined(oldest) && !_.isDate(oldest)) {\n\t\t\tthrow new Meteor.Error('error-invalid-date', 'Invalid date', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst hiddenMessageTypes = getHiddenSystemMessages(room);\n\n\t\tconst options: Record<string, unknown> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t};\n\n\t\tif (!settings.get('Message_ShowEditedStatus')) {\n\t\t\toptions.fields = { editedAt: 0 };\n\t\t}\n\n\t\tconst records = _.isUndefined(oldest)\n\t\t\t? Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\t\trid,\n\t\t\t\t\tlatest,\n\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\toptions,\n\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\tinclusive,\n\t\t\t  ).fetch()\n\t\t\t: Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\trid,\n\t\t\t\t\toldest,\n\t\t\t\t\tlatest,\n\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\toptions,\n\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\tinclusive,\n\t\t\t  ).fetch();\n\n\t\tconst messages = normalizeMessagesForUser(records, fromUserId);\n\n\t\tif (unreads) {\n\t\t\tlet unreadNotLoaded = 0;\n\t\t\tlet firstUnread = undefined;\n\n\t\t\tif (!_.isUndefined(oldest)) {\n\t\t\t\tconst firstMsg = messages[messages.length - 1];\n\t\t\t\tif (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {\n\t\t\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlimit: 1,\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tts: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tfirstUnread = unreadMessages.fetch()[0];\n\t\t\t\t\tunreadNotLoaded = unreadMessages.count();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmessages: messages || [],\n\t\t\t\tfirstUnread,\n\t\t\t\tunreadNotLoaded,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessages: messages || [],\n\t\t};\n\t},\n});\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/methods/getChannelHistory.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/methods/getChannelHistory.ts"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet canAccessRoom, hasPermission;\nmodule.link(\"../../../authorization/server\", {\n  canAccessRoom(v) {\n    canAccessRoom = v;\n  },\n\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 3);\nlet Subscriptions, Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\nlet normalizeMessagesForUser;\nmodule.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n  normalizeMessagesForUser(v) {\n    normalizeMessagesForUser = v;\n  }\n\n}, 6);\nlet getHiddenSystemMessages;\nmodule.link(\"../lib/getHiddenSystemMessages\", {\n  getHiddenSystemMessages(v) {\n    getHiddenSystemMessages = v;\n  }\n\n}, 7);\nMeteor.methods({\n  getChannelHistory(_ref) {\n    let {\n      rid,\n      latest,\n      oldest,\n      inclusive,\n      offset = 0,\n      count = 20,\n      unreads,\n      showThreadMessages = true\n    } = _ref;\n    check(rid, String);\n\n    if (!Meteor.userId()) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'getChannelHistory'\n      });\n    }\n\n    const fromUserId = Meteor.userId();\n\n    if (!fromUserId) {\n      return false;\n    }\n\n    const room = Rooms.findOneById(rid);\n\n    if (!room) {\n      return false;\n    }\n\n    if (!canAccessRoom(room, {\n      _id: fromUserId\n    })) {\n      return false;\n    } // Make sure they can access the room\n\n\n    if (room.t === 'c' && !hasPermission(fromUserId, 'preview-c-room') && !Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, {\n      fields: {\n        _id: 1\n      }\n    })) {\n      return false;\n    } // Ensure latest is always defined.\n\n\n    if (_.isUndefined(latest)) {\n      latest = new Date();\n    } // Verify oldest is a date if it exists\n\n\n    if (!_.isUndefined(oldest) && !_.isDate(oldest)) {\n      throw new Meteor.Error('error-invalid-date', 'Invalid date', {\n        method: 'getChannelHistory'\n      });\n    }\n\n    const hiddenMessageTypes = getHiddenSystemMessages(room);\n    const options = {\n      sort: {\n        ts: -1\n      },\n      skip: offset,\n      limit: count\n    };\n\n    if (!settings.get('Message_ShowEditedStatus')) {\n      options.fields = {\n        editedAt: 0\n      };\n    }\n\n    const records = _.isUndefined(oldest) ? Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(rid, latest, hiddenMessageTypes, options, showThreadMessages, inclusive).fetch() : Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, latest, hiddenMessageTypes, options, showThreadMessages, inclusive).fetch();\n    const messages = normalizeMessagesForUser(records, fromUserId);\n\n    if (unreads) {\n      let unreadNotLoaded = 0;\n      let firstUnread = undefined;\n\n      if (!_.isUndefined(oldest)) {\n        const firstMsg = messages[messages.length - 1];\n\n        if (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {\n          const unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, firstMsg.ts, hiddenMessageTypes, {\n            limit: 1,\n            sort: {\n              ts: 1\n            }\n          }, showThreadMessages);\n          firstUnread = unreadMessages.fetch()[0];\n          unreadNotLoaded = unreadMessages.count();\n        }\n      }\n\n      return {\n        messages: messages || [],\n        firstUnread,\n        unreadNotLoaded\n      };\n    }\n\n    return {\n      messages: messages || []\n    };\n  }\n\n});","map":{"version":3,"sources":["app/lib/server/methods/getChannelHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport _ from 'underscore';\n\nimport { canAccessRoom, hasPermission } from '../../../authorization/server';\nimport { Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\nMeteor.methods({\n\tgetChannelHistory({ rid, latest, oldest, inclusive, offset = 0, count = 20, unreads, showThreadMessages = true }) {\n\t\tcheck(rid, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst fromUserId = Meteor.userId();\n\t\tif (!fromUserId) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst room = Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!canAccessRoom(room, { _id: fromUserId })) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure they can access the room\n\t\tif (\n\t\t\troom.t === 'c' &&\n\t\t\t!hasPermission(fromUserId, 'preview-c-room') &&\n\t\t\t!Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, { fields: { _id: 1 } })\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure latest is always defined.\n\t\tif (_.isUndefined(latest)) {\n\t\t\tlatest = new Date();\n\t\t}\n\n\t\t// Verify oldest is a date if it exists\n\t\tif (!_.isUndefined(oldest) && !_.isDate(oldest)) {\n\t\t\tthrow new Meteor.Error('error-invalid-date', 'Invalid date', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst hiddenMessageTypes = getHiddenSystemMessages(room);\n\n\t\tconst options: Record<string, unknown> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t};\n\n\t\tif (!settings.get('Message_ShowEditedStatus')) {\n\t\t\toptions.fields = { editedAt: 0 };\n\t\t}\n\n\t\tconst records = _.isUndefined(oldest)\n\t\t\t? Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\t\trid,\n\t\t\t\t\tlatest,\n\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\toptions,\n\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\tinclusive,\n\t\t\t  ).fetch()\n\t\t\t: Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\trid,\n\t\t\t\t\toldest,\n\t\t\t\t\tlatest,\n\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\toptions,\n\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\tinclusive,\n\t\t\t  ).fetch();\n\n\t\tconst messages = normalizeMessagesForUser(records, fromUserId);\n\n\t\tif (unreads) {\n\t\t\tlet unreadNotLoaded = 0;\n\t\t\tlet firstUnread = undefined;\n\n\t\t\tif (!_.isUndefined(oldest)) {\n\t\t\t\tconst firstMsg = messages[messages.length - 1];\n\t\t\t\tif (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {\n\t\t\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlimit: 1,\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tts: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tfirstUnread = unreadMessages.fetch()[0];\n\t\t\t\t\tunreadNotLoaded = unreadMessages.count();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmessages: messages || [],\n\t\t\t\tfirstUnread,\n\t\t\t\tunreadNotLoaded,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessages: messages || [],\n\t\t};\n\t},\n});\n"],"sourceRoot":""},"sourceType":"module","hash":"9c8100def2623ad41f9a0442e9aeadf766f6995e"}
