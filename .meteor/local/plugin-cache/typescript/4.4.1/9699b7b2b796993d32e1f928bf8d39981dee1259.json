{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/relinquishRoomOwnerships.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/relinquishRoomOwnerships.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/relinquishRoomOwnerships.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/relinquishRoomOwnerships.ts","sourceRoot":"","sources":["app/lib/server/functions/relinquishRoomOwnerships.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AACxE,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAC;AAGnD,MAAM,eAAe,GAAG,CAAC,IAAc,EAAW,EAAE;IACnD,6BAA6B;IAC7B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC;IAE3D,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnI,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,WAC5C,MAAc,EACd,eAAoD,EACpD,oBAAoB,GAAG,IAAI;IAE3B,gBAAgB;IAChB,MAAM,WAAW,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,iBAAiB,EAAE,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC;IAEzF,IAAI,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,WAAW,EAAE;QAClD,QAAQ,IAAI,CAAC,MAAM,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;KACjE;IAED,MAAM,eAAe,GAAa,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,EAAE,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;IAEzH,IAAI,oBAAoB,EAAE;QACzB,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAmB,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KACxH;IAED,eAAe,CAAC,eAAe,CAAC,CAAC;IAEjC,OAAO,eAAe,CAAC;AACxB,CAAC,CAAC","sourcesContent":["import { FileUpload } from '../../../file-upload/server';\nimport { Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { Roles } from '../../../models/server/raw';\nimport { SubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\n\nconst bulkRoomCleanUp = (rids: string[]): unknown => {\n\t// no bulk deletion for files\n\trids.forEach((rid) => FileUpload.removeFilesByRoomId(rid));\n\n\treturn Promise.await(Promise.all([Subscriptions.removeByRoomIds(rids), Messages.removeByRoomIds(rids), Rooms.removeByIds(rids)]));\n};\n\nexport const relinquishRoomOwnerships = async function (\n\tuserId: string,\n\tsubscribedRooms: SubscribedRoomsForUserWithDetails[],\n\tremoveDirectMessages = true,\n): Promise<SubscribedRoomsForUserWithDetails[]> {\n\t// change owners\n\tconst changeOwner = subscribedRooms.filter(({ shouldChangeOwner }) => shouldChangeOwner);\n\n\tfor await (const { newOwner, rid } of changeOwner) {\n\t\tnewOwner && (await Roles.addUserRoles(newOwner, ['owner'], rid));\n\t}\n\n\tconst roomIdsToRemove: string[] = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }) => rid);\n\n\tif (removeDirectMessages) {\n\t\tRooms.find1On1ByUserId(userId, { fields: { _id: 1 } }).forEach(({ _id }: { _id: string }) => roomIdsToRemove.push(_id));\n\t}\n\n\tbulkRoomCleanUp(roomIdsToRemove);\n\n\treturn subscribedRooms;\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/relinquishRoomOwnerships.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/relinquishRoomOwnerships.ts"}},"code":"let _asyncIterator;\n\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n\n}, 0);\nmodule.export({\n  relinquishRoomOwnerships: () => relinquishRoomOwnerships\n});\nlet FileUpload;\nmodule.link(\"../../../file-upload/server\", {\n  FileUpload(v) {\n    FileUpload = v;\n  }\n\n}, 0);\nlet Subscriptions, Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 1);\nlet Roles;\nmodule.link(\"../../../models/server/raw\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 2);\n\nconst bulkRoomCleanUp = rids => {\n  // no bulk deletion for files\n  rids.forEach(rid => FileUpload.removeFilesByRoomId(rid));\n  return Promise.await(Promise.all([Subscriptions.removeByRoomIds(rids), Messages.removeByRoomIds(rids), Rooms.removeByIds(rids)]));\n};\n\nconst relinquishRoomOwnerships = function (userId, subscribedRooms) {\n  return Promise.asyncApply(() => {\n    let removeDirectMessages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    // change owners\n    const changeOwner = subscribedRooms.filter(_ref => {\n      let {\n        shouldChangeOwner\n      } = _ref;\n      return shouldChangeOwner;\n    });\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(changeOwner), _step; _iteratorAbruptCompletion = !(_step = Promise.await(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n        const {\n          newOwner,\n          rid\n        } = _step.value;\n        newOwner && Promise.await(Roles.addUserRoles(newOwner, ['owner'], rid));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          Promise.await(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    const roomIdsToRemove = subscribedRooms.filter(_ref2 => {\n      let {\n        shouldBeRemoved\n      } = _ref2;\n      return shouldBeRemoved;\n    }).map(_ref3 => {\n      let {\n        rid\n      } = _ref3;\n      return rid;\n    });\n\n    if (removeDirectMessages) {\n      Rooms.find1On1ByUserId(userId, {\n        fields: {\n          _id: 1\n        }\n      }).forEach(_ref4 => {\n        let {\n          _id\n        } = _ref4;\n        return roomIdsToRemove.push(_id);\n      });\n    }\n\n    bulkRoomCleanUp(roomIdsToRemove);\n    return subscribedRooms;\n  });\n};","map":{"version":3,"sources":["app/lib/server/functions/relinquishRoomOwnerships.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileUpload } from '../../../file-upload/server';\nimport { Subscriptions, Messages, Rooms } from '../../../models/server';\nimport { Roles } from '../../../models/server/raw';\nimport { SubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\n\nconst bulkRoomCleanUp = (rids: string[]): unknown => {\n\t// no bulk deletion for files\n\trids.forEach((rid) => FileUpload.removeFilesByRoomId(rid));\n\n\treturn Promise.await(Promise.all([Subscriptions.removeByRoomIds(rids), Messages.removeByRoomIds(rids), Rooms.removeByIds(rids)]));\n};\n\nexport const relinquishRoomOwnerships = async function (\n\tuserId: string,\n\tsubscribedRooms: SubscribedRoomsForUserWithDetails[],\n\tremoveDirectMessages = true,\n): Promise<SubscribedRoomsForUserWithDetails[]> {\n\t// change owners\n\tconst changeOwner = subscribedRooms.filter(({ shouldChangeOwner }) => shouldChangeOwner);\n\n\tfor await (const { newOwner, rid } of changeOwner) {\n\t\tnewOwner && (await Roles.addUserRoles(newOwner, ['owner'], rid));\n\t}\n\n\tconst roomIdsToRemove: string[] = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }) => rid);\n\n\tif (removeDirectMessages) {\n\t\tRooms.find1On1ByUserId(userId, { fields: { _id: 1 } }).forEach(({ _id }: { _id: string }) => roomIdsToRemove.push(_id));\n\t}\n\n\tbulkRoomCleanUp(roomIdsToRemove);\n\n\treturn subscribedRooms;\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"9699b7b2b796993d32e1f928bf8d39981dee1259"}
