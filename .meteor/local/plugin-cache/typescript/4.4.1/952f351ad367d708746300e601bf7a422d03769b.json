{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts","inputSourceMap":{"version":3,"file":"server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts","sourceRoot":"","sources":["server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for handling PJSIP endpoints.\n * @remarks\n * Some design notes :\n * 1. CommandFactory creates the child classes of the |Command| class and\n * \t  returns a reference to |Command|\n * 2. |CommandHandler| class call executeCommand method of |Command| class, which\n *    gets overriden here.\n * 3. Consumers of this class create the instance based on |Commands| object but\n *    specific command object 'knows' about asterisk-ami command. Reason for doing this is\n *    that the consumer does not and should not know about the pbx specific commands\n * \t  used for fetching the information. e.g for endpoint list and endpoint info,\n * \t  it uses pjsipshowendpoints and pjsipshowendpoint.\n * 4. Asterisk responds asynchronously and it responds using events. Command specific\n *    event handling is implemented by this class.\n * 5. Every execution of command takes action-callback, which tells whether the command can be\n *    executed or there is an error. In case of success, it ends set of events\n *    the completion of which is indicated by <action>completed event. e.g while fetching the endpoint,\n *    i.e for executing |pjsipshowendpoint|  asterisk sends the different parts of i\n *    nformation in different events. event |endpointdetail| indicates\n *    endpoint name, devicestate etc. |authdetail| indicates type of authentication, password and other\n *    auth related information. At the end of the series of these events, Asterisk sends |endpointdetailcomplete|\n * \t  event. At this point of time, promise, on which the consumer is waiting can be resolved.\n * 6. This class could use asynchronous callbacks. But because the connector will be used extensively by REST layer\n *    we have taken promise based approach. Promise is returned as a part of executeCommand. Caller would wait for\n *    the completion/rejection. This class will reject the promise based on error or resolve it in <command>complete\n *    event.\n * 7. Important to note that the intermediate events containing a result part for an execution of a particular command\n *    have same actionid, which is received by this class as a successful execution of a command in actionResultCallback.\n */\nimport _ from 'underscore';\nimport { Db } from 'mongodb';\n\nimport { Command, CommandType } from '../Command';\nimport { Logger } from '../../../../../lib/logger/Logger';\nimport { Commands } from '../Commands';\nimport { CallbackContext } from './CallbackContext';\nimport { EndpointState, IExtensionDetails } from '../../../../../../definition/IVoipExtension';\nimport { IVoipConnectorResult } from '../../../../../../definition/IVoipConnectorResult';\n\nexport class PJSIPEndpoint extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis.logger = new Logger('PJSIPEndpoint');\n\t\tthis._type = CommandType.AMI;\n\t}\n\n\tprivate getState(endpointState: string): EndpointState {\n\t\t/**\n\t\t * When registered endpoint can be in following state\n\t\t * Not in use : When endpoint has registered but not serving any call.\n\t\t * Ringing : Registered and ringing\n\t\t * Busy : endpoing is handling call.\n\t\t *\n\t\t * If any other state is seen, this function returns EndpointState.UNKNOWN;\n\t\t */\n\n\t\tlet state: EndpointState = EndpointState.UNKNOWN;\n\t\tswitch (endpointState.toLowerCase()) {\n\t\t\tcase 'unavailable':\n\t\t\t\tstate = EndpointState.UNREGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'not in use':\n\t\t\t\tstate = EndpointState.REGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'ringing':\n\t\t\t\tstate = EndpointState.RINGING;\n\t\t\t\tbreak;\n\t\t\tcase 'busy':\n\t\t\t\tstate = EndpointState.BUSY;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Event handler for endpointlist event containing the information of the endpoints.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoints|\n\t */\n\tonEndpointList(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// A SIP address-of-record is a canonical address by which a user is known\n\t\t// If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n\t\tif (!event?.aor.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst endPoint: IExtensionDetails = {\n\t\t\textension: event.objectname,\n\t\t\tstate: this.getState(event.devicestate),\n\t\t\tpassword: '',\n\t\t\tauthtype: '',\n\t\t};\n\t\tconst { result } = this;\n\t\tif (result.endpoints) {\n\t\t\tresult.endpoints.push(endPoint);\n\t\t} else {\n\t\t\t// create an array of endpoints in the result for\n\t\t\t// the first time.\n\t\t\tresult.endpoints = [];\n\t\t\tresult.endpoints.push(endPoint);\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointlistcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointListComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst extensions = _.sortBy(this.result.endpoints, function (o: any) {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n\t * and authentication information.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoint|.\n\t * We consolidate this endpointdetail and authdetail events because they are generated\n\t * as a result of same command. Nevertheless, in future, if such implementation\n\t * becomes difficult, it is recommended that there should be a separate handling\n\t * for each event.\n\t */\n\tonEndpointInfo(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst { result } = this;\n\n\t\tif (!result.endpoint) {\n\t\t\tconst endpointDetails: IExtensionDetails = {\n\t\t\t\textension: '',\n\t\t\t\tstate: '',\n\t\t\t\tpassword: '',\n\t\t\t\tauthtype: '',\n\t\t\t};\n\t\t\tresult.endpoint = endpointDetails;\n\t\t}\n\t\tif (event.event.toLowerCase() === 'endpointdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).extension = event.objectname;\n\t\t\t(result.endpoint as IExtensionDetails).state = this.getState(event.devicestate);\n\t\t} else if (event.event.toLowerCase() === 'authdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).password = event.password;\n\t\t\t(result.endpoint as IExtensionDetails).authtype = event.authtype;\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointdetailcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointDetailComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst { result } = this;\n\n\t\tthis.returnResolve({ result: result.endpoint } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Callback for indicatiing command execution status.\n\t * Received actionid for the first time.\n\t */\n\tonActionResult(error: any, result: any): void {\n\t\tif (error) {\n\t\t\tthis.logger.error({ msg: 'onActionResult()', error: JSON.stringify(error) });\n\t\t\tthis.returnReject(`error${error} while executing command`);\n\t\t} else {\n\t\t\t// Set up actionid for future reference in case of success.\n\t\t\tthis.actionid = result.actionid;\n\t\t}\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n\t\t\t\tthis.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `setupEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tresetEventHandlers(): void {\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.off('endpointlist', this);\n\t\t\t\tthis.connection.off('endpointlistcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.off('endpointdetail', this);\n\t\t\t\tthis.connection.off('authdetail', this);\n\t\t\t\tthis.connection.off('endpointdetailcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `resetEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync executeCommand(data: any): Promise<IVoipConnectorResult> {\n\t\tlet amiCommand = {};\n\t\t// set up the specific action based on the value of |Commands|\n\t\tif (this.commandText === Commands.extension_list.toString()) {\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoints',\n\t\t\t};\n\t\t} else if (this.commandText === Commands.extension_info.toString()) {\n\t\t\t// |pjsipshowendpoint| needs input parameter |endpoint| indicating\n\t\t\t// which endpoint information is to be queried.\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoint',\n\t\t\t\tendpoint: data.extension,\n\t\t\t};\n\t\t}\n\t\tthis.logger.debug({ msg: `executeCommand() executing AMI command ${JSON.stringify(amiCommand)}`, data });\n\t\tconst actionResultCallback = this.onActionResult.bind(this);\n\t\tconst eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n\t\treturn super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n\t}\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts"}},"code":"module.export({\n  PJSIPEndpoint: () => PJSIPEndpoint\n});\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Command, CommandType;\nmodule.link(\"../Command\", {\n  Command(v) {\n    Command = v;\n  },\n\n  CommandType(v) {\n    CommandType = v;\n  }\n\n}, 1);\nlet Logger;\nmodule.link(\"../../../../../lib/logger/Logger\", {\n  Logger(v) {\n    Logger = v;\n  }\n\n}, 2);\nlet Commands;\nmodule.link(\"../Commands\", {\n  Commands(v) {\n    Commands = v;\n  }\n\n}, 3);\nlet CallbackContext;\nmodule.link(\"./CallbackContext\", {\n  CallbackContext(v) {\n    CallbackContext = v;\n  }\n\n}, 4);\nlet EndpointState;\nmodule.link(\"../../../../../../definition/IVoipExtension\", {\n  EndpointState(v) {\n    EndpointState = v;\n  }\n\n}, 5);\n\nclass PJSIPEndpoint extends Command {\n  constructor(command, parametersNeeded, db) {\n    super(command, parametersNeeded, db);\n    this.logger = void 0;\n    this.logger = new Logger('PJSIPEndpoint');\n    this._type = CommandType.AMI;\n  }\n\n  getState(endpointState) {\n    /**\n     * When registered endpoint can be in following state\n     * Not in use : When endpoint has registered but not serving any call.\n     * Ringing : Registered and ringing\n     * Busy : endpoing is handling call.\n     *\n     * If any other state is seen, this function returns EndpointState.UNKNOWN;\n     */\n    let state = EndpointState.UNKNOWN;\n\n    switch (endpointState.toLowerCase()) {\n      case 'unavailable':\n        state = EndpointState.UNREGISTERED;\n        break;\n\n      case 'not in use':\n        state = EndpointState.REGISTERED;\n        break;\n\n      case 'ringing':\n        state = EndpointState.RINGING;\n        break;\n\n      case 'busy':\n        state = EndpointState.BUSY;\n        break;\n    }\n\n    return state;\n  }\n  /**\n   * Event handler for endpointlist event containing the information of the endpoints.\n   * @remark\n   * This event is generated as a result of the execution of |pjsipshowendpoints|\n   */\n\n\n  onEndpointList(event) {\n    if (event.actionid !== this.actionid) {\n      this.logger.error({\n        msg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n        eventActionId: event.actionid,\n        actionId: this.actionid\n      });\n      return;\n    } // A SIP address-of-record is a canonical address by which a user is known\n    // If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n\n\n    if (!(event !== null && event !== void 0 && event.aor.trim())) {\n      return;\n    }\n\n    const endPoint = {\n      extension: event.objectname,\n      state: this.getState(event.devicestate),\n      password: '',\n      authtype: ''\n    };\n    const {\n      result\n    } = this;\n\n    if (result.endpoints) {\n      result.endpoints.push(endPoint);\n    } else {\n      // create an array of endpoints in the result for\n      // the first time.\n      result.endpoints = [];\n      result.endpoints.push(endPoint);\n    }\n  }\n  /**\n   * Event handler for endpointlistcomplete event indicating that all the data\n   * is received.\n   */\n\n\n  onEndpointListComplete(event) {\n    if (event.actionid !== this.actionid) {\n      this.logger.error({\n        msg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n        eventActionId: event.actionid,\n        actionId: this.actionid\n      });\n      return;\n    }\n\n    this.resetEventHandlers();\n\n    const extensions = _.sortBy(this.result.endpoints, function (o) {\n      return o.extension;\n    });\n\n    this.returnResolve({\n      result: extensions\n    });\n  }\n  /**\n   * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n   * and authentication information.\n   * @remark\n   * This event is generated as a result of the execution of |pjsipshowendpoint|.\n   * We consolidate this endpointdetail and authdetail events because they are generated\n   * as a result of same command. Nevertheless, in future, if such implementation\n   * becomes difficult, it is recommended that there should be a separate handling\n   * for each event.\n   */\n\n\n  onEndpointInfo(event) {\n    if (event.actionid !== this.actionid) {\n      this.logger.error({\n        msg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n        eventActionId: event.actionid,\n        actionId: this.actionid\n      });\n      return;\n    }\n\n    const {\n      result\n    } = this;\n\n    if (!result.endpoint) {\n      const endpointDetails = {\n        extension: '',\n        state: '',\n        password: '',\n        authtype: ''\n      };\n      result.endpoint = endpointDetails;\n    }\n\n    if (event.event.toLowerCase() === 'endpointdetail') {\n      result.endpoint.extension = event.objectname;\n      result.endpoint.state = this.getState(event.devicestate);\n    } else if (event.event.toLowerCase() === 'authdetail') {\n      result.endpoint.password = event.password;\n      result.endpoint.authtype = event.authtype;\n    }\n  }\n  /**\n   * Event handler for endpointdetailcomplete event indicating that all the data\n   * is received.\n   */\n\n\n  onEndpointDetailComplete(event) {\n    if (event.actionid !== this.actionid) {\n      this.logger.error({\n        msg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n        eventActionId: event.actionid,\n        actionId: this.actionid\n      });\n      return;\n    }\n\n    this.resetEventHandlers();\n    const {\n      result\n    } = this;\n    this.returnResolve({\n      result: result.endpoint\n    });\n  }\n  /**\n   * Callback for indicatiing command execution status.\n   * Received actionid for the first time.\n   */\n\n\n  onActionResult(error, result) {\n    if (error) {\n      this.logger.error({\n        msg: 'onActionResult()',\n        error: JSON.stringify(error)\n      });\n      this.returnReject(\"error\".concat(error, \" while executing command\"));\n    } else {\n      // Set up actionid for future reference in case of success.\n      this.actionid = result.actionid;\n    }\n  }\n\n  setupEventHandlers() {\n    // Setup necessary command event handlers based on the command\n    switch (this.commandText) {\n      case Commands.extension_list.toString():\n        {\n          this.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n          this.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n          break;\n        }\n\n      case Commands.extension_info.toString():\n        {\n          this.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n          this.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n          this.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n          break;\n        }\n\n      default:\n        {\n          this.logger.error({\n            msg: \"setupEventHandlers() : Unimplemented \".concat(this.commandText)\n          });\n          break;\n        }\n    }\n  }\n\n  resetEventHandlers() {\n    switch (this.commandText) {\n      case Commands.extension_list.toString():\n        {\n          this.connection.off('endpointlist', this);\n          this.connection.off('endpointlistcomplete', this);\n          break;\n        }\n\n      case Commands.extension_info.toString():\n        {\n          this.connection.off('endpointdetail', this);\n          this.connection.off('authdetail', this);\n          this.connection.off('endpointdetailcomplete', this);\n          break;\n        }\n\n      default:\n        {\n          this.logger.error({\n            msg: \"resetEventHandlers() : Unimplemented \".concat(this.commandText)\n          });\n          break;\n        }\n    }\n  }\n\n  executeCommand(data) {\n    return Promise.asyncApply(() => {\n      let amiCommand = {}; // set up the specific action based on the value of |Commands|\n\n      if (this.commandText === Commands.extension_list.toString()) {\n        amiCommand = {\n          action: 'pjsipshowendpoints'\n        };\n      } else if (this.commandText === Commands.extension_info.toString()) {\n        // |pjsipshowendpoint| needs input parameter |endpoint| indicating\n        // which endpoint information is to be queried.\n        amiCommand = {\n          action: 'pjsipshowendpoint',\n          endpoint: data.extension\n        };\n      }\n\n      this.logger.debug({\n        msg: \"executeCommand() executing AMI command \".concat(JSON.stringify(amiCommand)),\n        data\n      });\n      const actionResultCallback = this.onActionResult.bind(this);\n      const eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n      return super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n    });\n  }\n\n}","map":{"version":3,"sources":["server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for handling PJSIP endpoints.\n * @remarks\n * Some design notes :\n * 1. CommandFactory creates the child classes of the |Command| class and\n * \t  returns a reference to |Command|\n * 2. |CommandHandler| class call executeCommand method of |Command| class, which\n *    gets overriden here.\n * 3. Consumers of this class create the instance based on |Commands| object but\n *    specific command object 'knows' about asterisk-ami command. Reason for doing this is\n *    that the consumer does not and should not know about the pbx specific commands\n * \t  used for fetching the information. e.g for endpoint list and endpoint info,\n * \t  it uses pjsipshowendpoints and pjsipshowendpoint.\n * 4. Asterisk responds asynchronously and it responds using events. Command specific\n *    event handling is implemented by this class.\n * 5. Every execution of command takes action-callback, which tells whether the command can be\n *    executed or there is an error. In case of success, it ends set of events\n *    the completion of which is indicated by <action>completed event. e.g while fetching the endpoint,\n *    i.e for executing |pjsipshowendpoint|  asterisk sends the different parts of i\n *    nformation in different events. event |endpointdetail| indicates\n *    endpoint name, devicestate etc. |authdetail| indicates type of authentication, password and other\n *    auth related information. At the end of the series of these events, Asterisk sends |endpointdetailcomplete|\n * \t  event. At this point of time, promise, on which the consumer is waiting can be resolved.\n * 6. This class could use asynchronous callbacks. But because the connector will be used extensively by REST layer\n *    we have taken promise based approach. Promise is returned as a part of executeCommand. Caller would wait for\n *    the completion/rejection. This class will reject the promise based on error or resolve it in <command>complete\n *    event.\n * 7. Important to note that the intermediate events containing a result part for an execution of a particular command\n *    have same actionid, which is received by this class as a successful execution of a command in actionResultCallback.\n */\nimport _ from 'underscore';\nimport { Db } from 'mongodb';\n\nimport { Command, CommandType } from '../Command';\nimport { Logger } from '../../../../../lib/logger/Logger';\nimport { Commands } from '../Commands';\nimport { CallbackContext } from './CallbackContext';\nimport { EndpointState, IExtensionDetails } from '../../../../../../definition/IVoipExtension';\nimport { IVoipConnectorResult } from '../../../../../../definition/IVoipConnectorResult';\n\nexport class PJSIPEndpoint extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis.logger = new Logger('PJSIPEndpoint');\n\t\tthis._type = CommandType.AMI;\n\t}\n\n\tprivate getState(endpointState: string): EndpointState {\n\t\t/**\n\t\t * When registered endpoint can be in following state\n\t\t * Not in use : When endpoint has registered but not serving any call.\n\t\t * Ringing : Registered and ringing\n\t\t * Busy : endpoing is handling call.\n\t\t *\n\t\t * If any other state is seen, this function returns EndpointState.UNKNOWN;\n\t\t */\n\n\t\tlet state: EndpointState = EndpointState.UNKNOWN;\n\t\tswitch (endpointState.toLowerCase()) {\n\t\t\tcase 'unavailable':\n\t\t\t\tstate = EndpointState.UNREGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'not in use':\n\t\t\t\tstate = EndpointState.REGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'ringing':\n\t\t\t\tstate = EndpointState.RINGING;\n\t\t\t\tbreak;\n\t\t\tcase 'busy':\n\t\t\t\tstate = EndpointState.BUSY;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Event handler for endpointlist event containing the information of the endpoints.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoints|\n\t */\n\tonEndpointList(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// A SIP address-of-record is a canonical address by which a user is known\n\t\t// If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n\t\tif (!event?.aor.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst endPoint: IExtensionDetails = {\n\t\t\textension: event.objectname,\n\t\t\tstate: this.getState(event.devicestate),\n\t\t\tpassword: '',\n\t\t\tauthtype: '',\n\t\t};\n\t\tconst { result } = this;\n\t\tif (result.endpoints) {\n\t\t\tresult.endpoints.push(endPoint);\n\t\t} else {\n\t\t\t// create an array of endpoints in the result for\n\t\t\t// the first time.\n\t\t\tresult.endpoints = [];\n\t\t\tresult.endpoints.push(endPoint);\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointlistcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointListComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst extensions = _.sortBy(this.result.endpoints, function (o: any) {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n\t * and authentication information.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoint|.\n\t * We consolidate this endpointdetail and authdetail events because they are generated\n\t * as a result of same command. Nevertheless, in future, if such implementation\n\t * becomes difficult, it is recommended that there should be a separate handling\n\t * for each event.\n\t */\n\tonEndpointInfo(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst { result } = this;\n\n\t\tif (!result.endpoint) {\n\t\t\tconst endpointDetails: IExtensionDetails = {\n\t\t\t\textension: '',\n\t\t\t\tstate: '',\n\t\t\t\tpassword: '',\n\t\t\t\tauthtype: '',\n\t\t\t};\n\t\t\tresult.endpoint = endpointDetails;\n\t\t}\n\t\tif (event.event.toLowerCase() === 'endpointdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).extension = event.objectname;\n\t\t\t(result.endpoint as IExtensionDetails).state = this.getState(event.devicestate);\n\t\t} else if (event.event.toLowerCase() === 'authdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).password = event.password;\n\t\t\t(result.endpoint as IExtensionDetails).authtype = event.authtype;\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointdetailcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointDetailComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst { result } = this;\n\n\t\tthis.returnResolve({ result: result.endpoint } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Callback for indicatiing command execution status.\n\t * Received actionid for the first time.\n\t */\n\tonActionResult(error: any, result: any): void {\n\t\tif (error) {\n\t\t\tthis.logger.error({ msg: 'onActionResult()', error: JSON.stringify(error) });\n\t\t\tthis.returnReject(`error${error} while executing command`);\n\t\t} else {\n\t\t\t// Set up actionid for future reference in case of success.\n\t\t\tthis.actionid = result.actionid;\n\t\t}\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n\t\t\t\tthis.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `setupEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tresetEventHandlers(): void {\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.off('endpointlist', this);\n\t\t\t\tthis.connection.off('endpointlistcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.off('endpointdetail', this);\n\t\t\t\tthis.connection.off('authdetail', this);\n\t\t\t\tthis.connection.off('endpointdetailcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `resetEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync executeCommand(data: any): Promise<IVoipConnectorResult> {\n\t\tlet amiCommand = {};\n\t\t// set up the specific action based on the value of |Commands|\n\t\tif (this.commandText === Commands.extension_list.toString()) {\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoints',\n\t\t\t};\n\t\t} else if (this.commandText === Commands.extension_info.toString()) {\n\t\t\t// |pjsipshowendpoint| needs input parameter |endpoint| indicating\n\t\t\t// which endpoint information is to be queried.\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoint',\n\t\t\t\tendpoint: data.extension,\n\t\t\t};\n\t\t}\n\t\tthis.logger.debug({ msg: `executeCommand() executing AMI command ${JSON.stringify(amiCommand)}`, data });\n\t\tconst actionResultCallback = this.onActionResult.bind(this);\n\t\tconst eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n\t\treturn super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n\t}\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"952f351ad367d708746300e601bf7a422d03769b"}
