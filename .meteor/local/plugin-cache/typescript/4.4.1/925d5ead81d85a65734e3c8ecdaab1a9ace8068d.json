{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/server-connection.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/api/server/v1/voip/server-connection.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/server-connection.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/server-connection.ts","sourceRoot":"","sources":["app/api/server/v1/voip/server-connection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAChC,OAAO,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAC;AAEjD,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,uCAAuC,EACvC,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,qCAAqC,CAAC,EAAE,EACpF;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,aAAa,EAAE,EACpB,KAAK,CAAC,eAAe,CAAC;YACrB,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM;SAChB,CAAC,CACF,CAAC;QACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAChE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7F,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iCAAiC,EACjC,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,qCAAqC,CAAC,EAAE,EACpF;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,aAAa,EAAE,EACpB,KAAK,CAAC,eAAe,CAAC;YACrB,YAAY,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACjC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;SACzB,CAAC,CACF,CAAC;QACF,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAChE,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,EAAE;YAC7C,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;SAC7D;QACD,IAAI,SAAS,GAAG,YAAsB,CAAC;QACvC,IAAI,CAAC,SAAS,EAAE;YACf,2CAA2C;YAC3C,0EAA0E;YAC1E,8DAA8D;YAC9D,IAAI,QAAQ,CAAC,IAAc,CAAC,KAAK,GAAG,EAAE;gBACrC,SAAS,GAAG,SAAS,IAAI,IAAI,IAAI,IAAK,IAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;aACzE;iBAAM;gBACN,SAAS,GAAG,SAAS,IAAI,IAAK,IAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;aACjE;SACD;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC,CAAC;IACxE,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\nimport { Voip } from '../../../../../server/sdk';\n\nAPI.v1.addRoute(\n\t'voip/managementServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\thost: String,\n\t\t\t\t\tport: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t\tpassword: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { host, port, username, password } = this.requestParams();\n\t\t\treturn API.v1.success(await Voip.checkManagementConnection(host, port, username, password));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/callServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\twebsocketUrl: Match.Maybe(String),\n\t\t\t\t\thost: Match.Maybe(String),\n\t\t\t\t\tport: Match.Maybe(String),\n\t\t\t\t\tpath: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { websocketUrl, host, port, path } = this.requestParams();\n\t\t\tif (!websocketUrl && !(host && port && path)) {\n\t\t\t\treturn API.v1.failure('Incorrect / Insufficient Parameters');\n\t\t\t}\n\t\t\tlet socketUrl = websocketUrl as string;\n\t\t\tif (!socketUrl) {\n\t\t\t\t// We will assume that it is always secure.\n\t\t\t\t// This is because you can not have webRTC working with non-secure server.\n\t\t\t\t// It works on non-secure server if it is tested on localhost.\n\t\t\t\tif (parseInt(port as string) !== 443) {\n\t\t\t\t\tsocketUrl = `wss://${host}:${port}/${(path as string).replace('/', '')}`;\n\t\t\t\t} else {\n\t\t\t\t\tsocketUrl = `wss://${host}/${(path as string).replace('/', '')}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success(await Voip.checkCallserverConnection(socketUrl));\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/server-connection.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/voip/server-connection.ts"}},"code":"let Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet API;\nmodule.link(\"../../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 1);\nlet Voip;\nmodule.link(\"../../../../../server/sdk\", {\n  Voip(v) {\n    Voip = v;\n  }\n\n}, 2);\nAPI.v1.addRoute('voip/managementServer/checkConnection', {\n  authRequired: true,\n  permissionsRequired: ['manage-voip-contact-center-settings']\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.requestParams(), Match.ObjectIncluding({\n        host: String,\n        port: String,\n        username: String,\n        password: String\n      }));\n      const {\n        host,\n        port,\n        username,\n        password\n      } = this.requestParams();\n      return API.v1.success(Promise.await(Voip.checkManagementConnection(host, port, username, password)));\n    });\n  }\n\n});\nAPI.v1.addRoute('voip/callServer/checkConnection', {\n  authRequired: true,\n  permissionsRequired: ['manage-voip-contact-center-settings']\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.requestParams(), Match.ObjectIncluding({\n        websocketUrl: Match.Maybe(String),\n        host: Match.Maybe(String),\n        port: Match.Maybe(String),\n        path: Match.Maybe(String)\n      }));\n      const {\n        websocketUrl,\n        host,\n        port,\n        path\n      } = this.requestParams();\n\n      if (!websocketUrl && !(host && port && path)) {\n        return API.v1.failure('Incorrect / Insufficient Parameters');\n      }\n\n      let socketUrl = websocketUrl;\n\n      if (!socketUrl) {\n        // We will assume that it is always secure.\n        // This is because you can not have webRTC working with non-secure server.\n        // It works on non-secure server if it is tested on localhost.\n        if (parseInt(port) !== 443) {\n          socketUrl = \"wss://\".concat(host, \":\").concat(port, \"/\").concat(path.replace('/', ''));\n        } else {\n          socketUrl = \"wss://\".concat(host, \"/\").concat(path.replace('/', ''));\n        }\n      }\n\n      return API.v1.success(Promise.await(Voip.checkCallserverConnection(socketUrl)));\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/voip/server-connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\nimport { Voip } from '../../../../../server/sdk';\n\nAPI.v1.addRoute(\n\t'voip/managementServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\thost: String,\n\t\t\t\t\tport: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t\tpassword: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { host, port, username, password } = this.requestParams();\n\t\t\treturn API.v1.success(await Voip.checkManagementConnection(host, port, username, password));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/callServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\twebsocketUrl: Match.Maybe(String),\n\t\t\t\t\thost: Match.Maybe(String),\n\t\t\t\t\tport: Match.Maybe(String),\n\t\t\t\t\tpath: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { websocketUrl, host, port, path } = this.requestParams();\n\t\t\tif (!websocketUrl && !(host && port && path)) {\n\t\t\t\treturn API.v1.failure('Incorrect / Insufficient Parameters');\n\t\t\t}\n\t\t\tlet socketUrl = websocketUrl as string;\n\t\t\tif (!socketUrl) {\n\t\t\t\t// We will assume that it is always secure.\n\t\t\t\t// This is because you can not have webRTC working with non-secure server.\n\t\t\t\t// It works on non-secure server if it is tested on localhost.\n\t\t\t\tif (parseInt(port as string) !== 443) {\n\t\t\t\t\tsocketUrl = `wss://${host}:${port}/${(path as string).replace('/', '')}`;\n\t\t\t\t} else {\n\t\t\t\t\tsocketUrl = `wss://${host}/${(path as string).replace('/', '')}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success(await Voip.checkCallserverConnection(socketUrl));\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"925d5ead81d85a65734e3c8ecdaab1a9ace8068d"}
