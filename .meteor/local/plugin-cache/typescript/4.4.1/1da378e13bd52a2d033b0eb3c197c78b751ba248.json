{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/updateMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/updateMessage.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/updateMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/updateMessage.ts","sourceRoot":"","sources":["app/lib/server/functions/updateMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { parser } from '@rocket.chat/message-parser';\n\nimport { Messages, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { Apps } from '../../../apps/server';\nimport { parseUrlsInMessage } from './parseUrlsInMessage';\nimport { IMessage, IMessageEdited } from '../../../../definition/IMessage';\nimport { IUser } from '../../../../definition/IUser';\n\nconst { DISABLE_MESSAGE_PARSER = 'false' } = process.env;\n\nexport const updateMessage = function (message: IMessage, user: IUser, originalMessage?: IMessage): void {\n\tif (!originalMessage) {\n\t\toriginalMessage = Messages.findOneById(message._id);\n\t}\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps && Apps.isLoaded()) {\n\t\tconst appMessage = Object.assign({}, originalMessage, message);\n\n\t\tconst prevent = Promise.await(Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageUpdatedPrevent', appMessage));\n\t\tif (prevent) {\n\t\t\tthrow new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n\t\t}\n\n\t\tlet result;\n\t\tresult = Promise.await(Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageUpdatedExtend', appMessage));\n\t\tresult = Promise.await(Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageUpdatedModify', result));\n\n\t\tif (typeof result === 'object') {\n\t\t\tmessage = Object.assign(appMessage, result);\n\t\t}\n\t}\n\n\t// If we keep history of edits, insert a new message to store history information\n\tif (settings.get('Message_KeepHistory')) {\n\t\tMessages.cloneAndSaveAsHistoryById(message._id, user);\n\t}\n\n\t(message as IMessageEdited).editedAt = new Date();\n\t(message as IMessageEdited).editedBy = {\n\t\t_id: user._id,\n\t\tusername: user.username,\n\t};\n\n\tparseUrlsInMessage(message);\n\n\tmessage = callbacks.run('beforeSaveMessage', message);\n\n\ttry {\n\t\tif (message.msg && DISABLE_MESSAGE_PARSER !== 'true') {\n\t\t\tmessage.md = parser(message.msg);\n\t\t}\n\t} catch (e: unknown) {\n\t\tSystemLogger.error(String(e)); // errors logged while the parser is at experimental stage\n\t}\n\n\tconst { _id, ...editedMessage } = message;\n\n\tMessages.update({ _id }, { $set: editedMessage });\n\n\tconst room = Rooms.findOneById(message.rid);\n\n\tif (Apps?.isLoaded()) {\n\t\t// This returns a promise, but it won't mutate anything about the message\n\t\t// so, we don't really care if it is successful or fails\n\t\tApps.getBridges()?.getListenerBridge().messageEvent('IPostMessageUpdated', message);\n\t}\n\n\tMeteor.defer(function () {\n\t\tcallbacks.run('afterSaveMessage', Messages.findOneById(_id), room, user._id);\n\t});\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/updateMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/updateMessage.ts"}},"code":"const _excluded = [\"_id\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\nmodule.export({\n  updateMessage: () => updateMessage\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet parser;\nmodule.link(\"@rocket.chat/message-parser\", {\n  parser(v) {\n    parser = v;\n  }\n\n}, 1);\nlet Messages, Rooms;\nmodule.link(\"../../../models/server\", {\n  Messages(v) {\n    Messages = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 2);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 3);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 4);\nlet SystemLogger;\nmodule.link(\"../../../../server/lib/logger/system\", {\n  SystemLogger(v) {\n    SystemLogger = v;\n  }\n\n}, 5);\nlet Apps;\nmodule.link(\"../../../apps/server\", {\n  Apps(v) {\n    Apps = v;\n  }\n\n}, 6);\nlet parseUrlsInMessage;\nmodule.link(\"./parseUrlsInMessage\", {\n  parseUrlsInMessage(v) {\n    parseUrlsInMessage = v;\n  }\n\n}, 7);\nconst {\n  DISABLE_MESSAGE_PARSER = 'false'\n} = process.env;\n\nconst updateMessage = function (message, user, originalMessage) {\n  var _Apps;\n\n  if (!originalMessage) {\n    originalMessage = Messages.findOneById(message._id);\n  } // For the Rocket.Chat Apps :)\n\n\n  if (message && Apps && Apps.isLoaded()) {\n    var _Apps$getBridges, _Apps$getBridges2, _Apps$getBridges3;\n\n    const appMessage = Object.assign({}, originalMessage, message);\n    const prevent = Promise.await((_Apps$getBridges = Apps.getBridges()) === null || _Apps$getBridges === void 0 ? void 0 : _Apps$getBridges.getListenerBridge().messageEvent('IPreMessageUpdatedPrevent', appMessage));\n\n    if (prevent) {\n      throw new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n    }\n\n    let result;\n    result = Promise.await((_Apps$getBridges2 = Apps.getBridges()) === null || _Apps$getBridges2 === void 0 ? void 0 : _Apps$getBridges2.getListenerBridge().messageEvent('IPreMessageUpdatedExtend', appMessage));\n    result = Promise.await((_Apps$getBridges3 = Apps.getBridges()) === null || _Apps$getBridges3 === void 0 ? void 0 : _Apps$getBridges3.getListenerBridge().messageEvent('IPreMessageUpdatedModify', result));\n\n    if (typeof result === 'object') {\n      message = Object.assign(appMessage, result);\n    }\n  } // If we keep history of edits, insert a new message to store history information\n\n\n  if (settings.get('Message_KeepHistory')) {\n    Messages.cloneAndSaveAsHistoryById(message._id, user);\n  }\n\n  message.editedAt = new Date();\n  message.editedBy = {\n    _id: user._id,\n    username: user.username\n  };\n  parseUrlsInMessage(message);\n  message = callbacks.run('beforeSaveMessage', message);\n\n  try {\n    if (message.msg && DISABLE_MESSAGE_PARSER !== 'true') {\n      message.md = parser(message.msg);\n    }\n  } catch (e) {\n    SystemLogger.error(String(e)); // errors logged while the parser is at experimental stage\n  }\n\n  const {\n    _id\n  } = message,\n        editedMessage = _objectWithoutProperties(message, _excluded);\n\n  Messages.update({\n    _id\n  }, {\n    $set: editedMessage\n  });\n  const room = Rooms.findOneById(message.rid);\n\n  if ((_Apps = Apps) !== null && _Apps !== void 0 && _Apps.isLoaded()) {\n    var _Apps$getBridges4;\n\n    // This returns a promise, but it won't mutate anything about the message\n    // so, we don't really care if it is successful or fails\n    (_Apps$getBridges4 = Apps.getBridges()) === null || _Apps$getBridges4 === void 0 ? void 0 : _Apps$getBridges4.getListenerBridge().messageEvent('IPostMessageUpdated', message);\n  }\n\n  Meteor.defer(function () {\n    callbacks.run('afterSaveMessage', Messages.findOneById(_id), room, user._id);\n  });\n};","map":{"version":3,"sources":["app/lib/server/functions/updateMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { parser } from '@rocket.chat/message-parser';\n\nimport { Messages, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { Apps } from '../../../apps/server';\nimport { parseUrlsInMessage } from './parseUrlsInMessage';\nimport { IMessage, IMessageEdited } from '../../../../definition/IMessage';\nimport { IUser } from '../../../../definition/IUser';\n\nconst { DISABLE_MESSAGE_PARSER = 'false' } = process.env;\n\nexport const updateMessage = function (message: IMessage, user: IUser, originalMessage?: IMessage): void {\n\tif (!originalMessage) {\n\t\toriginalMessage = Messages.findOneById(message._id);\n\t}\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps && Apps.isLoaded()) {\n\t\tconst appMessage = Object.assign({}, originalMessage, message);\n\n\t\tconst prevent = Promise.await(Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageUpdatedPrevent', appMessage));\n\t\tif (prevent) {\n\t\t\tthrow new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n\t\t}\n\n\t\tlet result;\n\t\tresult = Promise.await(Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageUpdatedExtend', appMessage));\n\t\tresult = Promise.await(Apps.getBridges()?.getListenerBridge().messageEvent('IPreMessageUpdatedModify', result));\n\n\t\tif (typeof result === 'object') {\n\t\t\tmessage = Object.assign(appMessage, result);\n\t\t}\n\t}\n\n\t// If we keep history of edits, insert a new message to store history information\n\tif (settings.get('Message_KeepHistory')) {\n\t\tMessages.cloneAndSaveAsHistoryById(message._id, user);\n\t}\n\n\t(message as IMessageEdited).editedAt = new Date();\n\t(message as IMessageEdited).editedBy = {\n\t\t_id: user._id,\n\t\tusername: user.username,\n\t};\n\n\tparseUrlsInMessage(message);\n\n\tmessage = callbacks.run('beforeSaveMessage', message);\n\n\ttry {\n\t\tif (message.msg && DISABLE_MESSAGE_PARSER !== 'true') {\n\t\t\tmessage.md = parser(message.msg);\n\t\t}\n\t} catch (e: unknown) {\n\t\tSystemLogger.error(String(e)); // errors logged while the parser is at experimental stage\n\t}\n\n\tconst { _id, ...editedMessage } = message;\n\n\tMessages.update({ _id }, { $set: editedMessage });\n\n\tconst room = Rooms.findOneById(message.rid);\n\n\tif (Apps?.isLoaded()) {\n\t\t// This returns a promise, but it won't mutate anything about the message\n\t\t// so, we don't really care if it is successful or fails\n\t\tApps.getBridges()?.getListenerBridge().messageEvent('IPostMessageUpdated', message);\n\t}\n\n\tMeteor.defer(function () {\n\t\tcallbacks.run('afterSaveMessage', Messages.findOneById(_id), room, user._id);\n\t});\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"1da378e13bd52a2d033b0eb3c197c78b751ba248"}
