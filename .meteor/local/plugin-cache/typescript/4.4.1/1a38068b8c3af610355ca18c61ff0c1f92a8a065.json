{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","sourceRoot":"","sources":["app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,CAAC,MAAM,YAAY,CAAC;AAI3B,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAErE,MAAM,CAAC,MAAM,iCAAiC,GAAG,SAAS,kCAAkC,CAAC,EAC5F,aAAa,GAAG,EAAE,EAClB,QAAQ,GAAG,EAAE,EACb,IAAI,GAAG,EAAE,EACT,qBAAqB,GAAG,KAAK,EAC7B,WAAW,GAAG,IAAI,EAClB,YAAY,GAAG,IAAI,GACnB;IACA,IAAI,IAAW,CAAC;IAEhB,2EAA2E;IAC3E,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QAC7B,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACzC;SAAM,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,KAAK,GAAG,EAAE;QACpD,qFAAqF;QACrF,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAErC,IAAI,QAAe,CAAC;QACpB,IAAI,qBAAqB,EAAE;YAC1B,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACN,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC;gBACxB,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aAChD,CAAC,CAAC;SACH;QAED,MAAM,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC5F,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAE9B,yDAAyD;QACzD,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtB,6EAA6E;YAC7E,wCAAwC;YACxC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAC1B,IAAI,YAAY,EAAE;oBACjB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;iBAC1C;qBAAM;oBACN,OAAO;iBACP;aACD;YAED,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE;gBACtC,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACtE,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;SACH;KACD;SAAM;QACN,qDAAqD;QACrD,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACzC;IAED,uEAAuE;IACvE,IAAI,CAAC,IAAI,IAAI,YAAY,EAAE;QAC1B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;KAC1C;SAAM,IAAI,CAAC,IAAI,EAAE;QACjB,OAAO;KACP;IAED,qEAAqE;IACrE,iEAAiE;IACjE,qCAAqC;IACrC,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE;QAC5B,IAAI,YAAY,EAAE;YACjB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAC1C;aAAM;YACN,OAAO;SACP;KACD;IAED,gFAAgF;IAChF,oDAAoD;IACpD,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,WAAW,EAAE;QAClC,MAAM,GAAG,GAAG,aAAa,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QAE5E,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE;gBAC/B,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;SACH;KACD;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { IRoom } from '../../../../definition/IRoom';\nimport { IUser } from '../../../../definition/IUser';\nimport { Rooms, Users, Subscriptions } from '../../../models/server';\n\nexport const getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin({\n\tcurrentUserId = '',\n\tnameOrId = '',\n\ttype = '',\n\ttryDirectByUserIdOnly = false,\n\tjoinChannel = true,\n\terrorOnEmpty = true,\n}): any {\n\tlet room: IRoom;\n\n\t// If the nameOrId starts with #, then let's try to find a channel or group\n\tif (nameOrId.startsWith('#')) {\n\t\tnameOrId = nameOrId.substring(1);\n\t\troom = Rooms.findOneByIdOrName(nameOrId);\n\t} else if (nameOrId.startsWith('@') || type === 'd') {\n\t\t// If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n\t\tnameOrId = nameOrId.replace('@', '');\n\n\t\tlet roomUser: IUser;\n\t\tif (tryDirectByUserIdOnly) {\n\t\t\troomUser = Users.findOneById(nameOrId);\n\t\t} else {\n\t\t\troomUser = Users.findOne({\n\t\t\t\t$or: [{ _id: nameOrId }, { username: nameOrId }],\n\t\t\t});\n\t\t}\n\n\t\tconst rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;\n\t\troom = Rooms.findOneById(rid);\n\n\t\t// If the room hasn't been found yet, let's try some more\n\t\tif (!_.isObject(room)) {\n\t\t\t// If the roomUser wasn't found, then there's no destination to point towards\n\t\t\t// so return out based upon errorOnEmpty\n\t\t\tif (!_.isObject(roomUser)) {\n\t\t\t\tif (errorOnEmpty) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troom = Meteor.runAsUser(currentUserId, function () {\n\t\t\t\tconst { rid } = Meteor.call('createDirectMessage', roomUser.username);\n\t\t\t\treturn Rooms.findOneById(rid);\n\t\t\t});\n\t\t}\n\t} else {\n\t\t// Otherwise, we'll treat this as a channel or group.\n\t\troom = Rooms.findOneByIdOrName(nameOrId);\n\t}\n\n\t// If no room was found, handle the room return based upon errorOnEmpty\n\tif (!room && errorOnEmpty) {\n\t\tthrow new Meteor.Error('invalid-channel');\n\t} else if (!room) {\n\t\treturn;\n\t}\n\n\t// If a room was found and they provided a type to search, then check\n\t// and if the type found isn't what we're looking for then handle\n\t// the return based upon errorOnEmpty\n\tif (type && room.t !== type) {\n\t\tif (errorOnEmpty) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// If the room type is channel and joinChannel has been passed, try to join them\n\t// if they can't join the room, this will error out!\n\tif (room.t === 'c' && joinChannel) {\n\t\tconst sub = Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);\n\n\t\tif (!sub) {\n\t\t\tMeteor.runAsUser(currentUserId, function () {\n\t\t\t\treturn Meteor.call('joinRoom', room._id);\n\t\t\t});\n\t\t}\n\t}\n\n\treturn room;\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts"}},"code":"module.export({\n  getRoomByNameOrIdWithOptionToJoin: () => getRoomByNameOrIdWithOptionToJoin\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Rooms, Users, Subscriptions;\nmodule.link(\"../../../models/server\", {\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  }\n\n}, 2);\n\nconst getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin(_ref) {\n  let {\n    currentUserId = '',\n    nameOrId = '',\n    type = '',\n    tryDirectByUserIdOnly = false,\n    joinChannel = true,\n    errorOnEmpty = true\n  } = _ref;\n  let room; // If the nameOrId starts with #, then let's try to find a channel or group\n\n  if (nameOrId.startsWith('#')) {\n    nameOrId = nameOrId.substring(1);\n    room = Rooms.findOneByIdOrName(nameOrId);\n  } else if (nameOrId.startsWith('@') || type === 'd') {\n    // If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n    nameOrId = nameOrId.replace('@', '');\n    let roomUser;\n\n    if (tryDirectByUserIdOnly) {\n      roomUser = Users.findOneById(nameOrId);\n    } else {\n      roomUser = Users.findOne({\n        $or: [{\n          _id: nameOrId\n        }, {\n          username: nameOrId\n        }]\n      });\n    }\n\n    const rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;\n    room = Rooms.findOneById(rid); // If the room hasn't been found yet, let's try some more\n\n    if (!_.isObject(room)) {\n      // If the roomUser wasn't found, then there's no destination to point towards\n      // so return out based upon errorOnEmpty\n      if (!_.isObject(roomUser)) {\n        if (errorOnEmpty) {\n          throw new Meteor.Error('invalid-channel');\n        } else {\n          return;\n        }\n      }\n\n      room = Meteor.runAsUser(currentUserId, function () {\n        const {\n          rid\n        } = Meteor.call('createDirectMessage', roomUser.username);\n        return Rooms.findOneById(rid);\n      });\n    }\n  } else {\n    // Otherwise, we'll treat this as a channel or group.\n    room = Rooms.findOneByIdOrName(nameOrId);\n  } // If no room was found, handle the room return based upon errorOnEmpty\n\n\n  if (!room && errorOnEmpty) {\n    throw new Meteor.Error('invalid-channel');\n  } else if (!room) {\n    return;\n  } // If a room was found and they provided a type to search, then check\n  // and if the type found isn't what we're looking for then handle\n  // the return based upon errorOnEmpty\n\n\n  if (type && room.t !== type) {\n    if (errorOnEmpty) {\n      throw new Meteor.Error('invalid-channel');\n    } else {\n      return;\n    }\n  } // If the room type is channel and joinChannel has been passed, try to join them\n  // if they can't join the room, this will error out!\n\n\n  if (room.t === 'c' && joinChannel) {\n    const sub = Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);\n\n    if (!sub) {\n      Meteor.runAsUser(currentUserId, function () {\n        return Meteor.call('joinRoom', room._id);\n      });\n    }\n  }\n\n  return room;\n};","map":{"version":3,"sources":["app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { IRoom } from '../../../../definition/IRoom';\nimport { IUser } from '../../../../definition/IUser';\nimport { Rooms, Users, Subscriptions } from '../../../models/server';\n\nexport const getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin({\n\tcurrentUserId = '',\n\tnameOrId = '',\n\ttype = '',\n\ttryDirectByUserIdOnly = false,\n\tjoinChannel = true,\n\terrorOnEmpty = true,\n}): any {\n\tlet room: IRoom;\n\n\t// If the nameOrId starts with #, then let's try to find a channel or group\n\tif (nameOrId.startsWith('#')) {\n\t\tnameOrId = nameOrId.substring(1);\n\t\troom = Rooms.findOneByIdOrName(nameOrId);\n\t} else if (nameOrId.startsWith('@') || type === 'd') {\n\t\t// If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n\t\tnameOrId = nameOrId.replace('@', '');\n\n\t\tlet roomUser: IUser;\n\t\tif (tryDirectByUserIdOnly) {\n\t\t\troomUser = Users.findOneById(nameOrId);\n\t\t} else {\n\t\t\troomUser = Users.findOne({\n\t\t\t\t$or: [{ _id: nameOrId }, { username: nameOrId }],\n\t\t\t});\n\t\t}\n\n\t\tconst rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;\n\t\troom = Rooms.findOneById(rid);\n\n\t\t// If the room hasn't been found yet, let's try some more\n\t\tif (!_.isObject(room)) {\n\t\t\t// If the roomUser wasn't found, then there's no destination to point towards\n\t\t\t// so return out based upon errorOnEmpty\n\t\t\tif (!_.isObject(roomUser)) {\n\t\t\t\tif (errorOnEmpty) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troom = Meteor.runAsUser(currentUserId, function () {\n\t\t\t\tconst { rid } = Meteor.call('createDirectMessage', roomUser.username);\n\t\t\t\treturn Rooms.findOneById(rid);\n\t\t\t});\n\t\t}\n\t} else {\n\t\t// Otherwise, we'll treat this as a channel or group.\n\t\troom = Rooms.findOneByIdOrName(nameOrId);\n\t}\n\n\t// If no room was found, handle the room return based upon errorOnEmpty\n\tif (!room && errorOnEmpty) {\n\t\tthrow new Meteor.Error('invalid-channel');\n\t} else if (!room) {\n\t\treturn;\n\t}\n\n\t// If a room was found and they provided a type to search, then check\n\t// and if the type found isn't what we're looking for then handle\n\t// the return based upon errorOnEmpty\n\tif (type && room.t !== type) {\n\t\tif (errorOnEmpty) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// If the room type is channel and joinChannel has been passed, try to join them\n\t// if they can't join the room, this will error out!\n\tif (room.t === 'c' && joinChannel) {\n\t\tconst sub = Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);\n\n\t\tif (!sub) {\n\t\t\tMeteor.runAsUser(currentUserId, function () {\n\t\t\t\treturn Meteor.call('joinRoom', room._id);\n\t\t\t});\n\t\t}\n\t}\n\n\treturn room;\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"1a38068b8c3af610355ca18c61ff0c1f92a8a065"}
