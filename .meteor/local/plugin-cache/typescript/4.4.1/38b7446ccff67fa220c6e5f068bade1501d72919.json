{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/checkUsernameAvailability.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/checkUsernameAvailability.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/checkUsernameAvailability.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/checkUsernameAvailability.ts","sourceRoot":"","sources":["app/lib/server/functions/checkUsernameAvailability.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,CAAC,MAAM,mBAAmB,CAAC;AAClC,OAAO,CAAC,MAAM,YAAY,CAAC;AAC3B,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAE3D,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAC9C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,IAAI,iBAAiB,GAAa,EAAE,CAAC;AAErC,MAAM,QAAQ,GAAG,CAAC,QAAgB,EAAU,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAErG,QAAQ,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,KAAa,EAAE,EAAE;IAChE,iBAAiB,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC5E,CAAC,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,CAAC,QAAgB,EAAE,iBAA2B,EAAoB,EAAE,CAC7F,iBAAiB,CAAC,MAAM,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAErI,MAAM,CAAC,MAAM,yBAAyB,GAAG,UAAU,QAAgB;IAClE,IAAI,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;QAC9E,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,gCAAgC,EAAE;YACvG,MAAM,EAAE,2BAA2B;YACnC,KAAK,EAAE,QAAQ;SACf,CAAC,CAAC;KACH;IAED,6CAA6C;IAC7C,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CACxC;QACC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC;KAC5B,EACD,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CACtB,CAAC;IACF,IAAI,YAAY,EAAE;QACjB,OAAO,KAAK,CAAC;KACb;IAED,6CAA6C;IAC7C,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACtG,IAAI,YAAY,EAAE;QACjB,OAAO,KAAK,CAAC;KACb;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport s from 'underscore.string';\nimport _ from 'underscore';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { settings } from '../../../settings/server';\nimport { Team } from '../../../../server/sdk';\nimport { validateName } from './validateName';\n\nlet usernameBlackList: RegExp[] = [];\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\n\nsettings.watch('Accounts_BlockedUsernameList', (value: string) => {\n\tusernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n});\n\nconst usernameIsBlocked = (username: string, usernameBlackList: RegExp[]): boolean | number =>\n\tusernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(s.trim(escapeRegExp(username))));\n\nexport const checkUsernameAvailability = function (username: string): boolean {\n\tif (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n\t\tthrow new Meteor.Error('error-blocked-username', `${_.escape(username)} is blocked and can't be used!`, {\n\t\t\tmethod: 'checkUsernameAvailability',\n\t\t\tfield: username,\n\t\t});\n\t}\n\n\t// Make sure no users are using this username\n\tconst existingUser = Meteor.users.findOne(\n\t\t{\n\t\t\tusername: toRegExp(username),\n\t\t},\n\t\t{ fields: { _id: 1 } },\n\t);\n\tif (existingUser) {\n\t\treturn false;\n\t}\n\n\t// Make sure no teams are using this username\n\tconst existingTeam = Promise.await(Team.getOneByName(toRegExp(username), { projection: { _id: 1 } }));\n\tif (existingTeam) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/checkUsernameAvailability.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/checkUsernameAvailability.ts"}},"code":"module.export({\n  checkUsernameAvailability: () => checkUsernameAvailability\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nlet Team;\nmodule.link(\"../../../../server/sdk\", {\n  Team(v) {\n    Team = v;\n  }\n\n}, 5);\nlet validateName;\nmodule.link(\"./validateName\", {\n  validateName(v) {\n    validateName = v;\n  }\n\n}, 6);\nlet usernameBlackList = [];\n\nconst toRegExp = username => new RegExp(\"^\".concat(escapeRegExp(username).trim(), \"$\"), 'i');\n\nsettings.watch('Accounts_BlockedUsernameList', value => {\n  usernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n});\n\nconst usernameIsBlocked = (username, usernameBlackList) => usernameBlackList.length && usernameBlackList.some(restrictedUsername => restrictedUsername.test(s.trim(escapeRegExp(username))));\n\nconst checkUsernameAvailability = function (username) {\n  if (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n    throw new Meteor.Error('error-blocked-username', \"\".concat(_.escape(username), \" is blocked and can't be used!\"), {\n      method: 'checkUsernameAvailability',\n      field: username\n    });\n  } // Make sure no users are using this username\n\n\n  const existingUser = Meteor.users.findOne({\n    username: toRegExp(username)\n  }, {\n    fields: {\n      _id: 1\n    }\n  });\n\n  if (existingUser) {\n    return false;\n  } // Make sure no teams are using this username\n\n\n  const existingTeam = Promise.await(Team.getOneByName(toRegExp(username), {\n    projection: {\n      _id: 1\n    }\n  }));\n\n  if (existingTeam) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["app/lib/server/functions/checkUsernameAvailability.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport s from 'underscore.string';\nimport _ from 'underscore';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { settings } from '../../../settings/server';\nimport { Team } from '../../../../server/sdk';\nimport { validateName } from './validateName';\n\nlet usernameBlackList: RegExp[] = [];\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\n\nsettings.watch('Accounts_BlockedUsernameList', (value: string) => {\n\tusernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n});\n\nconst usernameIsBlocked = (username: string, usernameBlackList: RegExp[]): boolean | number =>\n\tusernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(s.trim(escapeRegExp(username))));\n\nexport const checkUsernameAvailability = function (username: string): boolean {\n\tif (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n\t\tthrow new Meteor.Error('error-blocked-username', `${_.escape(username)} is blocked and can't be used!`, {\n\t\t\tmethod: 'checkUsernameAvailability',\n\t\t\tfield: username,\n\t\t});\n\t}\n\n\t// Make sure no users are using this username\n\tconst existingUser = Meteor.users.findOne(\n\t\t{\n\t\t\tusername: toRegExp(username),\n\t\t},\n\t\t{ fields: { _id: 1 } },\n\t);\n\tif (existingUser) {\n\t\treturn false;\n\t}\n\n\t// Make sure no teams are using this username\n\tconst existingTeam = Promise.await(Team.getOneByName(toRegExp(username), { projection: { _id: 1 } }));\n\tif (existingTeam) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"38b7446ccff67fa220c6e5f068bade1501d72919"}
