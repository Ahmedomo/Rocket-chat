{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/statistics/server/lib/statistics.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/statistics/server/lib/statistics.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/statistics/server/lib/statistics.ts","inputSourceMap":{"version":3,"file":"app/statistics/server/lib/statistics.ts","sourceRoot":"","sources":["app/statistics/server/lib/statistics.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport { log } from 'console';\n\nimport _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { Settings, Users, Rooms, Subscriptions, Messages, LivechatVisitors } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { Info, getMongoInfo } from '../../../utils/server';\nimport { getControl } from '../../../../server/lib/migrations';\nimport { getStatistics as federationGetStatistics } from '../../../federation/server/functions/dashboard';\nimport {\n\tNotificationQueue,\n\tUsers as UsersRaw,\n\tRooms as RoomsRaw,\n\tStatistics,\n\tSessions,\n\tIntegrations,\n\tUploads,\n\tLivechatDepartment,\n\tEmailInbox,\n\tLivechatBusinessHours,\n\tMessages as MessagesRaw,\n\tInstanceStatus,\n} from '../../../models/server/raw';\nimport { readSecondaryPreferred } from '../../../../server/database/readSecondaryPreferred';\nimport { getAppsStatistics } from './getAppsStatistics';\nimport { getServicesStatistics } from './getServicesStatistics';\nimport { getStatistics as getEnterpriseStatistics } from '../../../../ee/app/license/server';\nimport { Analytics } from '../../../../server/sdk';\nimport { getSettingsStatistics } from '../../../../server/lib/statistics/getSettingsStatistics';\nimport { IRoom } from '../../../../definition/IRoom';\nimport { IStats } from '../../../../definition/IStats';\n\nconst wizardFields = ['Organization_Type', 'Industry', 'Size', 'Country', 'Language', 'Server_Type', 'Register_Server'];\n\nconst getUserLanguages = async (totalUsers: number): Promise<{ [key: string]: number }> => {\n\tconst result = await UsersRaw.getUserLanguages();\n\n\tconst languages: { [key: string]: number } = {\n\t\tnone: totalUsers,\n\t};\n\n\tresult.forEach(({ _id, total }: { _id: string; total: number }) => {\n\t\tif (!_id) {\n\t\t\treturn;\n\t\t}\n\t\tlanguages[_id] = total;\n\t\tlanguages.none -= total;\n\t});\n\n\treturn languages;\n};\n\nconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;\n\nexport const statistics = {\n\tget: async (): Promise<IStats> => {\n\t\tconst readPreference = readSecondaryPreferred(db);\n\n\t\tconst statistics = {} as IStats;\n\t\tconst statsPms = [];\n\n\t\t// Setup Wizard\n\t\tstatistics.wizard = {};\n\t\twizardFields.forEach((field) => {\n\t\t\tconst record = Settings.findOne(field);\n\t\t\tif (record) {\n\t\t\t\tconst wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n\t\t\t\tstatistics.wizard[wizardField] = record.value;\n\t\t\t}\n\t\t});\n\n\t\t// Version\n\t\tstatistics.uniqueId = settings.get('uniqueID');\n\t\tif (Settings.findOne('uniqueID')) {\n\t\t\tstatistics.installedAt = Settings.findOne('uniqueID').createdAt;\n\t\t}\n\n\t\tif (Info) {\n\t\t\tstatistics.version = Info.version;\n\t\t\tstatistics.tag = Info.tag;\n\t\t\tstatistics.branch = Info.branch;\n\t\t}\n\n\t\t// User statistics\n\t\tstatistics.totalUsers = Users.find().count();\n\t\tstatistics.activeUsers = Users.getActiveLocalUserCount();\n\t\tstatistics.activeGuests = Users.getActiveLocalGuestCount();\n\t\tstatistics.nonActiveUsers = Users.find({ active: false }).count();\n\t\tstatistics.appUsers = Users.find({ type: 'app' }).count();\n\t\tstatistics.onlineUsers = Meteor.users.find({ status: 'online' }).count();\n\t\tstatistics.awayUsers = Meteor.users.find({ status: 'away' }).count();\n\t\tstatistics.busyUsers = Meteor.users.find({ status: 'busy' }).count();\n\t\tstatistics.totalConnectedUsers = statistics.onlineUsers + statistics.awayUsers;\n\t\tstatistics.offlineUsers = statistics.totalUsers - statistics.onlineUsers - statistics.awayUsers - statistics.busyUsers;\n\t\tstatsPms.push(\n\t\t\tgetUserLanguages(statistics.totalUsers).then((total) => {\n\t\t\t\tstatistics.userLanguages = total;\n\t\t\t}),\n\t\t);\n\n\t\t// Room statistics\n\t\tstatistics.totalRooms = Rooms.find().count();\n\t\tstatistics.totalChannels = Rooms.findByType('c').count();\n\t\tstatistics.totalPrivateGroups = Rooms.findByType('p').count();\n\t\tstatistics.totalDirect = Rooms.findByType('d').count();\n\t\tstatistics.totalLivechat = Rooms.findByType('l').count();\n\t\tstatistics.totalDiscussions = Rooms.countDiscussions();\n\t\tstatistics.totalThreads = Messages.countThreads();\n\n\t\t// livechat visitors\n\t\tstatistics.totalLivechatVisitors = LivechatVisitors.find().count();\n\n\t\t// livechat agents\n\t\tstatistics.totalLivechatAgents = Users.findAgents().count();\n\n\t\t// livechat enabled\n\t\tstatistics.livechatEnabled = settings.get('Livechat_enabled');\n\n\t\t// Count and types of omnichannel rooms\n\t\tstatsPms.push(\n\t\t\tRoomsRaw.allRoomSourcesCount()\n\t\t\t\t.toArray()\n\t\t\t\t.then((roomSources) => {\n\t\t\t\t\tstatistics.omnichannelSources = roomSources.map(({ _id: { id, alias, type }, count }) => ({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\talias,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t}));\n\t\t\t\t}),\n\t\t);\n\n\t\t// Number of departments\n\t\tstatsPms.push(\n\t\t\tLivechatDepartment.col.count().then((count) => {\n\t\t\t\tstatistics.departments = count;\n\t\t\t}),\n\t\t);\n\n\t\t// Type of routing algorithm used on omnichannel\n\t\tstatistics.routingAlgorithm = settings.get('Livechat_Routing_Method') || '';\n\n\t\t// is on-hold active\n\t\tstatistics.onHoldEnabled = settings.get('Livechat_allow_manual_on_hold');\n\n\t\t// Number of Email Inboxes\n\t\tstatsPms.push(\n\t\t\tEmailInbox.col.count().then((count) => {\n\t\t\t\tstatistics.emailInboxes = count;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tLivechatBusinessHours.col.count().then((count) => {\n\t\t\t\tstatistics.BusinessHours = {\n\t\t\t\t\t// Number of Business Hours\n\t\t\t\t\ttotal: count,\n\t\t\t\t\t// Business Hours strategy\n\t\t\t\t\tstrategy: settings.get('Livechat_enable_business_hours') || '',\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\n\t\t// Type of routing algorithm used on omnichannel\n\t\tstatistics.routingAlgorithm = settings.get('Livechat_Routing_Method');\n\n\t\t// is on-hold active\n\t\tstatistics.onHoldEnabled = settings.get('Livechat_allow_manual_on_hold');\n\n\t\t// Last-Chatted Agent Preferred (enabled/disabled)\n\t\tstatistics.lastChattedAgentPreferred = settings.get('Livechat_last_chatted_agent_routing');\n\n\t\t// Assign new conversations to the contact manager (enabled/disabled)\n\t\tstatistics.assignNewConversationsToContactManager = settings.get('Omnichannel_contact_manager_routing');\n\n\t\t// How to handle Visitor Abandonment setting\n\t\tstatistics.visitorAbandonment = settings.get('Livechat_abandoned_rooms_action');\n\n\t\t// Amount of chats placed on hold\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col.distinct('rid', { t: 'omnichannel_placed_chat_on_hold' }).then((msgs) => {\n\t\t\t\tstatistics.chatsOnHold = msgs.length;\n\t\t\t}),\n\t\t);\n\n\t\t// VoIP Enabled\n\t\tstatistics.voipEnabled = settings.get('VoIP_Enabled');\n\n\t\t// Amount of VoIP Calls\n\t\tstatsPms.push(\n\t\t\tRoomsRaw.col\n\t\t\t\t.find({ t: 'v' })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipCalls = count;\n\t\t\t\t}),\n\t\t);\n\n\t\t// Amount of VoIP Extensions connected\n\t\tstatsPms.push(\n\t\t\tUsersRaw.col\n\t\t\t\t.find({ extension: { $exists: true } })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipExtensions = count;\n\t\t\t\t}),\n\t\t);\n\n\t\t// Amount of Calls that ended properly\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col\n\t\t\t\t.find({ t: 'voip-call-wrapup' })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipSuccessfulCalls = count;\n\t\t\t\t}),\n\t\t);\n\n\t\t// Amount of Calls that ended with an error\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col\n\t\t\t\t.find({ t: 'voip-call-ended-unexpectedly' })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipErrorCalls = count;\n\t\t\t\t}),\n\t\t);\n\t\t// Amount of Calls that were put on hold\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col.distinct('rid', { t: 'voip-call-on-hold' }).then((msgs) => {\n\t\t\t\tstatistics.voipOnHoldCalls = msgs.length;\n\t\t\t}),\n\t\t);\n\n\t\t// Message statistics\n\t\tstatistics.totalChannelMessages = _.reduce(\n\t\t\tRooms.findByType('c', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countChannelMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalPrivateGroupMessages = _.reduce(\n\t\t\tRooms.findByType('p', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countPrivateGroupMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalDirectMessages = _.reduce(\n\t\t\tRooms.findByType('d', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countDirectMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalLivechatMessages = _.reduce(\n\t\t\tRooms.findByType('l', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countLivechatMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalMessages =\n\t\t\tstatistics.totalChannelMessages +\n\t\t\tstatistics.totalPrivateGroupMessages +\n\t\t\tstatistics.totalDirectMessages +\n\t\t\tstatistics.totalLivechatMessages;\n\n\t\t// Federation statistics\n\t\tstatsPms.push(\n\t\t\tfederationGetStatistics().then((federationOverviewData) => {\n\t\t\t\tstatistics.federatedServers = federationOverviewData.numberOfServers;\n\t\t\t\tstatistics.federatedUsers = federationOverviewData.numberOfFederatedUsers;\n\t\t\t}),\n\t\t);\n\n\t\tstatistics.lastLogin = Users.getLastLogin();\n\t\tstatistics.lastMessageSentAt = Messages.getLastTimestamp();\n\t\tstatistics.lastSeenSubscription = Subscriptions.getLastSeen();\n\n\t\tstatistics.os = {\n\t\t\ttype: os.type(),\n\t\t\tplatform: os.platform(),\n\t\t\tarch: os.arch(),\n\t\t\trelease: os.release(),\n\t\t\tuptime: os.uptime(),\n\t\t\tloadavg: os.loadavg(),\n\t\t\ttotalmem: os.totalmem(),\n\t\t\tfreemem: os.freemem(),\n\t\t\tcpus: os.cpus(),\n\t\t};\n\n\t\tstatistics.process = {\n\t\t\tnodeVersion: process.version,\n\t\t\tpid: process.pid,\n\t\t\tuptime: process.uptime(),\n\t\t};\n\n\t\tstatistics.deploy = {\n\t\t\tmethod: process.env.DEPLOY_METHOD || 'tar',\n\t\t\tplatform: process.env.DEPLOY_PLATFORM || 'selfinstall',\n\t\t};\n\n\t\tstatistics.readReceiptsEnabled = settings.get('Message_Read_Receipt_Enabled');\n\t\tstatistics.readReceiptsDetailed = settings.get('Message_Read_Receipt_Store_Users');\n\n\t\tstatistics.enterpriseReady = true;\n\t\tstatsPms.push(\n\t\t\tUploads.find()\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.uploadsTotal = count;\n\t\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tUploads.col\n\t\t\t\t.aggregate(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$group: { _id: 'total', total: { $sum: '$size' } },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{ readPreference },\n\t\t\t\t)\n\t\t\t\t.toArray()\n\t\t\t\t.then((agg) => {\n\t\t\t\t\tconst [result] = agg;\n\t\t\t\t\tstatistics.uploadsTotalSize = result ? (result as any).total : 0;\n\t\t\t\t}),\n\t\t);\n\n\t\tstatistics.migration = getControl();\n\t\tstatsPms.push(\n\t\t\tInstanceStatus.col\n\t\t\t\t.find({ _updatedAt: { $gt: new Date(Date.now() - process.uptime() * 1000 - 2000) } })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.instanceCount = count;\n\t\t\t\t}),\n\t\t);\n\n\t\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = getMongoInfo();\n\t\tstatistics.oplogEnabled = oplogEnabled;\n\t\tstatistics.mongoVersion = mongoVersion;\n\t\tstatistics.mongoStorageEngine = mongoStorageEngine;\n\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueUsersOfYesterday().then((result) => {\n\t\t\t\tstatistics.uniqueUsersOfYesterday = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueUsersOfLastWeek().then((result) => {\n\t\t\t\tstatistics.uniqueUsersOfLastWeek = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueUsersOfLastMonth().then((result) => {\n\t\t\t\tstatistics.uniqueUsersOfLastMonth = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueDevicesOfYesterday().then((result) => {\n\t\t\t\tstatistics.uniqueDevicesOfYesterday = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueDevicesOfLastWeek().then((result) => {\n\t\t\t\tstatistics.uniqueDevicesOfLastWeek = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueDevicesOfLastMonth().then((result) => {\n\t\t\t\tstatistics.uniqueDevicesOfLastMonth = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueOSOfYesterday().then((result) => {\n\t\t\t\tstatistics.uniqueOSOfYesterday = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueOSOfLastWeek().then((result) => {\n\t\t\t\tstatistics.uniqueOSOfLastWeek = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueOSOfLastMonth().then((result) => {\n\t\t\t\tstatistics.uniqueOSOfLastMonth = result;\n\t\t\t}),\n\t\t);\n\n\t\tstatistics.apps = getAppsStatistics();\n\t\tstatistics.services = getServicesStatistics();\n\n\t\t// If getSettingsStatistics() returns an error, save as empty object.\n\t\tstatsPms.push(\n\t\t\tgetSettingsStatistics().then((res) => {\n\t\t\t\tconst settingsStatisticsObject = res || {};\n\t\t\t\tstatistics.settings = settingsStatisticsObject;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tIntegrations.find(\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: 1,\n\t\t\t\t\t\tenabled: 1,\n\t\t\t\t\t\tscriptEnabled: 1,\n\t\t\t\t\t},\n\t\t\t\t\treadPreference,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\t.toArray()\n\t\t\t\t.then((found) => {\n\t\t\t\t\tconst integrations = found;\n\n\t\t\t\t\tstatistics.integrations = {\n\t\t\t\t\t\ttotalIntegrations: integrations.length,\n\t\t\t\t\t\ttotalIncoming: integrations.filter((integration) => integration.type === 'webhook-incoming').length,\n\t\t\t\t\t\ttotalIncomingActive: integrations.filter(\n\t\t\t\t\t\t\t(integration) => integration.enabled === true && integration.type === 'webhook-incoming',\n\t\t\t\t\t\t).length,\n\t\t\t\t\t\ttotalOutgoing: integrations.filter((integration) => integration.type === 'webhook-outgoing').length,\n\t\t\t\t\t\ttotalOutgoingActive: integrations.filter(\n\t\t\t\t\t\t\t(integration) => integration.enabled === true && integration.type === 'webhook-outgoing',\n\t\t\t\t\t\t).length,\n\t\t\t\t\t\ttotalWithScriptEnabled: integrations.filter((integration) => integration.scriptEnabled === true).length,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tNotificationQueue.col.estimatedDocumentCount().then((count) => {\n\t\t\t\tstatistics.pushQueue = count;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tgetEnterpriseStatistics().then((result) => {\n\t\t\t\tstatistics.enterprise = result;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(Analytics.resetSeatRequestCount());\n\n\t\tstatistics.dashboardCount = settings.get('Engagement_Dashboard_Load_Count');\n\t\tstatistics.messageAuditApply = settings.get('Message_Auditing_Apply_Count');\n\t\tstatistics.messageAuditLoad = settings.get('Message_Auditing_Panel_Load_Count');\n\t\tstatistics.joinJitsiButton = settings.get('Jitsi_Click_To_Join_Count');\n\t\tstatistics.slashCommandsJitsi = settings.get('Jitsi_Start_SlashCommands_Count');\n\t\tstatistics.totalOTRRooms = Rooms.find({ createdOTR: true }).count();\n\t\tstatistics.totalOTR = settings.get('OTR_Count');\n\n\t\tawait Promise.all(statsPms).catch(log);\n\n\t\treturn statistics;\n\t},\n\tasync save(): Promise<IStats> {\n\t\tconst rcStatistics = await statistics.get();\n\t\trcStatistics.createdAt = new Date();\n\t\tawait Statistics.insertOne(rcStatistics);\n\t\treturn rcStatistics;\n\t},\n};\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/statistics/server/lib/statistics.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/statistics/server/lib/statistics.ts"}},"code":"module.export({\n  statistics: () => statistics\n});\nlet os;\nmodule.link(\"os\", {\n  default(v) {\n    os = v;\n  }\n\n}, 0);\nlet log;\nmodule.link(\"console\", {\n  log(v) {\n    log = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 3);\nlet MongoInternals;\nmodule.link(\"meteor/mongo\", {\n  MongoInternals(v) {\n    MongoInternals = v;\n  }\n\n}, 4);\nlet Settings, Users, Rooms, Subscriptions, Messages, LivechatVisitors;\nmodule.link(\"../../../models/server\", {\n  Settings(v) {\n    Settings = v;\n  },\n\n  Users(v) {\n    Users = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Messages(v) {\n    Messages = v;\n  },\n\n  LivechatVisitors(v) {\n    LivechatVisitors = v;\n  }\n\n}, 5);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 6);\nlet Info, getMongoInfo;\nmodule.link(\"../../../utils/server\", {\n  Info(v) {\n    Info = v;\n  },\n\n  getMongoInfo(v) {\n    getMongoInfo = v;\n  }\n\n}, 7);\nlet getControl;\nmodule.link(\"../../../../server/lib/migrations\", {\n  getControl(v) {\n    getControl = v;\n  }\n\n}, 8);\nlet federationGetStatistics;\nmodule.link(\"../../../federation/server/functions/dashboard\", {\n  getStatistics(v) {\n    federationGetStatistics = v;\n  }\n\n}, 9);\nlet NotificationQueue, UsersRaw, RoomsRaw, Statistics, Sessions, Integrations, Uploads, LivechatDepartment, EmailInbox, LivechatBusinessHours, MessagesRaw, InstanceStatus;\nmodule.link(\"../../../models/server/raw\", {\n  NotificationQueue(v) {\n    NotificationQueue = v;\n  },\n\n  Users(v) {\n    UsersRaw = v;\n  },\n\n  Rooms(v) {\n    RoomsRaw = v;\n  },\n\n  Statistics(v) {\n    Statistics = v;\n  },\n\n  Sessions(v) {\n    Sessions = v;\n  },\n\n  Integrations(v) {\n    Integrations = v;\n  },\n\n  Uploads(v) {\n    Uploads = v;\n  },\n\n  LivechatDepartment(v) {\n    LivechatDepartment = v;\n  },\n\n  EmailInbox(v) {\n    EmailInbox = v;\n  },\n\n  LivechatBusinessHours(v) {\n    LivechatBusinessHours = v;\n  },\n\n  Messages(v) {\n    MessagesRaw = v;\n  },\n\n  InstanceStatus(v) {\n    InstanceStatus = v;\n  }\n\n}, 10);\nlet readSecondaryPreferred;\nmodule.link(\"../../../../server/database/readSecondaryPreferred\", {\n  readSecondaryPreferred(v) {\n    readSecondaryPreferred = v;\n  }\n\n}, 11);\nlet getAppsStatistics;\nmodule.link(\"./getAppsStatistics\", {\n  getAppsStatistics(v) {\n    getAppsStatistics = v;\n  }\n\n}, 12);\nlet getServicesStatistics;\nmodule.link(\"./getServicesStatistics\", {\n  getServicesStatistics(v) {\n    getServicesStatistics = v;\n  }\n\n}, 13);\nlet getEnterpriseStatistics;\nmodule.link(\"../../../../ee/app/license/server\", {\n  getStatistics(v) {\n    getEnterpriseStatistics = v;\n  }\n\n}, 14);\nlet Analytics;\nmodule.link(\"../../../../server/sdk\", {\n  Analytics(v) {\n    Analytics = v;\n  }\n\n}, 15);\nlet getSettingsStatistics;\nmodule.link(\"../../../../server/lib/statistics/getSettingsStatistics\", {\n  getSettingsStatistics(v) {\n    getSettingsStatistics = v;\n  }\n\n}, 16);\nconst wizardFields = ['Organization_Type', 'Industry', 'Size', 'Country', 'Language', 'Server_Type', 'Register_Server'];\n\nconst getUserLanguages = totalUsers => Promise.asyncApply(() => {\n  const result = Promise.await(UsersRaw.getUserLanguages());\n  const languages = {\n    none: totalUsers\n  };\n  result.forEach(_ref => {\n    let {\n      _id,\n      total\n    } = _ref;\n\n    if (!_id) {\n      return;\n    }\n\n    languages[_id] = total;\n    languages.none -= total;\n  });\n  return languages;\n});\n\nconst {\n  db\n} = MongoInternals.defaultRemoteCollectionDriver().mongo;\nconst statistics = {\n  get: () => Promise.asyncApply(() => {\n    const readPreference = readSecondaryPreferred(db);\n    const statistics = {};\n    const statsPms = []; // Setup Wizard\n\n    statistics.wizard = {};\n    wizardFields.forEach(field => {\n      const record = Settings.findOne(field);\n\n      if (record) {\n        const wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n        statistics.wizard[wizardField] = record.value;\n      }\n    }); // Version\n\n    statistics.uniqueId = settings.get('uniqueID');\n\n    if (Settings.findOne('uniqueID')) {\n      statistics.installedAt = Settings.findOne('uniqueID').createdAt;\n    }\n\n    if (Info) {\n      statistics.version = Info.version;\n      statistics.tag = Info.tag;\n      statistics.branch = Info.branch;\n    } // User statistics\n\n\n    statistics.totalUsers = Users.find().count();\n    statistics.activeUsers = Users.getActiveLocalUserCount();\n    statistics.activeGuests = Users.getActiveLocalGuestCount();\n    statistics.nonActiveUsers = Users.find({\n      active: false\n    }).count();\n    statistics.appUsers = Users.find({\n      type: 'app'\n    }).count();\n    statistics.onlineUsers = Meteor.users.find({\n      status: 'online'\n    }).count();\n    statistics.awayUsers = Meteor.users.find({\n      status: 'away'\n    }).count();\n    statistics.busyUsers = Meteor.users.find({\n      status: 'busy'\n    }).count();\n    statistics.totalConnectedUsers = statistics.onlineUsers + statistics.awayUsers;\n    statistics.offlineUsers = statistics.totalUsers - statistics.onlineUsers - statistics.awayUsers - statistics.busyUsers;\n    statsPms.push(getUserLanguages(statistics.totalUsers).then(total => {\n      statistics.userLanguages = total;\n    })); // Room statistics\n\n    statistics.totalRooms = Rooms.find().count();\n    statistics.totalChannels = Rooms.findByType('c').count();\n    statistics.totalPrivateGroups = Rooms.findByType('p').count();\n    statistics.totalDirect = Rooms.findByType('d').count();\n    statistics.totalLivechat = Rooms.findByType('l').count();\n    statistics.totalDiscussions = Rooms.countDiscussions();\n    statistics.totalThreads = Messages.countThreads(); // livechat visitors\n\n    statistics.totalLivechatVisitors = LivechatVisitors.find().count(); // livechat agents\n\n    statistics.totalLivechatAgents = Users.findAgents().count(); // livechat enabled\n\n    statistics.livechatEnabled = settings.get('Livechat_enabled'); // Count and types of omnichannel rooms\n\n    statsPms.push(RoomsRaw.allRoomSourcesCount().toArray().then(roomSources => {\n      statistics.omnichannelSources = roomSources.map(_ref2 => {\n        let {\n          _id: {\n            id,\n            alias,\n            type\n          },\n          count\n        } = _ref2;\n        return {\n          id,\n          alias,\n          type,\n          count\n        };\n      });\n    })); // Number of departments\n\n    statsPms.push(LivechatDepartment.col.count().then(count => {\n      statistics.departments = count;\n    })); // Type of routing algorithm used on omnichannel\n\n    statistics.routingAlgorithm = settings.get('Livechat_Routing_Method') || ''; // is on-hold active\n\n    statistics.onHoldEnabled = settings.get('Livechat_allow_manual_on_hold'); // Number of Email Inboxes\n\n    statsPms.push(EmailInbox.col.count().then(count => {\n      statistics.emailInboxes = count;\n    }));\n    statsPms.push(LivechatBusinessHours.col.count().then(count => {\n      statistics.BusinessHours = {\n        // Number of Business Hours\n        total: count,\n        // Business Hours strategy\n        strategy: settings.get('Livechat_enable_business_hours') || ''\n      };\n    })); // Type of routing algorithm used on omnichannel\n\n    statistics.routingAlgorithm = settings.get('Livechat_Routing_Method'); // is on-hold active\n\n    statistics.onHoldEnabled = settings.get('Livechat_allow_manual_on_hold'); // Last-Chatted Agent Preferred (enabled/disabled)\n\n    statistics.lastChattedAgentPreferred = settings.get('Livechat_last_chatted_agent_routing'); // Assign new conversations to the contact manager (enabled/disabled)\n\n    statistics.assignNewConversationsToContactManager = settings.get('Omnichannel_contact_manager_routing'); // How to handle Visitor Abandonment setting\n\n    statistics.visitorAbandonment = settings.get('Livechat_abandoned_rooms_action'); // Amount of chats placed on hold\n\n    statsPms.push(MessagesRaw.col.distinct('rid', {\n      t: 'omnichannel_placed_chat_on_hold'\n    }).then(msgs => {\n      statistics.chatsOnHold = msgs.length;\n    })); // VoIP Enabled\n\n    statistics.voipEnabled = settings.get('VoIP_Enabled'); // Amount of VoIP Calls\n\n    statsPms.push(RoomsRaw.col.find({\n      t: 'v'\n    }).count().then(count => {\n      statistics.voipCalls = count;\n    })); // Amount of VoIP Extensions connected\n\n    statsPms.push(UsersRaw.col.find({\n      extension: {\n        $exists: true\n      }\n    }).count().then(count => {\n      statistics.voipExtensions = count;\n    })); // Amount of Calls that ended properly\n\n    statsPms.push(MessagesRaw.col.find({\n      t: 'voip-call-wrapup'\n    }).count().then(count => {\n      statistics.voipSuccessfulCalls = count;\n    })); // Amount of Calls that ended with an error\n\n    statsPms.push(MessagesRaw.col.find({\n      t: 'voip-call-ended-unexpectedly'\n    }).count().then(count => {\n      statistics.voipErrorCalls = count;\n    })); // Amount of Calls that were put on hold\n\n    statsPms.push(MessagesRaw.col.distinct('rid', {\n      t: 'voip-call-on-hold'\n    }).then(msgs => {\n      statistics.voipOnHoldCalls = msgs.length;\n    })); // Message statistics\n\n    statistics.totalChannelMessages = _.reduce(Rooms.findByType('c', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countChannelMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalPrivateGroupMessages = _.reduce(Rooms.findByType('p', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countPrivateGroupMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalDirectMessages = _.reduce(Rooms.findByType('d', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countDirectMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalLivechatMessages = _.reduce(Rooms.findByType('l', {\n      fields: {\n        msgs: 1\n      }\n    }).fetch(), function _countLivechatMessages(num, room) {\n      return num + room.msgs;\n    }, 0);\n    statistics.totalMessages = statistics.totalChannelMessages + statistics.totalPrivateGroupMessages + statistics.totalDirectMessages + statistics.totalLivechatMessages; // Federation statistics\n\n    statsPms.push(federationGetStatistics().then(federationOverviewData => {\n      statistics.federatedServers = federationOverviewData.numberOfServers;\n      statistics.federatedUsers = federationOverviewData.numberOfFederatedUsers;\n    }));\n    statistics.lastLogin = Users.getLastLogin();\n    statistics.lastMessageSentAt = Messages.getLastTimestamp();\n    statistics.lastSeenSubscription = Subscriptions.getLastSeen();\n    statistics.os = {\n      type: os.type(),\n      platform: os.platform(),\n      arch: os.arch(),\n      release: os.release(),\n      uptime: os.uptime(),\n      loadavg: os.loadavg(),\n      totalmem: os.totalmem(),\n      freemem: os.freemem(),\n      cpus: os.cpus()\n    };\n    statistics.process = {\n      nodeVersion: process.version,\n      pid: process.pid,\n      uptime: process.uptime()\n    };\n    statistics.deploy = {\n      method: process.env.DEPLOY_METHOD || 'tar',\n      platform: process.env.DEPLOY_PLATFORM || 'selfinstall'\n    };\n    statistics.readReceiptsEnabled = settings.get('Message_Read_Receipt_Enabled');\n    statistics.readReceiptsDetailed = settings.get('Message_Read_Receipt_Store_Users');\n    statistics.enterpriseReady = true;\n    statsPms.push(Uploads.find().count().then(count => {\n      statistics.uploadsTotal = count;\n    }));\n    statsPms.push(Uploads.col.aggregate([{\n      $group: {\n        _id: 'total',\n        total: {\n          $sum: '$size'\n        }\n      }\n    }], {\n      readPreference\n    }).toArray().then(agg => {\n      const [result] = agg;\n      statistics.uploadsTotalSize = result ? result.total : 0;\n    }));\n    statistics.migration = getControl();\n    statsPms.push(InstanceStatus.col.find({\n      _updatedAt: {\n        $gt: new Date(Date.now() - process.uptime() * 1000 - 2000)\n      }\n    }).count().then(count => {\n      statistics.instanceCount = count;\n    }));\n    const {\n      oplogEnabled,\n      mongoVersion,\n      mongoStorageEngine\n    } = getMongoInfo();\n    statistics.oplogEnabled = oplogEnabled;\n    statistics.mongoVersion = mongoVersion;\n    statistics.mongoStorageEngine = mongoStorageEngine;\n    statsPms.push(Sessions.getUniqueUsersOfYesterday().then(result => {\n      statistics.uniqueUsersOfYesterday = result;\n    }));\n    statsPms.push(Sessions.getUniqueUsersOfLastWeek().then(result => {\n      statistics.uniqueUsersOfLastWeek = result;\n    }));\n    statsPms.push(Sessions.getUniqueUsersOfLastMonth().then(result => {\n      statistics.uniqueUsersOfLastMonth = result;\n    }));\n    statsPms.push(Sessions.getUniqueDevicesOfYesterday().then(result => {\n      statistics.uniqueDevicesOfYesterday = result;\n    }));\n    statsPms.push(Sessions.getUniqueDevicesOfLastWeek().then(result => {\n      statistics.uniqueDevicesOfLastWeek = result;\n    }));\n    statsPms.push(Sessions.getUniqueDevicesOfLastMonth().then(result => {\n      statistics.uniqueDevicesOfLastMonth = result;\n    }));\n    statsPms.push(Sessions.getUniqueOSOfYesterday().then(result => {\n      statistics.uniqueOSOfYesterday = result;\n    }));\n    statsPms.push(Sessions.getUniqueOSOfLastWeek().then(result => {\n      statistics.uniqueOSOfLastWeek = result;\n    }));\n    statsPms.push(Sessions.getUniqueOSOfLastMonth().then(result => {\n      statistics.uniqueOSOfLastMonth = result;\n    }));\n    statistics.apps = getAppsStatistics();\n    statistics.services = getServicesStatistics(); // If getSettingsStatistics() returns an error, save as empty object.\n\n    statsPms.push(getSettingsStatistics().then(res => {\n      const settingsStatisticsObject = res || {};\n      statistics.settings = settingsStatisticsObject;\n    }));\n    statsPms.push(Integrations.find({}, {\n      projection: {\n        _id: 0,\n        type: 1,\n        enabled: 1,\n        scriptEnabled: 1\n      },\n      readPreference\n    }).toArray().then(found => {\n      const integrations = found;\n      statistics.integrations = {\n        totalIntegrations: integrations.length,\n        totalIncoming: integrations.filter(integration => integration.type === 'webhook-incoming').length,\n        totalIncomingActive: integrations.filter(integration => integration.enabled === true && integration.type === 'webhook-incoming').length,\n        totalOutgoing: integrations.filter(integration => integration.type === 'webhook-outgoing').length,\n        totalOutgoingActive: integrations.filter(integration => integration.enabled === true && integration.type === 'webhook-outgoing').length,\n        totalWithScriptEnabled: integrations.filter(integration => integration.scriptEnabled === true).length\n      };\n    }));\n    statsPms.push(NotificationQueue.col.estimatedDocumentCount().then(count => {\n      statistics.pushQueue = count;\n    }));\n    statsPms.push(getEnterpriseStatistics().then(result => {\n      statistics.enterprise = result;\n    }));\n    statsPms.push(Analytics.resetSeatRequestCount());\n    statistics.dashboardCount = settings.get('Engagement_Dashboard_Load_Count');\n    statistics.messageAuditApply = settings.get('Message_Auditing_Apply_Count');\n    statistics.messageAuditLoad = settings.get('Message_Auditing_Panel_Load_Count');\n    statistics.joinJitsiButton = settings.get('Jitsi_Click_To_Join_Count');\n    statistics.slashCommandsJitsi = settings.get('Jitsi_Start_SlashCommands_Count');\n    statistics.totalOTRRooms = Rooms.find({\n      createdOTR: true\n    }).count();\n    statistics.totalOTR = settings.get('OTR_Count');\n    Promise.await(Promise.all(statsPms).catch(log));\n    return statistics;\n  }),\n\n  save() {\n    return Promise.asyncApply(() => {\n      const rcStatistics = Promise.await(statistics.get());\n      rcStatistics.createdAt = new Date();\n      Promise.await(Statistics.insertOne(rcStatistics));\n      return rcStatistics;\n    });\n  }\n\n};","map":{"version":3,"sources":["app/statistics/server/lib/statistics.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport { log } from 'console';\n\nimport _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { Settings, Users, Rooms, Subscriptions, Messages, LivechatVisitors } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { Info, getMongoInfo } from '../../../utils/server';\nimport { getControl } from '../../../../server/lib/migrations';\nimport { getStatistics as federationGetStatistics } from '../../../federation/server/functions/dashboard';\nimport {\n\tNotificationQueue,\n\tUsers as UsersRaw,\n\tRooms as RoomsRaw,\n\tStatistics,\n\tSessions,\n\tIntegrations,\n\tUploads,\n\tLivechatDepartment,\n\tEmailInbox,\n\tLivechatBusinessHours,\n\tMessages as MessagesRaw,\n\tInstanceStatus,\n} from '../../../models/server/raw';\nimport { readSecondaryPreferred } from '../../../../server/database/readSecondaryPreferred';\nimport { getAppsStatistics } from './getAppsStatistics';\nimport { getServicesStatistics } from './getServicesStatistics';\nimport { getStatistics as getEnterpriseStatistics } from '../../../../ee/app/license/server';\nimport { Analytics } from '../../../../server/sdk';\nimport { getSettingsStatistics } from '../../../../server/lib/statistics/getSettingsStatistics';\nimport { IRoom } from '../../../../definition/IRoom';\nimport { IStats } from '../../../../definition/IStats';\n\nconst wizardFields = ['Organization_Type', 'Industry', 'Size', 'Country', 'Language', 'Server_Type', 'Register_Server'];\n\nconst getUserLanguages = async (totalUsers: number): Promise<{ [key: string]: number }> => {\n\tconst result = await UsersRaw.getUserLanguages();\n\n\tconst languages: { [key: string]: number } = {\n\t\tnone: totalUsers,\n\t};\n\n\tresult.forEach(({ _id, total }: { _id: string; total: number }) => {\n\t\tif (!_id) {\n\t\t\treturn;\n\t\t}\n\t\tlanguages[_id] = total;\n\t\tlanguages.none -= total;\n\t});\n\n\treturn languages;\n};\n\nconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;\n\nexport const statistics = {\n\tget: async (): Promise<IStats> => {\n\t\tconst readPreference = readSecondaryPreferred(db);\n\n\t\tconst statistics = {} as IStats;\n\t\tconst statsPms = [];\n\n\t\t// Setup Wizard\n\t\tstatistics.wizard = {};\n\t\twizardFields.forEach((field) => {\n\t\t\tconst record = Settings.findOne(field);\n\t\t\tif (record) {\n\t\t\t\tconst wizardField = field.replace(/_/g, '').replace(field[0], field[0].toLowerCase());\n\t\t\t\tstatistics.wizard[wizardField] = record.value;\n\t\t\t}\n\t\t});\n\n\t\t// Version\n\t\tstatistics.uniqueId = settings.get('uniqueID');\n\t\tif (Settings.findOne('uniqueID')) {\n\t\t\tstatistics.installedAt = Settings.findOne('uniqueID').createdAt;\n\t\t}\n\n\t\tif (Info) {\n\t\t\tstatistics.version = Info.version;\n\t\t\tstatistics.tag = Info.tag;\n\t\t\tstatistics.branch = Info.branch;\n\t\t}\n\n\t\t// User statistics\n\t\tstatistics.totalUsers = Users.find().count();\n\t\tstatistics.activeUsers = Users.getActiveLocalUserCount();\n\t\tstatistics.activeGuests = Users.getActiveLocalGuestCount();\n\t\tstatistics.nonActiveUsers = Users.find({ active: false }).count();\n\t\tstatistics.appUsers = Users.find({ type: 'app' }).count();\n\t\tstatistics.onlineUsers = Meteor.users.find({ status: 'online' }).count();\n\t\tstatistics.awayUsers = Meteor.users.find({ status: 'away' }).count();\n\t\tstatistics.busyUsers = Meteor.users.find({ status: 'busy' }).count();\n\t\tstatistics.totalConnectedUsers = statistics.onlineUsers + statistics.awayUsers;\n\t\tstatistics.offlineUsers = statistics.totalUsers - statistics.onlineUsers - statistics.awayUsers - statistics.busyUsers;\n\t\tstatsPms.push(\n\t\t\tgetUserLanguages(statistics.totalUsers).then((total) => {\n\t\t\t\tstatistics.userLanguages = total;\n\t\t\t}),\n\t\t);\n\n\t\t// Room statistics\n\t\tstatistics.totalRooms = Rooms.find().count();\n\t\tstatistics.totalChannels = Rooms.findByType('c').count();\n\t\tstatistics.totalPrivateGroups = Rooms.findByType('p').count();\n\t\tstatistics.totalDirect = Rooms.findByType('d').count();\n\t\tstatistics.totalLivechat = Rooms.findByType('l').count();\n\t\tstatistics.totalDiscussions = Rooms.countDiscussions();\n\t\tstatistics.totalThreads = Messages.countThreads();\n\n\t\t// livechat visitors\n\t\tstatistics.totalLivechatVisitors = LivechatVisitors.find().count();\n\n\t\t// livechat agents\n\t\tstatistics.totalLivechatAgents = Users.findAgents().count();\n\n\t\t// livechat enabled\n\t\tstatistics.livechatEnabled = settings.get('Livechat_enabled');\n\n\t\t// Count and types of omnichannel rooms\n\t\tstatsPms.push(\n\t\t\tRoomsRaw.allRoomSourcesCount()\n\t\t\t\t.toArray()\n\t\t\t\t.then((roomSources) => {\n\t\t\t\t\tstatistics.omnichannelSources = roomSources.map(({ _id: { id, alias, type }, count }) => ({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\talias,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t}));\n\t\t\t\t}),\n\t\t);\n\n\t\t// Number of departments\n\t\tstatsPms.push(\n\t\t\tLivechatDepartment.col.count().then((count) => {\n\t\t\t\tstatistics.departments = count;\n\t\t\t}),\n\t\t);\n\n\t\t// Type of routing algorithm used on omnichannel\n\t\tstatistics.routingAlgorithm = settings.get('Livechat_Routing_Method') || '';\n\n\t\t// is on-hold active\n\t\tstatistics.onHoldEnabled = settings.get('Livechat_allow_manual_on_hold');\n\n\t\t// Number of Email Inboxes\n\t\tstatsPms.push(\n\t\t\tEmailInbox.col.count().then((count) => {\n\t\t\t\tstatistics.emailInboxes = count;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tLivechatBusinessHours.col.count().then((count) => {\n\t\t\t\tstatistics.BusinessHours = {\n\t\t\t\t\t// Number of Business Hours\n\t\t\t\t\ttotal: count,\n\t\t\t\t\t// Business Hours strategy\n\t\t\t\t\tstrategy: settings.get('Livechat_enable_business_hours') || '',\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\n\t\t// Type of routing algorithm used on omnichannel\n\t\tstatistics.routingAlgorithm = settings.get('Livechat_Routing_Method');\n\n\t\t// is on-hold active\n\t\tstatistics.onHoldEnabled = settings.get('Livechat_allow_manual_on_hold');\n\n\t\t// Last-Chatted Agent Preferred (enabled/disabled)\n\t\tstatistics.lastChattedAgentPreferred = settings.get('Livechat_last_chatted_agent_routing');\n\n\t\t// Assign new conversations to the contact manager (enabled/disabled)\n\t\tstatistics.assignNewConversationsToContactManager = settings.get('Omnichannel_contact_manager_routing');\n\n\t\t// How to handle Visitor Abandonment setting\n\t\tstatistics.visitorAbandonment = settings.get('Livechat_abandoned_rooms_action');\n\n\t\t// Amount of chats placed on hold\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col.distinct('rid', { t: 'omnichannel_placed_chat_on_hold' }).then((msgs) => {\n\t\t\t\tstatistics.chatsOnHold = msgs.length;\n\t\t\t}),\n\t\t);\n\n\t\t// VoIP Enabled\n\t\tstatistics.voipEnabled = settings.get('VoIP_Enabled');\n\n\t\t// Amount of VoIP Calls\n\t\tstatsPms.push(\n\t\t\tRoomsRaw.col\n\t\t\t\t.find({ t: 'v' })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipCalls = count;\n\t\t\t\t}),\n\t\t);\n\n\t\t// Amount of VoIP Extensions connected\n\t\tstatsPms.push(\n\t\t\tUsersRaw.col\n\t\t\t\t.find({ extension: { $exists: true } })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipExtensions = count;\n\t\t\t\t}),\n\t\t);\n\n\t\t// Amount of Calls that ended properly\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col\n\t\t\t\t.find({ t: 'voip-call-wrapup' })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipSuccessfulCalls = count;\n\t\t\t\t}),\n\t\t);\n\n\t\t// Amount of Calls that ended with an error\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col\n\t\t\t\t.find({ t: 'voip-call-ended-unexpectedly' })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.voipErrorCalls = count;\n\t\t\t\t}),\n\t\t);\n\t\t// Amount of Calls that were put on hold\n\t\tstatsPms.push(\n\t\t\tMessagesRaw.col.distinct('rid', { t: 'voip-call-on-hold' }).then((msgs) => {\n\t\t\t\tstatistics.voipOnHoldCalls = msgs.length;\n\t\t\t}),\n\t\t);\n\n\t\t// Message statistics\n\t\tstatistics.totalChannelMessages = _.reduce(\n\t\t\tRooms.findByType('c', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countChannelMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalPrivateGroupMessages = _.reduce(\n\t\t\tRooms.findByType('p', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countPrivateGroupMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalDirectMessages = _.reduce(\n\t\t\tRooms.findByType('d', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countDirectMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalLivechatMessages = _.reduce(\n\t\t\tRooms.findByType('l', { fields: { msgs: 1 } }).fetch(),\n\t\t\tfunction _countLivechatMessages(num: number, room: IRoom) {\n\t\t\t\treturn num + room.msgs;\n\t\t\t},\n\t\t\t0,\n\t\t);\n\t\tstatistics.totalMessages =\n\t\t\tstatistics.totalChannelMessages +\n\t\t\tstatistics.totalPrivateGroupMessages +\n\t\t\tstatistics.totalDirectMessages +\n\t\t\tstatistics.totalLivechatMessages;\n\n\t\t// Federation statistics\n\t\tstatsPms.push(\n\t\t\tfederationGetStatistics().then((federationOverviewData) => {\n\t\t\t\tstatistics.federatedServers = federationOverviewData.numberOfServers;\n\t\t\t\tstatistics.federatedUsers = federationOverviewData.numberOfFederatedUsers;\n\t\t\t}),\n\t\t);\n\n\t\tstatistics.lastLogin = Users.getLastLogin();\n\t\tstatistics.lastMessageSentAt = Messages.getLastTimestamp();\n\t\tstatistics.lastSeenSubscription = Subscriptions.getLastSeen();\n\n\t\tstatistics.os = {\n\t\t\ttype: os.type(),\n\t\t\tplatform: os.platform(),\n\t\t\tarch: os.arch(),\n\t\t\trelease: os.release(),\n\t\t\tuptime: os.uptime(),\n\t\t\tloadavg: os.loadavg(),\n\t\t\ttotalmem: os.totalmem(),\n\t\t\tfreemem: os.freemem(),\n\t\t\tcpus: os.cpus(),\n\t\t};\n\n\t\tstatistics.process = {\n\t\t\tnodeVersion: process.version,\n\t\t\tpid: process.pid,\n\t\t\tuptime: process.uptime(),\n\t\t};\n\n\t\tstatistics.deploy = {\n\t\t\tmethod: process.env.DEPLOY_METHOD || 'tar',\n\t\t\tplatform: process.env.DEPLOY_PLATFORM || 'selfinstall',\n\t\t};\n\n\t\tstatistics.readReceiptsEnabled = settings.get('Message_Read_Receipt_Enabled');\n\t\tstatistics.readReceiptsDetailed = settings.get('Message_Read_Receipt_Store_Users');\n\n\t\tstatistics.enterpriseReady = true;\n\t\tstatsPms.push(\n\t\t\tUploads.find()\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.uploadsTotal = count;\n\t\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tUploads.col\n\t\t\t\t.aggregate(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$group: { _id: 'total', total: { $sum: '$size' } },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{ readPreference },\n\t\t\t\t)\n\t\t\t\t.toArray()\n\t\t\t\t.then((agg) => {\n\t\t\t\t\tconst [result] = agg;\n\t\t\t\t\tstatistics.uploadsTotalSize = result ? (result as any).total : 0;\n\t\t\t\t}),\n\t\t);\n\n\t\tstatistics.migration = getControl();\n\t\tstatsPms.push(\n\t\t\tInstanceStatus.col\n\t\t\t\t.find({ _updatedAt: { $gt: new Date(Date.now() - process.uptime() * 1000 - 2000) } })\n\t\t\t\t.count()\n\t\t\t\t.then((count) => {\n\t\t\t\t\tstatistics.instanceCount = count;\n\t\t\t\t}),\n\t\t);\n\n\t\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = getMongoInfo();\n\t\tstatistics.oplogEnabled = oplogEnabled;\n\t\tstatistics.mongoVersion = mongoVersion;\n\t\tstatistics.mongoStorageEngine = mongoStorageEngine;\n\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueUsersOfYesterday().then((result) => {\n\t\t\t\tstatistics.uniqueUsersOfYesterday = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueUsersOfLastWeek().then((result) => {\n\t\t\t\tstatistics.uniqueUsersOfLastWeek = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueUsersOfLastMonth().then((result) => {\n\t\t\t\tstatistics.uniqueUsersOfLastMonth = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueDevicesOfYesterday().then((result) => {\n\t\t\t\tstatistics.uniqueDevicesOfYesterday = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueDevicesOfLastWeek().then((result) => {\n\t\t\t\tstatistics.uniqueDevicesOfLastWeek = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueDevicesOfLastMonth().then((result) => {\n\t\t\t\tstatistics.uniqueDevicesOfLastMonth = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueOSOfYesterday().then((result) => {\n\t\t\t\tstatistics.uniqueOSOfYesterday = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueOSOfLastWeek().then((result) => {\n\t\t\t\tstatistics.uniqueOSOfLastWeek = result;\n\t\t\t}),\n\t\t);\n\t\tstatsPms.push(\n\t\t\tSessions.getUniqueOSOfLastMonth().then((result) => {\n\t\t\t\tstatistics.uniqueOSOfLastMonth = result;\n\t\t\t}),\n\t\t);\n\n\t\tstatistics.apps = getAppsStatistics();\n\t\tstatistics.services = getServicesStatistics();\n\n\t\t// If getSettingsStatistics() returns an error, save as empty object.\n\t\tstatsPms.push(\n\t\t\tgetSettingsStatistics().then((res) => {\n\t\t\t\tconst settingsStatisticsObject = res || {};\n\t\t\t\tstatistics.settings = settingsStatisticsObject;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tIntegrations.find(\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: 1,\n\t\t\t\t\t\tenabled: 1,\n\t\t\t\t\t\tscriptEnabled: 1,\n\t\t\t\t\t},\n\t\t\t\t\treadPreference,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\t.toArray()\n\t\t\t\t.then((found) => {\n\t\t\t\t\tconst integrations = found;\n\n\t\t\t\t\tstatistics.integrations = {\n\t\t\t\t\t\ttotalIntegrations: integrations.length,\n\t\t\t\t\t\ttotalIncoming: integrations.filter((integration) => integration.type === 'webhook-incoming').length,\n\t\t\t\t\t\ttotalIncomingActive: integrations.filter(\n\t\t\t\t\t\t\t(integration) => integration.enabled === true && integration.type === 'webhook-incoming',\n\t\t\t\t\t\t).length,\n\t\t\t\t\t\ttotalOutgoing: integrations.filter((integration) => integration.type === 'webhook-outgoing').length,\n\t\t\t\t\t\ttotalOutgoingActive: integrations.filter(\n\t\t\t\t\t\t\t(integration) => integration.enabled === true && integration.type === 'webhook-outgoing',\n\t\t\t\t\t\t).length,\n\t\t\t\t\t\ttotalWithScriptEnabled: integrations.filter((integration) => integration.scriptEnabled === true).length,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tNotificationQueue.col.estimatedDocumentCount().then((count) => {\n\t\t\t\tstatistics.pushQueue = count;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(\n\t\t\tgetEnterpriseStatistics().then((result) => {\n\t\t\t\tstatistics.enterprise = result;\n\t\t\t}),\n\t\t);\n\n\t\tstatsPms.push(Analytics.resetSeatRequestCount());\n\n\t\tstatistics.dashboardCount = settings.get('Engagement_Dashboard_Load_Count');\n\t\tstatistics.messageAuditApply = settings.get('Message_Auditing_Apply_Count');\n\t\tstatistics.messageAuditLoad = settings.get('Message_Auditing_Panel_Load_Count');\n\t\tstatistics.joinJitsiButton = settings.get('Jitsi_Click_To_Join_Count');\n\t\tstatistics.slashCommandsJitsi = settings.get('Jitsi_Start_SlashCommands_Count');\n\t\tstatistics.totalOTRRooms = Rooms.find({ createdOTR: true }).count();\n\t\tstatistics.totalOTR = settings.get('OTR_Count');\n\n\t\tawait Promise.all(statsPms).catch(log);\n\n\t\treturn statistics;\n\t},\n\tasync save(): Promise<IStats> {\n\t\tconst rcStatistics = await statistics.get();\n\t\trcStatistics.createdAt = new Date();\n\t\tawait Statistics.insertOne(rcStatistics);\n\t\treturn rcStatistics;\n\t},\n};\n"],"sourceRoot":""},"sourceType":"module","hash":"a2e03724334f4aa43cab8908b81d284db396f871"}
