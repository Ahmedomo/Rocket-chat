{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/setUserActiveStatus.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/lib/server/functions/setUserActiveStatus.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/setUserActiveStatus.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/setUserActiveStatus.ts","sourceRoot":"","sources":["app/lib/server/functions/setUserActiveStatus.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport * as Mailer from '../../../mailer';\nimport { Users, Subscriptions, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { closeOmnichannelConversations } from './closeOmnichannelConversations';\nimport { shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { IUser, IUserEmail } from '../../../../definition/IUser';\nimport { IDirectMessageRoom } from '../../../../definition/IRoom';\n\nfunction reactivateDirectConversations(userId: string): void {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1 },\n\t}).fetch();\n\tconst userIds = directConversations.reduce((acc: string[], r: IDirectMessageRoom) => acc.push(...r.uids) && acc, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).fetch();\n\tconst activeUserIds = activeUsers.map((u: IUser) => u._id);\n\tconst roomsToReactivate = directConversations.reduce((acc: string[], room: IDirectMessageRoom) => {\n\t\tconst otherUserId = room.uids.find((u: string) => u !== userId);\n\t\tif (activeUserIds.includes(otherUserId)) {\n\t\t\tacc.push(room._id);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\tRooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n}\n\nexport function setUserActiveStatus(userId: string, active: boolean, confirmRelinquish = false): boolean | undefined {\n\tcheck(userId, String);\n\tcheck(active, Boolean);\n\n\tconst user = Users.findOneById(userId);\n\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\t// Users without username can't do anything, so there is no need to check for owned rooms\n\tif (user.username != null && !active) {\n\t\tconst userAdmin = Users.findOneAdmin(userId);\n\t\tconst adminsCount = Users.findActiveUsersInRoles(['admin']).count();\n\t\tif (userAdmin && adminsCount === 1) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n\t\t\t\tmethod: 'removeUserFromRole',\n\t\t\t\taction: 'Remove_last_admin',\n\t\t\t});\n\t\t}\n\n\t\tconst subscribedRooms = getSubscribedRoomsForUserWithDetails(userId);\n\t\t// give omnichannel rooms a special treatment :)\n\t\tconst chatSubscribedRooms = subscribedRooms.filter(({ t }) => t !== 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\n\t\tif (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n\t\t\tconst rooms = getUserSingleOwnedRooms(chatSubscribedRooms as []);\n\t\t\tthrow new Meteor.Error('user-last-owner', '', String(rooms));\n\t\t}\n\n\t\tcloseOmnichannelConversations(user, livechatSubscribedRooms);\n\t\tPromise.await(relinquishRoomOwnerships(user, chatSubscribedRooms, false));\n\t}\n\n\tif (active && !user.active) {\n\t\tcallbacks.run('beforeActivateUser', user);\n\t}\n\n\tUsers.setUserActive(userId, active);\n\n\tif (active && !user.active) {\n\t\tcallbacks.run('afterActivateUser', user);\n\t}\n\n\tif (!active && user.active) {\n\t\tcallbacks.run('afterDeactivateUser', user);\n\t}\n\n\tif (user.username) {\n\t\tSubscriptions.setArchivedByUsername(user.username, !active);\n\t}\n\n\tif (active === false) {\n\t\tUsers.unsetLoginTokens(userId);\n\t\tRooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n\t} else {\n\t\tUsers.unsetReason(userId);\n\t\treactivateDirectConversations(userId);\n\t}\n\tif (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n\t\treturn true;\n\t}\n\tif (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n\t\treturn true;\n\t}\n\n\tconst destinations =\n\t\tArray.isArray(user.emails) && user.emails.map((email: IUserEmail) => `${user.name || user.username}<${email.address}>`);\n\n\ttype UserActivated = {\n\t\tsubject: (params: { active: boolean }) => string;\n\t\thtml: (params: { active: boolean; name: string; username: string }) => string;\n\t};\n\tconst { subject, html } = (Accounts.emailTemplates as unknown as { userActivated: UserActivated }).userActivated;\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),\n\t\thtml: html({\n\t\t\tactive,\n\t\t\tname: user.name,\n\t\t\tusername: user.username,\n\t\t} as any),\n\t};\n\n\tMailer.sendNoWrap(email);\n}\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/lib/server/functions/setUserActiveStatus.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/setUserActiveStatus.ts"}},"code":"module.export({\n  setUserActiveStatus: () => setUserActiveStatus\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet Mailer;\nmodule.link(\"../../../mailer\", {\n  \"*\"(v) {\n    Mailer = v;\n  }\n\n}, 3);\nlet Users, Subscriptions, Rooms;\nmodule.link(\"../../../models/server\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n\n  Rooms(v) {\n    Rooms = v;\n  }\n\n}, 4);\nlet settings;\nmodule.link(\"../../../settings/server\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 5);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n\n}, 6);\nlet relinquishRoomOwnerships;\nmodule.link(\"./relinquishRoomOwnerships\", {\n  relinquishRoomOwnerships(v) {\n    relinquishRoomOwnerships = v;\n  }\n\n}, 7);\nlet closeOmnichannelConversations;\nmodule.link(\"./closeOmnichannelConversations\", {\n  closeOmnichannelConversations(v) {\n    closeOmnichannelConversations = v;\n  }\n\n}, 8);\nlet shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails;\nmodule.link(\"./getRoomsWithSingleOwner\", {\n  shouldRemoveOrChangeOwner(v) {\n    shouldRemoveOrChangeOwner = v;\n  },\n\n  getSubscribedRoomsForUserWithDetails(v) {\n    getSubscribedRoomsForUserWithDetails = v;\n  }\n\n}, 9);\nlet getUserSingleOwnedRooms;\nmodule.link(\"./getUserSingleOwnedRooms\", {\n  getUserSingleOwnedRooms(v) {\n    getUserSingleOwnedRooms = v;\n  }\n\n}, 10);\n\nfunction reactivateDirectConversations(userId) {\n  // since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n  // for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n  const directConversations = Rooms.getDirectConversationsByUserId(userId, {\n    projection: {\n      _id: 1,\n      uids: 1\n    }\n  }).fetch();\n  const userIds = directConversations.reduce((acc, r) => acc.push(...r.uids) && acc, []);\n  const uniqueUserIds = [...new Set(userIds)];\n  const activeUsers = Users.findActiveByUserIds(uniqueUserIds, {\n    projection: {\n      _id: 1\n    }\n  }).fetch();\n  const activeUserIds = activeUsers.map(u => u._id);\n  const roomsToReactivate = directConversations.reduce((acc, room) => {\n    const otherUserId = room.uids.find(u => u !== userId);\n\n    if (activeUserIds.includes(otherUserId)) {\n      acc.push(room._id);\n    }\n\n    return acc;\n  }, []);\n  Rooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n}\n\nfunction setUserActiveStatus(userId, active) {\n  let confirmRelinquish = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  check(userId, String);\n  check(active, Boolean);\n  const user = Users.findOneById(userId);\n\n  if (!user) {\n    return false;\n  } // Users without username can't do anything, so there is no need to check for owned rooms\n\n\n  if (user.username != null && !active) {\n    const userAdmin = Users.findOneAdmin(userId);\n    const adminsCount = Users.findActiveUsersInRoles(['admin']).count();\n\n    if (userAdmin && adminsCount === 1) {\n      throw new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n        method: 'removeUserFromRole',\n        action: 'Remove_last_admin'\n      });\n    }\n\n    const subscribedRooms = getSubscribedRoomsForUserWithDetails(userId); // give omnichannel rooms a special treatment :)\n\n    const chatSubscribedRooms = subscribedRooms.filter(_ref => {\n      let {\n        t\n      } = _ref;\n      return t !== 'l';\n    });\n    const livechatSubscribedRooms = subscribedRooms.filter(_ref2 => {\n      let {\n        t\n      } = _ref2;\n      return t === 'l';\n    });\n\n    if (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n      const rooms = getUserSingleOwnedRooms(chatSubscribedRooms);\n      throw new Meteor.Error('user-last-owner', '', String(rooms));\n    }\n\n    closeOmnichannelConversations(user, livechatSubscribedRooms);\n    Promise.await(relinquishRoomOwnerships(user, chatSubscribedRooms, false));\n  }\n\n  if (active && !user.active) {\n    callbacks.run('beforeActivateUser', user);\n  }\n\n  Users.setUserActive(userId, active);\n\n  if (active && !user.active) {\n    callbacks.run('afterActivateUser', user);\n  }\n\n  if (!active && user.active) {\n    callbacks.run('afterDeactivateUser', user);\n  }\n\n  if (user.username) {\n    Subscriptions.setArchivedByUsername(user.username, !active);\n  }\n\n  if (active === false) {\n    Users.unsetLoginTokens(userId);\n    Rooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n  } else {\n    Users.unsetReason(userId);\n    reactivateDirectConversations(userId);\n  }\n\n  if (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n    return true;\n  }\n\n  if (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n    return true;\n  }\n\n  const destinations = Array.isArray(user.emails) && user.emails.map(email => \"\".concat(user.name || user.username, \"<\").concat(email.address, \">\"));\n  const {\n    subject,\n    html\n  } = Accounts.emailTemplates.userActivated;\n  const email = {\n    to: String(destinations),\n    from: String(settings.get('From_Email')),\n    subject: subject({\n      active\n    }),\n    html: html({\n      active,\n      name: user.name,\n      username: user.username\n    })\n  };\n  Mailer.sendNoWrap(email);\n}","map":{"version":3,"sources":["app/lib/server/functions/setUserActiveStatus.ts"],"names":[],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport * as Mailer from '../../../mailer';\nimport { Users, Subscriptions, Rooms } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { closeOmnichannelConversations } from './closeOmnichannelConversations';\nimport { shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { IUser, IUserEmail } from '../../../../definition/IUser';\nimport { IDirectMessageRoom } from '../../../../definition/IRoom';\n\nfunction reactivateDirectConversations(userId: string): void {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1 },\n\t}).fetch();\n\tconst userIds = directConversations.reduce((acc: string[], r: IDirectMessageRoom) => acc.push(...r.uids) && acc, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).fetch();\n\tconst activeUserIds = activeUsers.map((u: IUser) => u._id);\n\tconst roomsToReactivate = directConversations.reduce((acc: string[], room: IDirectMessageRoom) => {\n\t\tconst otherUserId = room.uids.find((u: string) => u !== userId);\n\t\tif (activeUserIds.includes(otherUserId)) {\n\t\t\tacc.push(room._id);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\tRooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n}\n\nexport function setUserActiveStatus(userId: string, active: boolean, confirmRelinquish = false): boolean | undefined {\n\tcheck(userId, String);\n\tcheck(active, Boolean);\n\n\tconst user = Users.findOneById(userId);\n\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\t// Users without username can't do anything, so there is no need to check for owned rooms\n\tif (user.username != null && !active) {\n\t\tconst userAdmin = Users.findOneAdmin(userId);\n\t\tconst adminsCount = Users.findActiveUsersInRoles(['admin']).count();\n\t\tif (userAdmin && adminsCount === 1) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n\t\t\t\tmethod: 'removeUserFromRole',\n\t\t\t\taction: 'Remove_last_admin',\n\t\t\t});\n\t\t}\n\n\t\tconst subscribedRooms = getSubscribedRoomsForUserWithDetails(userId);\n\t\t// give omnichannel rooms a special treatment :)\n\t\tconst chatSubscribedRooms = subscribedRooms.filter(({ t }) => t !== 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\n\t\tif (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n\t\t\tconst rooms = getUserSingleOwnedRooms(chatSubscribedRooms as []);\n\t\t\tthrow new Meteor.Error('user-last-owner', '', String(rooms));\n\t\t}\n\n\t\tcloseOmnichannelConversations(user, livechatSubscribedRooms);\n\t\tPromise.await(relinquishRoomOwnerships(user, chatSubscribedRooms, false));\n\t}\n\n\tif (active && !user.active) {\n\t\tcallbacks.run('beforeActivateUser', user);\n\t}\n\n\tUsers.setUserActive(userId, active);\n\n\tif (active && !user.active) {\n\t\tcallbacks.run('afterActivateUser', user);\n\t}\n\n\tif (!active && user.active) {\n\t\tcallbacks.run('afterDeactivateUser', user);\n\t}\n\n\tif (user.username) {\n\t\tSubscriptions.setArchivedByUsername(user.username, !active);\n\t}\n\n\tif (active === false) {\n\t\tUsers.unsetLoginTokens(userId);\n\t\tRooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n\t} else {\n\t\tUsers.unsetReason(userId);\n\t\treactivateDirectConversations(userId);\n\t}\n\tif (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n\t\treturn true;\n\t}\n\tif (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n\t\treturn true;\n\t}\n\n\tconst destinations =\n\t\tArray.isArray(user.emails) && user.emails.map((email: IUserEmail) => `${user.name || user.username}<${email.address}>`);\n\n\ttype UserActivated = {\n\t\tsubject: (params: { active: boolean }) => string;\n\t\thtml: (params: { active: boolean; name: string; username: string }) => string;\n\t};\n\tconst { subject, html } = (Accounts.emailTemplates as unknown as { userActivated: UserActivated }).userActivated;\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),\n\t\thtml: html({\n\t\t\tactive,\n\t\t\tname: user.name,\n\t\t\tusername: user.username,\n\t\t} as any),\n\t};\n\n\tMailer.sendNoWrap(email);\n}\n"],"sourceRoot":""},"sourceType":"module","hash":"4faeca977b5ee39b200b1b3df749739d9cf67b99"}
