{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/omnichannel.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/api/server/v1/voip/omnichannel.ts","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/omnichannel.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/omnichannel.ts","sourceRoot":"","sources":["app/api/server/v1/voip/omnichannel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\nimport { Users } from '../../../../models/server/raw/index';\nimport { hasPermission } from '../../../../authorization/server/index';\nimport { LivechatVoip } from '../../../../../server/sdk';\nimport { logger } from './logger';\nimport { IUser } from '../../../../../definition/IUser';\n\nfunction paginate<T>(array: T[], count = 10, offset = 0): T[] {\n\treturn array.slice(offset, offset + count);\n}\n\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension',\n\t{ authRequired: true },\n\t{\n\t\t// Get the extensions associated with the agent passed as request params.\n\t\tasync get() {\n\t\t\tif (!hasPermission(this.userId, 'view-agent-extension-association')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.requestParams();\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found');\n\t\t\t}\n\t\t\tconst extension = await Users.getVoipExtensionByUserId(user._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!extension) {\n\t\t\t\treturn API.v1.notFound('Extension not found');\n\t\t\t}\n\t\t\treturn API.v1.success({ extension });\n\t\t},\n\n\t\t// Create agent-extension association.\n\t\tasync post() {\n\t\t\tif (!hasPermission(this.userId, 'manage-agent-extension-association')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst { extension } = this.bodyParams;\n\t\t\tlet user: IUser | null = null;\n\n\t\t\tif (!isUserAndExtensionParams(this.bodyParams)) {\n\t\t\t\tif (!this.bodyParams.username) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneByAgentUsername(this.bodyParams.username, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.bodyParams.userId) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneAgentById(this.bodyParams.userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogger.debug(`Setting extension ${extension} for agent with id ${user._id}`);\n\t\t\t\tawait Users.setExtension(user._id, extension);\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error({ msg: 'Extension already in use' });\n\t\t\t\treturn API.v1.failure(`extension already in use ${extension}`);\n\t\t\t}\n\t\t},\n\n\t\tasync delete() {\n\t\t\tif (!hasPermission(this.userId, 'manage-agent-extension-association')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.requestParams();\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\t\t\tif (!user.extension) {\n\t\t\t\tlogger.debug(`User ${user._id} is not associated with any extension. Skipping`);\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlogger.debug(`Removing extension association for user ${user._id} (extension was ${user.extension})`);\n\t\t\tawait Users.unsetExtension(user._id);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Get free extensions\nAPI.v1.addRoute(\n\t'omnichannel/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst { type } = this.queryParams;\n\t\t\tswitch ((type as string).toLowerCase()) {\n\t\t\t\tcase 'free': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in finding free extensons');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tcase 'allocated': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getExtensionAllocationDetails();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in allocated extensions');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions: extensions.map((e) => e.extension) });\n\t\t\t\t}\n\t\t\t\tcase 'available': {\n\t\t\t\t\tlet user: IUser | null = null;\n\t\t\t\t\tif (!isUserIdndTypeParams(this.queryParams)) {\n\t\t\t\t\t\tuser = await Users.findOneByAgentUsername(this.queryParams.username, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuser = await Users.findOneAgentById(this.queryParams.userId, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.notFound(`${type} not found `);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/extensions',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst extensions = await LivechatVoip.getExtensionListWithAgentData();\n\n\t\t\t// paginating in memory as Asterisk doesn't provide pagination for commands\n\t\t\treturn API.v1.success({\n\t\t\t\textensions: paginate(extensions, count, offset),\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal: extensions.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agents/available',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { text, includeExtension = '' } = this.queryParams;\n\n\t\t\tconst { agents, total } = await LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tagents,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/api/server/v1/voip/omnichannel.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/voip/omnichannel.ts"}},"code":"let Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet API;\nmodule.link(\"../../api\", {\n  API(v) {\n    API = v;\n  }\n\n}, 1);\nlet Users;\nmodule.link(\"../../../../models/server/raw/index\", {\n  Users(v) {\n    Users = v;\n  }\n\n}, 2);\nlet hasPermission;\nmodule.link(\"../../../../authorization/server/index\", {\n  hasPermission(v) {\n    hasPermission = v;\n  }\n\n}, 3);\nlet LivechatVoip;\nmodule.link(\"../../../../../server/sdk\", {\n  LivechatVoip(v) {\n    LivechatVoip = v;\n  }\n\n}, 4);\nlet logger;\nmodule.link(\"./logger\", {\n  logger(v) {\n    logger = v;\n  }\n\n}, 5);\n\nfunction paginate(array) {\n  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return array.slice(offset, offset + count);\n}\n\nconst isUserAndExtensionParams = p => p.userId && p.extension;\n\nconst isUserIdndTypeParams = p => p.userId && p.type;\n\nAPI.v1.addRoute('omnichannel/agent/extension', {\n  authRequired: true\n}, {\n  // Get the extensions associated with the agent passed as request params.\n  get() {\n    return Promise.asyncApply(() => {\n      if (!hasPermission(this.userId, 'view-agent-extension-association')) {\n        return API.v1.unauthorized();\n      }\n\n      check(this.requestParams(), Match.ObjectIncluding({\n        username: String\n      }));\n      const {\n        username\n      } = this.requestParams();\n      const user = Promise.await(Users.findOneByAgentUsername(username, {\n        projection: {\n          _id: 1\n        }\n      }));\n\n      if (!user) {\n        return API.v1.notFound('User not found');\n      }\n\n      const extension = Promise.await(Users.getVoipExtensionByUserId(user._id, {\n        projection: {\n          _id: 1,\n          username: 1,\n          extension: 1\n        }\n      }));\n\n      if (!extension) {\n        return API.v1.notFound('Extension not found');\n      }\n\n      return API.v1.success({\n        extension\n      });\n    });\n  },\n\n  // Create agent-extension association.\n  post() {\n    return Promise.asyncApply(() => {\n      if (!hasPermission(this.userId, 'manage-agent-extension-association')) {\n        return API.v1.unauthorized();\n      }\n\n      check(this.bodyParams, Match.OneOf(Match.ObjectIncluding({\n        username: String,\n        extension: String\n      }), Match.ObjectIncluding({\n        userId: String,\n        extension: String\n      })));\n      const {\n        extension\n      } = this.bodyParams;\n      let user = null;\n\n      if (!isUserAndExtensionParams(this.bodyParams)) {\n        if (!this.bodyParams.username) {\n          return API.v1.notFound();\n        }\n\n        user = Promise.await(Users.findOneByAgentUsername(this.bodyParams.username, {\n          projection: {\n            _id: 1,\n            username: 1\n          }\n        }));\n      } else {\n        if (!this.bodyParams.userId) {\n          return API.v1.notFound();\n        }\n\n        user = Promise.await(Users.findOneAgentById(this.bodyParams.userId, {\n          projection: {\n            _id: 1,\n            username: 1\n          }\n        }));\n      }\n\n      if (!user) {\n        return API.v1.notFound();\n      }\n\n      try {\n        logger.debug(\"Setting extension \".concat(extension, \" for agent with id \").concat(user._id));\n        Promise.await(Users.setExtension(user._id, extension));\n        return API.v1.success();\n      } catch (e) {\n        logger.error({\n          msg: 'Extension already in use'\n        });\n        return API.v1.failure(\"extension already in use \".concat(extension));\n      }\n    });\n  },\n\n  delete() {\n    return Promise.asyncApply(() => {\n      if (!hasPermission(this.userId, 'manage-agent-extension-association')) {\n        return API.v1.unauthorized();\n      }\n\n      check(this.requestParams(), Match.ObjectIncluding({\n        username: String\n      }));\n      const {\n        username\n      } = this.requestParams();\n      const user = Promise.await(Users.findOneByAgentUsername(username, {\n        projection: {\n          _id: 1,\n          username: 1,\n          extension: 1\n        }\n      }));\n\n      if (!user) {\n        return API.v1.notFound();\n      }\n\n      if (!user.extension) {\n        logger.debug(\"User \".concat(user._id, \" is not associated with any extension. Skipping\"));\n        return API.v1.success();\n      }\n\n      logger.debug(\"Removing extension association for user \".concat(user._id, \" (extension was \").concat(user.extension, \")\"));\n      Promise.await(Users.unsetExtension(user._id));\n      return API.v1.success();\n    });\n  }\n\n}); // Get free extensions\n\nAPI.v1.addRoute('omnichannel/extension', {\n  authRequired: true,\n  permissionsRequired: ['manage-agent-extension-association']\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      check(this.queryParams, Match.OneOf(Match.ObjectIncluding({\n        type: Match.OneOf('free', 'allocated', 'available'),\n        userId: String\n      }), Match.ObjectIncluding({\n        type: Match.OneOf('free', 'allocated', 'available'),\n        username: String\n      })));\n      const {\n        type\n      } = this.queryParams;\n\n      switch (type.toLowerCase()) {\n        case 'free':\n          {\n            const extensions = Promise.await(LivechatVoip.getFreeExtensions());\n\n            if (!extensions) {\n              return API.v1.failure('Error in finding free extensons');\n            }\n\n            return API.v1.success({\n              extensions\n            });\n          }\n\n        case 'allocated':\n          {\n            const extensions = Promise.await(LivechatVoip.getExtensionAllocationDetails());\n\n            if (!extensions) {\n              return API.v1.failure('Error in allocated extensions');\n            }\n\n            return API.v1.success({\n              extensions: extensions.map(e => e.extension)\n            });\n          }\n\n        case 'available':\n          {\n            var _user;\n\n            let user = null;\n\n            if (!isUserIdndTypeParams(this.queryParams)) {\n              user = Promise.await(Users.findOneByAgentUsername(this.queryParams.username, {\n                projection: {\n                  _id: 1,\n                  extension: 1\n                }\n              }));\n            } else {\n              user = Promise.await(Users.findOneAgentById(this.queryParams.userId, {\n                projection: {\n                  _id: 1,\n                  extension: 1\n                }\n              }));\n            }\n\n            const freeExt = Promise.await(LivechatVoip.getFreeExtensions());\n            const extensions = (_user = user) !== null && _user !== void 0 && _user.extension ? [user.extension, ...freeExt] : freeExt;\n            return API.v1.success({\n              extensions\n            });\n          }\n\n        default:\n          return API.v1.notFound(\"\".concat(type, \" not found \"));\n      }\n    });\n  }\n\n});\nAPI.v1.addRoute('omnichannel/extensions', {\n  authRequired: true,\n  permissionsRequired: ['manage-agent-extension-association']\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const extensions = Promise.await(LivechatVoip.getExtensionListWithAgentData()); // paginating in memory as Asterisk doesn't provide pagination for commands\n\n      return API.v1.success({\n        extensions: paginate(extensions, count, offset),\n        offset,\n        count,\n        total: extensions.length\n      });\n    });\n  }\n\n});\nAPI.v1.addRoute('omnichannel/agents/available', {\n  authRequired: true,\n  permissionsRequired: ['manage-agent-extension-association']\n}, {\n  get() {\n    return Promise.asyncApply(() => {\n      const {\n        offset,\n        count\n      } = this.getPaginationItems();\n      const {\n        sort\n      } = this.parseJsonQuery();\n      const {\n        text,\n        includeExtension = ''\n      } = this.queryParams;\n      const {\n        agents,\n        total\n      } = Promise.await(LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort));\n      return API.v1.success({\n        agents,\n        offset,\n        count,\n        total\n      });\n    });\n  }\n\n});","map":{"version":3,"sources":["app/api/server/v1/voip/omnichannel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\nimport { Users } from '../../../../models/server/raw/index';\nimport { hasPermission } from '../../../../authorization/server/index';\nimport { LivechatVoip } from '../../../../../server/sdk';\nimport { logger } from './logger';\nimport { IUser } from '../../../../../definition/IUser';\n\nfunction paginate<T>(array: T[], count = 10, offset = 0): T[] {\n\treturn array.slice(offset, offset + count);\n}\n\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension',\n\t{ authRequired: true },\n\t{\n\t\t// Get the extensions associated with the agent passed as request params.\n\t\tasync get() {\n\t\t\tif (!hasPermission(this.userId, 'view-agent-extension-association')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.requestParams();\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found');\n\t\t\t}\n\t\t\tconst extension = await Users.getVoipExtensionByUserId(user._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!extension) {\n\t\t\t\treturn API.v1.notFound('Extension not found');\n\t\t\t}\n\t\t\treturn API.v1.success({ extension });\n\t\t},\n\n\t\t// Create agent-extension association.\n\t\tasync post() {\n\t\t\tif (!hasPermission(this.userId, 'manage-agent-extension-association')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst { extension } = this.bodyParams;\n\t\t\tlet user: IUser | null = null;\n\n\t\t\tif (!isUserAndExtensionParams(this.bodyParams)) {\n\t\t\t\tif (!this.bodyParams.username) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneByAgentUsername(this.bodyParams.username, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.bodyParams.userId) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneAgentById(this.bodyParams.userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogger.debug(`Setting extension ${extension} for agent with id ${user._id}`);\n\t\t\t\tawait Users.setExtension(user._id, extension);\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error({ msg: 'Extension already in use' });\n\t\t\t\treturn API.v1.failure(`extension already in use ${extension}`);\n\t\t\t}\n\t\t},\n\n\t\tasync delete() {\n\t\t\tif (!hasPermission(this.userId, 'manage-agent-extension-association')) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tcheck(\n\t\t\t\tthis.requestParams(),\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.requestParams();\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\t\t\tif (!user.extension) {\n\t\t\t\tlogger.debug(`User ${user._id} is not associated with any extension. Skipping`);\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlogger.debug(`Removing extension association for user ${user._id} (extension was ${user.extension})`);\n\t\t\tawait Users.unsetExtension(user._id);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Get free extensions\nAPI.v1.addRoute(\n\t'omnichannel/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst { type } = this.queryParams;\n\t\t\tswitch ((type as string).toLowerCase()) {\n\t\t\t\tcase 'free': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in finding free extensons');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tcase 'allocated': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getExtensionAllocationDetails();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in allocated extensions');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions: extensions.map((e) => e.extension) });\n\t\t\t\t}\n\t\t\t\tcase 'available': {\n\t\t\t\t\tlet user: IUser | null = null;\n\t\t\t\t\tif (!isUserIdndTypeParams(this.queryParams)) {\n\t\t\t\t\t\tuser = await Users.findOneByAgentUsername(this.queryParams.username, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuser = await Users.findOneAgentById(this.queryParams.userId, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.notFound(`${type} not found `);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/extensions',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst extensions = await LivechatVoip.getExtensionListWithAgentData();\n\n\t\t\t// paginating in memory as Asterisk doesn't provide pagination for commands\n\t\t\treturn API.v1.success({\n\t\t\t\textensions: paginate(extensions, count, offset),\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal: extensions.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agents/available',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = this.getPaginationItems();\n\t\t\tconst { sort } = this.parseJsonQuery();\n\t\t\tconst { text, includeExtension = '' } = this.queryParams;\n\n\t\t\tconst { agents, total } = await LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tagents,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"c3e9391c9513e173ef54a1ffd828878b47a2cf81"}
