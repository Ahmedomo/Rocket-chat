{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Users.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/models/server/models/Users.js","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Users.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Users.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/Users.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Users: () => Users\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 2);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 3);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 4);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 5);\nlet Subscriptions;\nmodule.link(\"./Subscriptions\", {\n  default(v) {\n    Subscriptions = v;\n  }\n\n}, 6);\nlet settings;\nmodule.link(\"../../../settings/server/functions/settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 7);\n\nconst queryStatusAgentOnline = function () {\n  let extraFilters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _objectSpread(_objectSpread({\n    statusLivechat: 'available',\n    roles: 'livechat-agent',\n    $or: [{\n      status: {\n        $exists: true,\n        $ne: 'offline'\n      },\n      roles: {\n        $ne: 'bot'\n      }\n    }, {\n      roles: 'bot'\n    }]\n  }, extraFilters), settings.get('Livechat_enabled_when_agent_idle') === false && {\n    statusConnection: {\n      $ne: 'away'\n    }\n  });\n};\n\nclass Users extends Base {\n  constructor() {\n    super(...arguments);\n    this.defaultFields = {\n      __rooms: 0\n    };\n    this.tryEnsureIndex({\n      __rooms: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      roles: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      name: 1\n    });\n    this.tryEnsureIndex({\n      bio: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      nickname: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      createdAt: 1\n    });\n    this.tryEnsureIndex({\n      lastLogin: 1\n    });\n    this.tryEnsureIndex({\n      status: 1\n    });\n    this.tryEnsureIndex({\n      statusText: 1\n    });\n    this.tryEnsureIndex({\n      active: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      statusConnection: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      appId: 1\n    }, {\n      sparse: 1\n    });\n    this.tryEnsureIndex({\n      type: 1\n    });\n    this.tryEnsureIndex({\n      'visitorEmails.address': 1\n    });\n    this.tryEnsureIndex({\n      federation: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      isRemote: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'services.saml.inResponseTo': 1\n    });\n    this.tryEnsureIndex({\n      openBusinessHours: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      statusLivechat: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      extension: 1\n    }, {\n      sparse: true,\n      unique: true\n    });\n    this.tryEnsureIndex({\n      language: 1\n    }, {\n      sparse: true\n    });\n    const collectionObj = this.model.rawCollection();\n    this.findAndModify = Meteor.wrapAsync(collectionObj.findAndModify, collectionObj);\n  }\n\n  getLoginTokensByUserId(userId) {\n    const query = {\n      'services.resume.loginTokens.type': {\n        $exists: true,\n        $eq: 'personalAccessToken'\n      },\n      '_id': userId\n    };\n    return this.find(query, {\n      fields: {\n        'services.resume.loginTokens': 1\n      }\n    });\n  }\n\n  addPersonalAccessTokenToUser(_ref) {\n    let {\n      userId,\n      loginTokenObject\n    } = _ref;\n    return this.update(userId, {\n      $push: {\n        'services.resume.loginTokens': loginTokenObject\n      }\n    });\n  }\n\n  removePersonalAccessTokenOfUser(_ref2) {\n    let {\n      userId,\n      loginTokenObject\n    } = _ref2;\n    return this.update(userId, {\n      $pull: {\n        'services.resume.loginTokens': loginTokenObject\n      }\n    });\n  }\n\n  findPersonalAccessTokenByTokenNameAndUserId(_ref3) {\n    let {\n      userId,\n      tokenName\n    } = _ref3;\n    const query = {\n      'services.resume.loginTokens': {\n        $elemMatch: {\n          name: tokenName,\n          type: 'personalAccessToken'\n        }\n      },\n      '_id': userId\n    };\n    return this.findOne(query);\n  }\n\n  setOperator(_id, operator) {\n    // TODO:: Create class Agent\n    const update = {\n      $set: {\n        operator\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  checkOnlineAgents(agentId) {\n    // TODO:: Create class Agent\n    const query = queryStatusAgentOnline(agentId && {\n      _id: agentId\n    });\n    return Boolean(this.findOne(query));\n  }\n\n  findOnlineAgents(agentId) {\n    // TODO:: Create class Agent\n    const query = queryStatusAgentOnline(agentId && {\n      _id: agentId\n    });\n    return this.find(query);\n  }\n\n  findBotAgents(usernameList) {\n    // TODO:: Create class Agent\n    const query = _objectSpread({\n      roles: {\n        $all: ['bot', 'livechat-agent']\n      }\n    }, usernameList && {\n      username: {\n        $in: [].concat(usernameList)\n      }\n    });\n\n    return this.find(query);\n  }\n\n  findOneBotAgent() {\n    // TODO:: Create class Agent\n    const query = {\n      roles: {\n        $all: ['bot', 'livechat-agent']\n      }\n    };\n    return this.findOne(query);\n  }\n\n  findOneOnlineAgentByUserList(userList, options) {\n    // TODO:: Create class Agent\n    const username = {\n      $in: [].concat(userList)\n    };\n    const query = queryStatusAgentOnline({\n      username\n    });\n    return this.findOne(query, options);\n  }\n\n  findOneOnlineAgentById(_id) {\n    // TODO: Create class Agent\n    const query = queryStatusAgentOnline({\n      _id\n    });\n    return this.findOne(query);\n  }\n\n  findOneAgentById(_id, options) {\n    // TODO: Create class Agent\n    const query = {\n      _id,\n      roles: 'livechat-agent'\n    };\n    return this.findOne(query, options);\n  }\n\n  findAgents() {\n    // TODO: Create class Agent\n    const query = {\n      roles: 'livechat-agent'\n    };\n    return this.find(query);\n  }\n\n  findOnlineUserFromList(userList) {\n    // TODO: Create class Agent\n    const username = {\n      $in: [].concat(userList)\n    };\n    const query = queryStatusAgentOnline({\n      username\n    });\n    return this.find(query);\n  }\n\n  getNextAgent(ignoreAgentId, extraQuery) {\n    // TODO: Create class Agent\n    // fetch all unavailable agents, and exclude them from the selection\n    const unavailableAgents = Promise.await(this.getUnavailableAgents(null, extraQuery)).map(u => u.username);\n\n    const extraFilters = _objectSpread(_objectSpread({}, ignoreAgentId && {\n      _id: {\n        $ne: ignoreAgentId\n      }\n    }), {}, {\n      // limit query to remove booked agents\n      username: {\n        $nin: unavailableAgents\n      }\n    });\n\n    const query = queryStatusAgentOnline(extraFilters);\n    const sort = {\n      livechatCount: 1,\n      username: 1\n    };\n    const update = {\n      $inc: {\n        livechatCount: 1\n      }\n    };\n    const user = this.findAndModify(query, sort, update);\n\n    if (user && user.value) {\n      return {\n        agentId: user.value._id,\n        username: user.value.username\n      };\n    }\n\n    return null;\n  }\n\n  getUnavailableAgents() {\n    return [];\n  }\n\n  getNextBotAgent(ignoreAgentId) {\n    // TODO: Create class Agent\n    const query = _objectSpread({\n      roles: {\n        $all: ['bot', 'livechat-agent']\n      }\n    }, ignoreAgentId && {\n      _id: {\n        $ne: ignoreAgentId\n      }\n    });\n\n    const sort = {\n      livechatCount: 1,\n      username: 1\n    };\n    const update = {\n      $inc: {\n        livechatCount: 1\n      }\n    };\n    const user = this.findAndModify(query, sort, update);\n\n    if (user && user.value) {\n      return {\n        agentId: user.value._id,\n        username: user.value.username\n      };\n    }\n\n    return null;\n  }\n\n  setLivechatStatus(userId, status) {\n    // TODO: Create class Agent\n    const query = {\n      _id: userId\n    };\n    const update = {\n      $set: {\n        statusLivechat: status,\n        livechatStatusSystemModified: false\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setLivechatData(userId) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // TODO: Create class Agent\n    const query = {\n      _id: userId\n    };\n    const update = {\n      $set: {\n        livechat: data\n      }\n    };\n    return this.update(query, update);\n  }\n\n  closeOffice() {\n    // TODO: Create class Agent\n    this.findAgents().forEach(agent => this.setLivechatStatus(agent._id, 'not-available'));\n  }\n\n  openOffice() {\n    // TODO: Create class Agent\n    this.findAgents().forEach(agent => this.setLivechatStatus(agent._id, 'available'));\n  }\n\n  getAgentInfo(agentId) {\n    // TODO: Create class Agent\n    const query = {\n      _id: agentId\n    };\n    const options = {\n      fields: {\n        name: 1,\n        username: 1,\n        phone: 1,\n        customFields: 1,\n        status: 1,\n        livechat: 1\n      }\n    };\n\n    if (settings.get('Livechat_show_agent_email')) {\n      options.fields.emails = 1;\n    }\n\n    return this.findOne(query, options);\n  }\n\n  setTokenpassTcaBalances(_id, tcaBalances) {\n    const update = {\n      $set: {\n        'services.tokenpass.tcaBalances': tcaBalances\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  getTokenBalancesByUserId(userId) {\n    const query = {\n      _id: userId\n    };\n    const options = {\n      fields: {\n        'services.tokenpass.tcaBalances': 1\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  roleBaseQuery(userId) {\n    return {\n      _id: userId\n    };\n  }\n\n  setE2EPublicAndPrivateKeysByUserId(userId, _ref4) {\n    let {\n      public_key,\n      private_key\n    } = _ref4;\n    this.update({\n      _id: userId\n    }, {\n      $set: {\n        'e2e.public_key': public_key,\n        'e2e.private_key': private_key\n      }\n    });\n  }\n\n  rocketMailUnsubscribe(_id, createdAt) {\n    const query = {\n      _id,\n      createdAt: new Date(parseInt(createdAt))\n    };\n    const update = {\n      $set: {\n        'mailer.unsubscribed': true\n      }\n    };\n    const affectedRows = this.update(query, update);\n    return affectedRows;\n  }\n\n  fetchKeysByUserId(userId) {\n    const user = this.findOne({\n      _id: userId\n    }, {\n      fields: {\n        e2e: 1\n      }\n    });\n\n    if (!user || !user.e2e || !user.e2e.public_key) {\n      return {};\n    }\n\n    return {\n      public_key: user.e2e.public_key,\n      private_key: user.e2e.private_key\n    };\n  }\n\n  disable2FAAndSetTempSecretByUserId(userId, tempToken) {\n    return this.update({\n      _id: userId\n    }, {\n      $set: {\n        'services.totp': {\n          enabled: false,\n          tempSecret: tempToken\n        }\n      }\n    });\n  }\n\n  enable2FAAndSetSecretAndCodesByUserId(userId, secret, backupCodes) {\n    return this.update({\n      _id: userId\n    }, {\n      $set: {\n        'services.totp.enabled': true,\n        'services.totp.secret': secret,\n        'services.totp.hashedBackup': backupCodes\n      },\n      $unset: {\n        'services.totp.tempSecret': 1\n      }\n    });\n  }\n\n  disable2FAByUserId(userId) {\n    return this.update({\n      _id: userId\n    }, {\n      $set: {\n        'services.totp': {\n          enabled: false\n        }\n      }\n    });\n  }\n\n  addRoomByUserId(_id, rid) {\n    return this.update({\n      _id,\n      __rooms: {\n        $ne: rid\n      }\n    }, {\n      $addToSet: {\n        __rooms: rid\n      }\n    });\n  }\n\n  removeRoomByUserId(_id, rid) {\n    return this.update({\n      _id,\n      __rooms: rid\n    }, {\n      $pull: {\n        __rooms: rid\n      }\n    });\n  }\n\n  removeAllRoomsByUserId(_id) {\n    return this.update({\n      _id\n    }, {\n      $set: {\n        __rooms: []\n      }\n    });\n  }\n\n  removeRoomByRoomId(rid) {\n    return this.update({\n      __rooms: rid\n    }, {\n      $pull: {\n        __rooms: rid\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  removeRoomByRoomIds(rids) {\n    return this.update({\n      __rooms: {\n        $in: rids\n      }\n    }, {\n      $pullAll: {\n        __rooms: rids\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  removeRoomsByRoomIdsAndUserId(rids, userId) {\n    return this.update({\n      _id: userId,\n      __rooms: {\n        $in: rids\n      }\n    }, {\n      $pullAll: {\n        __rooms: rids\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  update2FABackupCodesByUserId(userId, backupCodes) {\n    return this.update({\n      _id: userId\n    }, {\n      $set: {\n        'services.totp.hashedBackup': backupCodes\n      }\n    });\n  }\n\n  enableEmail2FAByUserId(userId) {\n    return this.update({\n      _id: userId\n    }, {\n      $set: {\n        'services.email2fa': {\n          enabled: true,\n          changedAt: new Date()\n        }\n      }\n    });\n  }\n\n  disableEmail2FAByUserId(userId) {\n    return this.update({\n      _id: userId\n    }, {\n      $set: {\n        'services.email2fa': {\n          enabled: false,\n          changedAt: new Date()\n        }\n      }\n    });\n  }\n\n  findByIdsWithPublicE2EKey(ids, options) {\n    const query = {\n      '_id': {\n        $in: ids\n      },\n      'e2e.public_key': {\n        $exists: 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  resetE2EKey(userId) {\n    this.update({\n      _id: userId\n    }, {\n      $unset: {\n        e2e: ''\n      }\n    });\n  }\n\n  removeExpiredEmailCodesOfUserId(userId) {\n    this.update({\n      _id: userId\n    }, {\n      $pull: {\n        'services.emailCode': {\n          expire: {\n            $lt: new Date()\n          }\n        }\n      }\n    });\n  }\n\n  removeEmailCodeByUserIdAndCode(userId, code) {\n    this.update({\n      _id: userId\n    }, {\n      $pull: {\n        'services.emailCode': {\n          code\n        }\n      }\n    });\n  }\n\n  addEmailCodeByUserId(userId, code, expire) {\n    this.update({\n      _id: userId\n    }, {\n      $push: {\n        'services.emailCode': {\n          $each: [{\n            code,\n            expire\n          }],\n          $slice: -5\n        }\n      }\n    });\n  }\n  /**\n   * @param {IRole['_id'][]} roles the list of role ids\n   * @param {null} scope the value for the role scope (room id) - not used in the users collection\n   * @param {any} options\n   */\n\n\n  findUsersInRoles(roles, scope, options) {\n    roles = [].concat(roles);\n    const query = {\n      roles: {\n        $in: roles\n      }\n    };\n    return this.find(query, options);\n  }\n  /**\n   * @param {IRole['_id'][]} roles the list of role ids\n   * @param {any} options\n   */\n\n\n  findActiveUsersInRoles(roles) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    roles = [].concat(roles);\n    const query = {\n      roles: {\n        $in: roles\n      },\n      active: true\n    };\n    return this.find(query, options);\n  }\n\n  findOneByAppId(appId, options) {\n    const query = {\n      appId\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByImportId(_id, options) {\n    return this.findOne({\n      importIds: _id\n    }, options);\n  }\n\n  findOneByUsernameIgnoringCase(username, options) {\n    if (typeof username === 'string') {\n      username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n    }\n\n    const query = {\n      username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByUsernameAndRoomIgnoringCase(username, rid, options) {\n    if (typeof username === 'string') {\n      username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n    }\n\n    const query = {\n      __rooms: rid,\n      username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByUsernameAndServiceNameIgnoringCase(username, userId, serviceName, options) {\n    if (typeof username === 'string') {\n      username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n    }\n\n    const query = {\n      username,\n      [\"services.\".concat(serviceName, \".id\")]: userId\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByEmailAddressAndServiceNameIgnoringCase(emailAddress, userId, serviceName, options) {\n    const query = {\n      'emails.address': String(emailAddress).trim().toLowerCase(),\n      [\"services.\".concat(serviceName, \".id\")]: userId\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByUsername(username, options) {\n    const query = {\n      username\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByEmailAddress(emailAddress, options) {\n    const query = {\n      'emails.address': String(emailAddress).trim().toLowerCase()\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneAdmin(admin, options) {\n    const query = {\n      admin\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByIdAndLoginToken(_id, token, options) {\n    const query = {\n      _id,\n      'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token)\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneById(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      _id: userId\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneActiveById(userId, options) {\n    const query = {\n      _id: userId,\n      active: true\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByIdOrUsername(idOrUsername, options) {\n    const query = {\n      $or: [{\n        _id: idOrUsername\n      }, {\n        username: idOrUsername\n      }]\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByRolesAndType(roles, type, options) {\n    const query = {\n      roles,\n      type\n    };\n    return this.findOne(query, options);\n  } // FIND\n\n\n  findByIds(users, options) {\n    const query = {\n      _id: {\n        $in: users\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findNotOfflineByIds(users, options) {\n    const query = {\n      _id: {\n        $in: users\n      },\n      status: {\n        $in: ['online', 'away', 'busy']\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findUsersNotOffline(options) {\n    const query = {\n      username: {\n        $exists: 1\n      },\n      status: {\n        $in: ['online', 'away', 'busy']\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findNotIdUpdatedFrom(uid, from, options) {\n    const query = {\n      _id: {\n        $ne: uid\n      },\n      username: {\n        $exists: 1\n      },\n      _updatedAt: {\n        $gte: from\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByRoomId(rid, options) {\n    const data = Subscriptions.findByRoomId(rid).fetch().map(item => item.u._id);\n    const query = {\n      _id: {\n        $in: data\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUsername(username, options) {\n    const query = {\n      username\n    };\n    return this.find(query, options);\n  }\n\n  findByUsernamesIgnoringCase(usernames, options) {\n    const query = {\n      username: {\n        $in: usernames.filter(Boolean).map(u => new RegExp(\"^\".concat(escapeRegExp(u), \"$\"), 'i'))\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findActive() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.find({\n      active: true,\n      type: {\n        $nin: ['app']\n      },\n      roles: {\n        $ne: ['guest']\n      }\n    }, options);\n  }\n\n  findActiveByUserIds(ids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.find({\n      active: true,\n      type: {\n        $nin: ['app']\n      },\n      roles: {\n        $ne: ['guest']\n      },\n      _id: {\n        $in: ids\n      }\n    }, options);\n  }\n\n  findActiveLocalGuests() {\n    let idExceptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      active: true,\n      type: {\n        $nin: ['app']\n      },\n      roles: {\n        $eq: 'guest',\n        $size: 1\n      },\n      isRemote: {\n        $ne: true\n      }\n    };\n\n    if (idExceptions) {\n      if (!_.isArray(idExceptions)) {\n        idExceptions = [idExceptions];\n      }\n\n      query._id = {\n        $nin: idExceptions\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields) {\n    let extraQuery = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    let {\n      startsWith = false,\n      endsWith = false\n    } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n    if (exceptions == null) {\n      exceptions = [];\n    }\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (!_.isArray(exceptions)) {\n      exceptions = [exceptions];\n    } // if the search term is empty, don't need to have the $or statement (because it would be an empty regex)\n\n\n    if (!searchTerm) {\n      const query = {\n        $and: [{\n          active: true,\n          username: {\n            $exists: true,\n            $nin: exceptions\n          }\n        }, ...extraQuery]\n      };\n      return this._db.find(query, options);\n    }\n\n    const termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n    const searchFields = forcedSearchFields || settings.get('Accounts_SearchFields').trim().split(',');\n\n    const orStmt = _.reduce(searchFields, function (acc, el) {\n      acc.push({\n        [el.trim()]: termRegex\n      });\n      return acc;\n    }, []);\n\n    const query = {\n      $and: [{\n        active: true,\n        username: {\n          $exists: true,\n          $nin: exceptions\n        },\n        $or: orStmt\n      }, ...extraQuery]\n    }; // do not use cache\n\n    return this._db.find(query, options);\n  }\n\n  findByActiveLocalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n    const extraQuery = [{\n      $or: [{\n        federation: {\n          $exists: false\n        }\n      }, {\n        'federation.origin': localDomain\n      }]\n    }];\n    return this.findByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n  }\n\n  findByActiveExternalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n    const extraQuery = [{\n      federation: {\n        $exists: true\n      }\n    }, {\n      'federation.origin': {\n        $ne: localDomain\n      }\n    }];\n    return this.findByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n  }\n\n  findUsersByNameOrUsername(nameOrUsername, options) {\n    const query = {\n      username: {\n        $exists: 1\n      },\n      $or: [{\n        name: nameOrUsername\n      }, {\n        username: nameOrUsername\n      }],\n      type: {\n        $in: ['user']\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUsernameNameOrEmailAddress(usernameNameOrEmailAddress, options) {\n    const query = {\n      $or: [{\n        name: usernameNameOrEmailAddress\n      }, {\n        username: usernameNameOrEmailAddress\n      }, {\n        'emails.address': usernameNameOrEmailAddress\n      }],\n      type: {\n        $in: ['user', 'bot']\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findCrowdUsers(options) {\n    const query = {\n      crowd: true\n    };\n    return this.find(query, options);\n  }\n\n  getLastLogin() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fields: {\n        _id: 0,\n        lastLogin: 1\n      }\n    };\n    options.sort = {\n      lastLogin: -1\n    };\n    options.limit = 1;\n    const [user] = this.find({}, options).fetch();\n    return user === null || user === void 0 ? void 0 : user.lastLogin;\n  }\n\n  findUsersByUsernames(usernames, options) {\n    const query = {\n      username: {\n        $in: usernames\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findUsersByIds(ids, options) {\n    const query = {\n      _id: {\n        $in: ids\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findUsersWithUsernameByIds(ids, options) {\n    const query = {\n      _id: {\n        $in: ids\n      },\n      username: {\n        $exists: 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findUsersWithUsernameByIdsNotOffline(ids, options) {\n    const query = {\n      _id: {\n        $in: ids\n      },\n      username: {\n        $exists: 1\n      },\n      status: {\n        $in: ['online', 'away', 'busy']\n      }\n    };\n    return this.find(query, options);\n  }\n  /**\n   * @param {import('mongodb').FilterQuery<import('../../../../definition/IStats').IStats>} fields\n   */\n\n\n  getOldest() {\n    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      _id: 1\n    };\n    const query = {\n      _id: {\n        $ne: 'rocket.cat'\n      }\n    };\n    const options = {\n      fields,\n      sort: {\n        createdAt: 1\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  findRemote() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.find({\n      isRemote: true\n    }, options);\n  }\n\n  findActiveRemote() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.find({\n      active: true,\n      isRemote: true,\n      roles: {\n        $ne: ['guest']\n      }\n    }, options);\n  }\n\n  getSAMLByIdAndSAMLProvider(_id, provider) {\n    return this.findOne({\n      _id,\n      'services.saml.provider': provider\n    }, {\n      'services.saml': 1\n    });\n  }\n\n  findBySAMLNameIdOrIdpSession(nameID, idpSession) {\n    return this.find({\n      $or: [{\n        'services.saml.nameID': nameID\n      }, {\n        'services.saml.idpSession': idpSession\n      }]\n    });\n  }\n\n  findBySAMLInResponseTo(inResponseTo) {\n    return this.find({\n      'services.saml.inResponseTo': inResponseTo\n    });\n  } // UPDATE\n\n\n  addImportIds(_id, importIds) {\n    importIds = [].concat(importIds);\n    const query = {\n      _id\n    };\n    const update = {\n      $addToSet: {\n        importIds: {\n          $each: importIds\n        }\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateInviteToken(_id, inviteToken) {\n    const update = {\n      $set: {\n        inviteToken\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  updateStatusText(_id, statusText) {\n    const update = {\n      $set: {\n        statusText\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  updateLastLoginById(_id) {\n    const update = {\n      $set: {\n        lastLogin: new Date()\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  updateStatusById(_id, status) {\n    const update = {\n      $set: {\n        status\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  addPasswordToHistory(_id, password) {\n    const update = {\n      $push: {\n        'services.passwordHistory': {\n          $each: [password],\n          $slice: -Number(settings.get('Accounts_Password_History_Amount'))\n        }\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setServiceId(_id, serviceName, serviceId) {\n    const update = {\n      $set: {}\n    };\n    const serviceIdKey = \"services.\".concat(serviceName, \".id\");\n    update.$set[serviceIdKey] = serviceId;\n    return this.update(_id, update);\n  }\n\n  setUsername(_id, username) {\n    const update = {\n      $set: {\n        username\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setEmail(_id, email) {\n    const update = {\n      $set: {\n        emails: [{\n          address: email,\n          verified: false\n        }]\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setEmailVerified(_id, email) {\n    const query = {\n      _id,\n      emails: {\n        $elemMatch: {\n          address: email,\n          verified: false\n        }\n      }\n    };\n    const update = {\n      $set: {\n        'emails.$.verified': true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setName(_id, name) {\n    const update = {\n      $set: {\n        name\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  unsetName(_id) {\n    const update = {\n      $unset: {\n        name\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setCustomFields(_id, fields) {\n    const values = {};\n    Object.keys(fields).forEach(key => {\n      values[\"customFields.\".concat(key)] = fields[key];\n    });\n    const update = {\n      $set: values\n    };\n    return this.update(_id, update);\n  }\n\n  setAvatarData(_id, origin, etag) {\n    const update = {\n      $set: {\n        avatarOrigin: origin,\n        avatarETag: etag\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  unsetAvatarData(_id) {\n    const update = {\n      $unset: {\n        avatarOrigin: 1,\n        avatarETag: 1\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setUserActive(_id, active) {\n    if (active == null) {\n      active = true;\n    }\n\n    const update = {\n      $set: {\n        active\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setAllUsersActive(active) {\n    const update = {\n      $set: {\n        active\n      }\n    };\n    return this.update({}, update, {\n      multi: true\n    });\n  }\n  /**\n   * @param latestLastLoginDate\n   * @param {IRole['_id']} role the role id\n   * @param {boolean} active\n   */\n\n\n  setActiveNotLoggedInAfterWithRole(latestLastLoginDate) {\n    let role = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'user';\n    let active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const neverActive = {\n      lastLogin: {\n        $exists: 0\n      },\n      createdAt: {\n        $lte: latestLastLoginDate\n      }\n    };\n    const idleTooLong = {\n      lastLogin: {\n        $lte: latestLastLoginDate\n      }\n    };\n    const query = {\n      $or: [neverActive, idleTooLong],\n      active: true,\n      roles: role\n    };\n    const update = {\n      $set: {\n        active\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  unsetLoginTokens(_id) {\n    const update = {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  unsetRequirePasswordChange(_id) {\n    const update = {\n      $unset: {\n        requirePasswordChange: true,\n        requirePasswordChangeReason: true\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  resetPasswordAndSetRequirePasswordChange(_id, requirePasswordChange, requirePasswordChangeReason) {\n    const update = {\n      $unset: {\n        'services.password': 1\n      },\n      $set: {\n        requirePasswordChange,\n        requirePasswordChangeReason\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setLanguage(_id, language) {\n    const update = {\n      $set: {\n        language\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setProfile(_id, profile) {\n    const update = {\n      $set: {\n        'settings.profile': profile\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setBio(_id) {\n    let bio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    const update = _objectSpread({}, bio.trim() ? {\n      $set: {\n        bio\n      }\n    } : {\n      $unset: {\n        bio: 1\n      }\n    });\n\n    return this.update(_id, update);\n  }\n\n  setNickname(_id) {\n    let nickname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    const update = _objectSpread({}, nickname.trim() ? {\n      $set: {\n        nickname\n      }\n    } : {\n      $unset: {\n        nickname: 1\n      }\n    });\n\n    return this.update(_id, update);\n  }\n\n  clearSettings(_id) {\n    const update = {\n      $set: {\n        settings: {}\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  setPreferences(_id, preferences) {\n    const settingsObject = Object.assign({}, ...Object.keys(preferences).map(key => ({\n      [\"settings.preferences.\".concat(key)]: preferences[key]\n    })));\n    const update = {\n      $set: settingsObject\n    };\n\n    if (parseInt(preferences.clockMode) === 0) {\n      delete update.$set['settings.preferences.clockMode'];\n      update.$unset = {\n        'settings.preferences.clockMode': 1\n      };\n    }\n\n    return this.update(_id, update);\n  }\n\n  setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(_id, token, hash, until) {\n    return this.update({\n      _id,\n      'services.resume.loginTokens.hashedToken': token\n    }, {\n      $set: {\n        'services.resume.loginTokens.$.twoFactorAuthorizedHash': hash,\n        'services.resume.loginTokens.$.twoFactorAuthorizedUntil': until\n      }\n    });\n  }\n\n  setUtcOffset(_id, utcOffset) {\n    const query = {\n      _id,\n      utcOffset: {\n        $ne: utcOffset\n      }\n    };\n    const update = {\n      $set: {\n        utcOffset\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveUserById(_id, data) {\n    const setData = {};\n    const unsetData = {};\n\n    if (data.name != null) {\n      if (!_.isEmpty(s.trim(data.name))) {\n        setData.name = s.trim(data.name);\n      } else {\n        unsetData.name = 1;\n      }\n    }\n\n    if (data.email != null) {\n      if (!_.isEmpty(s.trim(data.email))) {\n        setData.emails = [{\n          address: s.trim(data.email)\n        }];\n      } else {\n        unsetData.emails = 1;\n      }\n    }\n\n    if (data.phone != null) {\n      if (!_.isEmpty(s.trim(data.phone))) {\n        setData.phone = [{\n          phoneNumber: s.trim(data.phone)\n        }];\n      } else {\n        unsetData.phone = 1;\n      }\n    }\n\n    const update = {};\n\n    if (!_.isEmpty(setData)) {\n      update.$set = setData;\n    }\n\n    if (!_.isEmpty(unsetData)) {\n      update.$unset = unsetData;\n    }\n\n    if (_.isEmpty(update)) {\n      return true;\n    }\n\n    return this.update({\n      _id\n    }, update);\n  }\n\n  setReason(_id, reason) {\n    const update = {\n      $set: {\n        reason\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  unsetReason(_id) {\n    const update = {\n      $unset: {\n        reason: true\n      }\n    };\n    return this.update(_id, update);\n  }\n\n  bannerExistsById(_id, bannerId) {\n    const query = {\n      _id,\n      [\"banners.\".concat(bannerId)]: {\n        $exists: true\n      }\n    };\n    return this.find(query).count() !== 0;\n  }\n\n  setBannerReadById(_id, bannerId) {\n    const update = {\n      $set: {\n        [\"banners.\".concat(bannerId, \".read\")]: true\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  removeBannerById(_id, banner) {\n    const update = {\n      $unset: {\n        [\"banners.\".concat(banner.id)]: true\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  removeSamlServiceSession(_id) {\n    const update = {\n      $unset: {\n        'services.saml.idpSession': ''\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  updateDefaultStatus(_id, statusDefault) {\n    return this.update({\n      _id,\n      statusDefault: {\n        $ne: statusDefault\n      }\n    }, {\n      $set: {\n        statusDefault\n      }\n    });\n  }\n\n  setSamlInResponseTo(_id, inResponseTo) {\n    this.update({\n      _id\n    }, {\n      $set: {\n        'services.saml.inResponseTo': inResponseTo\n      }\n    });\n  } // INSERT\n\n\n  create(data) {\n    const user = {\n      createdAt: new Date(),\n      avatarOrigin: 'none'\n    };\n\n    _.extend(user, data);\n\n    return this.insert(user);\n  } // REMOVE\n\n\n  removeById(_id) {\n    return this.remove(_id);\n  }\n\n  removeLivechatData(userId) {\n    const query = {\n      _id: userId\n    };\n    const update = {\n      $unset: {\n        livechat: true\n      }\n    };\n    return this.update(query, update);\n  }\n  /*\n  Find users to send a message by email if:\n  - he is not online\n  - has a verified email\n  - has not disabled email notifications\n  - `active` is equal to true (false means they were deactivated and can't login)\n  */\n\n\n  getUsersToSendOfflineEmail(usersIds) {\n    const query = {\n      '_id': {\n        $in: usersIds\n      },\n      'active': true,\n      'status': 'offline',\n      'statusConnection': {\n        $ne: 'online'\n      },\n      'emails.verified': true\n    };\n    const options = {\n      fields: {\n        'name': 1,\n        'username': 1,\n        'emails': 1,\n        'settings.preferences.emailNotificationMode': 1,\n        'language': 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  countActiveUsersByService(serviceName, options) {\n    const query = {\n      active: true,\n      type: {\n        $nin: ['app']\n      },\n      roles: {\n        $ne: ['guest']\n      },\n      [\"services.\".concat(serviceName)]: {\n        $exists: true\n      }\n    };\n    return this.find(query, options).count();\n  }\n\n  getActiveLocalUserCount() {\n    return this.findActive().count() - this.findActiveRemote().count();\n  }\n\n  getActiveLocalGuestCount() {\n    let idExceptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return this.findActiveLocalGuests(idExceptions).count();\n  }\n\n  removeOlderResumeTokensByUserId(userId, fromDate) {\n    this.update(userId, {\n      $pull: {\n        'services.resume.loginTokens': {\n          when: {\n            $lt: fromDate\n          }\n        }\n      }\n    });\n  }\n\n  findAllUsersWithPendingAvatar() {\n    const query = {\n      _pendingAvatarUrl: {\n        $exists: true\n      }\n    };\n    const options = {\n      fields: {\n        _id: 1,\n        name: 1,\n        _pendingAvatarUrl: 1\n      }\n    };\n    return this.find(query, options);\n  }\n\n  updateCustomFieldsById(userId, customFields) {\n    return this.update(userId, {\n      $set: {\n        customFields\n      }\n    });\n  }\n\n}\n\nmodule.exportDefault(new Users(Meteor.users, true));","map":{"version":3,"sources":["app/models/server/models/Users.js"],"names":["_objectSpread","module","link","default","v","export","Users","Meteor","Accounts","_","s","escapeRegExp","Base","Subscriptions","settings","queryStatusAgentOnline","extraFilters","statusLivechat","roles","$or","status","$exists","$ne","get","statusConnection","constructor","defaultFields","__rooms","tryEnsureIndex","sparse","name","bio","nickname","createdAt","lastLogin","statusText","active","appId","type","federation","isRemote","openBusinessHours","extension","unique","language","collectionObj","model","rawCollection","findAndModify","wrapAsync","getLoginTokensByUserId","userId","query","$eq","find","fields","addPersonalAccessTokenToUser","loginTokenObject","update","$push","removePersonalAccessTokenOfUser","$pull","findPersonalAccessTokenByTokenNameAndUserId","tokenName","$elemMatch","findOne","setOperator","_id","operator","$set","checkOnlineAgents","agentId","Boolean","findOnlineAgents","findBotAgents","usernameList","$all","username","$in","concat","findOneBotAgent","findOneOnlineAgentByUserList","userList","options","findOneOnlineAgentById","findOneAgentById","findAgents","findOnlineUserFromList","getNextAgent","ignoreAgentId","extraQuery","unavailableAgents","Promise","await","getUnavailableAgents","map","u","$nin","sort","livechatCount","$inc","user","value","getNextBotAgent","setLivechatStatus","livechatStatusSystemModified","setLivechatData","data","livechat","closeOffice","forEach","agent","openOffice","getAgentInfo","phone","customFields","emails","setTokenpassTcaBalances","tcaBalances","getTokenBalancesByUserId","roleBaseQuery","setE2EPublicAndPrivateKeysByUserId","public_key","private_key","rocketMailUnsubscribe","Date","parseInt","affectedRows","fetchKeysByUserId","e2e","disable2FAAndSetTempSecretByUserId","tempToken","enabled","tempSecret","enable2FAAndSetSecretAndCodesByUserId","secret","backupCodes","$unset","disable2FAByUserId","addRoomByUserId","rid","$addToSet","removeRoomByUserId","removeAllRoomsByUserId","removeRoomByRoomId","multi","removeRoomByRoomIds","rids","$pullAll","removeRoomsByRoomIdsAndUserId","update2FABackupCodesByUserId","enableEmail2FAByUserId","changedAt","disableEmail2FAByUserId","findByIdsWithPublicE2EKey","ids","resetE2EKey","removeExpiredEmailCodesOfUserId","expire","$lt","removeEmailCodeByUserIdAndCode","code","addEmailCodeByUserId","$each","$slice","findUsersInRoles","scope","findActiveUsersInRoles","undefined","findOneByAppId","findOneByImportId","importIds","findOneByUsernameIgnoringCase","RegExp","findOneByUsernameAndRoomIgnoringCase","findOneByUsernameAndServiceNameIgnoringCase","serviceName","findOneByEmailAddressAndServiceNameIgnoringCase","emailAddress","String","trim","toLowerCase","findOneByUsername","findOneByEmailAddress","findOneAdmin","admin","findOneByIdAndLoginToken","token","_hashLoginToken","findOneById","findOneActiveById","findOneByIdOrUsername","idOrUsername","findOneByRolesAndType","findByIds","users","findNotOfflineByIds","findUsersNotOffline","findNotIdUpdatedFrom","uid","from","_updatedAt","$gte","findByRoomId","fetch","item","findByUsername","findByUsernamesIgnoringCase","usernames","filter","findActive","findActiveByUserIds","findActiveLocalGuests","idExceptions","$size","isArray","findByActiveUsersExcept","searchTerm","exceptions","forcedSearchFields","startsWith","endsWith","$and","_db","termRegex","searchFields","split","orStmt","reduce","acc","el","push","findByActiveLocalUsersExcept","localDomain","findByActiveExternalUsersExcept","findUsersByNameOrUsername","nameOrUsername","findByUsernameNameOrEmailAddress","usernameNameOrEmailAddress","findCrowdUsers","crowd","getLastLogin","limit","findUsersByUsernames","findUsersByIds","findUsersWithUsernameByIds","findUsersWithUsernameByIdsNotOffline","getOldest","findRemote","findActiveRemote","getSAMLByIdAndSAMLProvider","provider","findBySAMLNameIdOrIdpSession","nameID","idpSession","findBySAMLInResponseTo","inResponseTo","addImportIds","updateInviteToken","inviteToken","updateStatusText","updateLastLoginById","updateStatusById","addPasswordToHistory","password","Number","setServiceId","serviceId","serviceIdKey","setUsername","setEmail","email","address","verified","setEmailVerified","setName","unsetName","setCustomFields","values","Object","keys","key","setAvatarData","origin","etag","avatarOrigin","avatarETag","unsetAvatarData","setUserActive","setAllUsersActive","setActiveNotLoggedInAfterWithRole","latestLastLoginDate","role","neverActive","$lte","idleTooLong","unsetLoginTokens","unsetRequirePasswordChange","requirePasswordChange","requirePasswordChangeReason","resetPasswordAndSetRequirePasswordChange","setLanguage","setProfile","profile","setBio","setNickname","clearSettings","setPreferences","preferences","settingsObject","assign","clockMode","setTwoFactorAuthorizationHashAndUntilForUserIdAndToken","hash","until","setUtcOffset","utcOffset","saveUserById","setData","unsetData","isEmpty","phoneNumber","setReason","reason","unsetReason","bannerExistsById","bannerId","count","setBannerReadById","removeBannerById","banner","id","removeSamlServiceSession","updateDefaultStatus","statusDefault","setSamlInResponseTo","create","extend","insert","removeById","remove","removeLivechatData","getUsersToSendOfflineEmail","usersIds","countActiveUsersByService","getActiveLocalUserCount","getActiveLocalGuestCount","removeOlderResumeTokensByUserId","fromDate","when","findAllUsersWithPendingAvatar","_pendingAvatarUrl","updateCustomFieldsById","exportDefault"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport _ from 'underscore';\nimport s from 'underscore.string';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { Base } from './_Base';\nimport Subscriptions from './Subscriptions';\nimport { settings } from '../../../settings/server/functions/settings';\n\nconst queryStatusAgentOnline = (extraFilters = {}) => ({\n\tstatusLivechat: 'available',\n\troles: 'livechat-agent',\n\t$or: [\n\t\t{\n\t\t\tstatus: {\n\t\t\t\t$exists: true,\n\t\t\t\t$ne: 'offline',\n\t\t\t},\n\t\t\troles: {\n\t\t\t\t$ne: 'bot',\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\troles: 'bot',\n\t\t},\n\t],\n\t...extraFilters,\n\t...(settings.get('Livechat_enabled_when_agent_idle') === false && {\n\t\tstatusConnection: { $ne: 'away' },\n\t}),\n});\nexport class Users extends Base {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.defaultFields = {\n\t\t\t__rooms: 0,\n\t\t};\n\n\t\tthis.tryEnsureIndex({ __rooms: 1 }, { sparse: 1 });\n\n\t\tthis.tryEnsureIndex({ roles: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ name: 1 });\n\t\tthis.tryEnsureIndex({ bio: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ nickname: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ createdAt: 1 });\n\t\tthis.tryEnsureIndex({ lastLogin: 1 });\n\t\tthis.tryEnsureIndex({ status: 1 });\n\t\tthis.tryEnsureIndex({ statusText: 1 });\n\t\tthis.tryEnsureIndex({ active: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ statusConnection: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ appId: 1 }, { sparse: 1 });\n\t\tthis.tryEnsureIndex({ type: 1 });\n\t\tthis.tryEnsureIndex({ 'visitorEmails.address': 1 });\n\t\tthis.tryEnsureIndex({ federation: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ isRemote: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'services.saml.inResponseTo': 1 });\n\t\tthis.tryEnsureIndex({ openBusinessHours: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ statusLivechat: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ extension: 1 }, { sparse: true, unique: true });\n\t\tthis.tryEnsureIndex({ language: 1 }, { sparse: true });\n\n\t\tconst collectionObj = this.model.rawCollection();\n\t\tthis.findAndModify = Meteor.wrapAsync(collectionObj.findAndModify, collectionObj);\n\t}\n\n\tgetLoginTokensByUserId(userId) {\n\t\tconst query = {\n\t\t\t'services.resume.loginTokens.type': {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: 'personalAccessToken',\n\t\t\t},\n\t\t\t'_id': userId,\n\t\t};\n\n\t\treturn this.find(query, { fields: { 'services.resume.loginTokens': 1 } });\n\t}\n\n\taddPersonalAccessTokenToUser({ userId, loginTokenObject }) {\n\t\treturn this.update(userId, {\n\t\t\t$push: {\n\t\t\t\t'services.resume.loginTokens': loginTokenObject,\n\t\t\t},\n\t\t});\n\t}\n\n\tremovePersonalAccessTokenOfUser({ userId, loginTokenObject }) {\n\t\treturn this.update(userId, {\n\t\t\t$pull: {\n\t\t\t\t'services.resume.loginTokens': loginTokenObject,\n\t\t\t},\n\t\t});\n\t}\n\n\tfindPersonalAccessTokenByTokenNameAndUserId({ userId, tokenName }) {\n\t\tconst query = {\n\t\t\t'services.resume.loginTokens': {\n\t\t\t\t$elemMatch: { name: tokenName, type: 'personalAccessToken' },\n\t\t\t},\n\t\t\t'_id': userId,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tsetOperator(_id, operator) {\n\t\t// TODO:: Create class Agent\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\toperator,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tcheckOnlineAgents(agentId) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = queryStatusAgentOnline(agentId && { _id: agentId });\n\n\t\treturn Boolean(this.findOne(query));\n\t}\n\n\tfindOnlineAgents(agentId) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = queryStatusAgentOnline(agentId && { _id: agentId });\n\n\t\treturn this.find(query);\n\t}\n\n\tfindBotAgents(usernameList) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t\t...(usernameList && {\n\t\t\t\tusername: {\n\t\t\t\t\t$in: [].concat(usernameList),\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindOneBotAgent() {\n\t\t// TODO:: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneOnlineAgentByUserList(userList, options) {\n\t\t// TODO:: Create class Agent\n\t\tconst username = {\n\t\t\t$in: [].concat(userList),\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline({ username });\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOnlineAgentById(_id) {\n\t\t// TODO: Create class Agent\n\t\tconst query = queryStatusAgentOnline({ _id });\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneAgentById(_id, options) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id,\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindAgents() {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindOnlineUserFromList(userList) {\n\t\t// TODO: Create class Agent\n\t\tconst username = {\n\t\t\t$in: [].concat(userList),\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline({ username });\n\n\t\treturn this.find(query);\n\t}\n\n\tgetNextAgent(ignoreAgentId, extraQuery) {\n\t\t// TODO: Create class Agent\n\t\t// fetch all unavailable agents, and exclude them from the selection\n\t\tconst unavailableAgents = Promise.await(this.getUnavailableAgents(null, extraQuery)).map((u) => u.username);\n\t\tconst extraFilters = {\n\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t\t// limit query to remove booked agents\n\t\t\tusername: { $nin: unavailableAgents },\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline(extraFilters);\n\n\t\tconst sort = {\n\t\t\tlivechatCount: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tlivechatCount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst user = this.findAndModify(query, sort, update);\n\t\tif (user && user.value) {\n\t\t\treturn {\n\t\t\t\tagentId: user.value._id,\n\t\t\t\tusername: user.value.username,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetUnavailableAgents() {\n\t\treturn [];\n\t}\n\n\tgetNextBotAgent(ignoreAgentId) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst sort = {\n\t\t\tlivechatCount: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tlivechatCount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst user = this.findAndModify(query, sort, update);\n\t\tif (user && user.value) {\n\t\t\treturn {\n\t\t\t\tagentId: user.value._id,\n\t\t\t\tusername: user.value.username,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tsetLivechatStatus(userId, status) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: status,\n\t\t\t\tlivechatStatusSystemModified: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetLivechatData(userId, data = {}) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlivechat: data,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tcloseOffice() {\n\t\t// TODO: Create class Agent\n\t\tthis.findAgents().forEach((agent) => this.setLivechatStatus(agent._id, 'not-available'));\n\t}\n\n\topenOffice() {\n\t\t// TODO: Create class Agent\n\t\tthis.findAgents().forEach((agent) => this.setLivechatStatus(agent._id, 'available'));\n\t}\n\n\tgetAgentInfo(agentId) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: agentId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\tname: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tphone: 1,\n\t\t\t\tcustomFields: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tlivechat: 1,\n\t\t\t},\n\t\t};\n\n\t\tif (settings.get('Livechat_show_agent_email')) {\n\t\t\toptions.fields.emails = 1;\n\t\t}\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetTokenpassTcaBalances(_id, tcaBalances) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'services.tokenpass.tcaBalances': tcaBalances,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tgetTokenBalancesByUserId(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t'services.tokenpass.tcaBalances': 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\troleBaseQuery(userId) {\n\t\treturn { _id: userId };\n\t}\n\n\tsetE2EPublicAndPrivateKeysByUserId(userId, { public_key, private_key }) {\n\t\tthis.update(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'e2e.public_key': public_key,\n\t\t\t\t\t'e2e.private_key': private_key,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\trocketMailUnsubscribe(_id, createdAt) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tcreatedAt: new Date(parseInt(createdAt)),\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'mailer.unsubscribed': true,\n\t\t\t},\n\t\t};\n\t\tconst affectedRows = this.update(query, update);\n\t\treturn affectedRows;\n\t}\n\n\tfetchKeysByUserId(userId) {\n\t\tconst user = this.findOne({ _id: userId }, { fields: { e2e: 1 } });\n\n\t\tif (!user || !user.e2e || !user.e2e.public_key) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\tpublic_key: user.e2e.public_key,\n\t\t\tprivate_key: user.e2e.private_key,\n\t\t};\n\t}\n\n\tdisable2FAAndSetTempSecretByUserId(userId, tempToken) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp': {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\ttempSecret: tempToken,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tenable2FAAndSetSecretAndCodesByUserId(userId, secret, backupCodes) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp.enabled': true,\n\t\t\t\t\t'services.totp.secret': secret,\n\t\t\t\t\t'services.totp.hashedBackup': backupCodes,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\t'services.totp.tempSecret': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tdisable2FAByUserId(userId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp': {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\taddRoomByUserId(_id, rid) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t__rooms: { $ne: rid },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: { __rooms: rid },\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRoomByUserId(_id, rid) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t__rooms: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: { __rooms: rid },\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveAllRoomsByUserId(_id) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { __rooms: [] },\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRoomByRoomId(rid) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t__rooms: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: { __rooms: rid },\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tremoveRoomByRoomIds(rids) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t__rooms: { $in: rids },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pullAll: { __rooms: rids },\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tremoveRoomsByRoomIdsAndUserId(rids, userId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t\t__rooms: { $in: rids },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pullAll: { __rooms: rids },\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tupdate2FABackupCodesByUserId(userId, backupCodes) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp.hashedBackup': backupCodes,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tenableEmail2FAByUserId(userId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.email2fa': {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tdisableEmail2FAByUserId(userId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.email2fa': {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByIdsWithPublicE2EKey(ids, options) {\n\t\tconst query = {\n\t\t\t'_id': {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\t'e2e.public_key': {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tresetE2EKey(userId) {\n\t\tthis.update(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\te2e: '',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveExpiredEmailCodesOfUserId(userId) {\n\t\tthis.update(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'services.emailCode': {\n\t\t\t\t\t\texpire: { $lt: new Date() },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveEmailCodeByUserIdAndCode(userId, code) {\n\t\tthis.update(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'services.emailCode': {\n\t\t\t\t\t\tcode,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\taddEmailCodeByUserId(userId, code, expire) {\n\t\tthis.update(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\t'services.emailCode': {\n\t\t\t\t\t\t$each: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\texpire,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\t$slice: -5,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * @param {IRole['_id'][]} roles the list of role ids\n\t * @param {null} scope the value for the role scope (room id) - not used in the users collection\n\t * @param {any} options\n\t */\n\tfindUsersInRoles(roles, scope, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {IRole['_id'][]} roles the list of role ids\n\t * @param {any} options\n\t */\n\tfindActiveUsersInRoles(roles, options = undefined) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByAppId(appId, options) {\n\t\tconst query = { appId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByImportId(_id, options) {\n\t\treturn this.findOne({ importIds: _id }, options);\n\t}\n\n\tfindOneByUsernameIgnoringCase(username, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = { username };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByUsernameAndRoomIgnoringCase(username, rid, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = {\n\t\t\t__rooms: rid,\n\t\t\tusername,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByUsernameAndServiceNameIgnoringCase(username, userId, serviceName, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = { username, [`services.${serviceName}.id`]: userId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByEmailAddressAndServiceNameIgnoringCase(emailAddress, userId, serviceName, options) {\n\t\tconst query = {\n\t\t\t'emails.address': String(emailAddress).trim().toLowerCase(),\n\t\t\t[`services.${serviceName}.id`]: userId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByUsername(username, options) {\n\t\tconst query = { username };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByEmailAddress(emailAddress, options) {\n\t\tconst query = { 'emails.address': String(emailAddress).trim().toLowerCase() };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneAdmin(admin, options) {\n\t\tconst query = { admin };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndLoginToken(_id, token, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneById(userId, options = {}) {\n\t\tconst query = { _id: userId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneActiveById(userId, options) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdOrUsername(idOrUsername, options) {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: idOrUsername,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: idOrUsername,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRolesAndType(roles, type, options) {\n\t\tconst query = { roles, type };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t// FIND\n\tfindByIds(users, options) {\n\t\tconst query = { _id: { $in: users } };\n\t\treturn this.find(query, options);\n\t}\n\n\tfindNotOfflineByIds(users, options) {\n\t\tconst query = {\n\t\t\t_id: { $in: users },\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersNotOffline(options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindNotIdUpdatedFrom(uid, from, options) {\n\t\tconst query = {\n\t\t\t_id: { $ne: uid },\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\t_updatedAt: { $gte: from },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(rid, options) {\n\t\tconst data = Subscriptions.findByRoomId(rid)\n\t\t\t.fetch()\n\t\t\t.map((item) => item.u._id);\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsername(username, options) {\n\t\tconst query = { username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsernamesIgnoringCase(usernames, options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$in: usernames.filter(Boolean).map((u) => new RegExp(`^${escapeRegExp(u)}$`, 'i')),\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindActive(options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\ttype: { $nin: ['app'] },\n\t\t\t\troles: { $ne: ['guest'] },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindActiveByUserIds(ids, options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\ttype: { $nin: ['app'] },\n\t\t\t\troles: { $ne: ['guest'] },\n\t\t\t\t_id: { $in: ids },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindActiveLocalGuests(idExceptions = [], options = {}) {\n\t\tconst query = {\n\t\t\tactive: true,\n\t\t\ttype: { $nin: ['app'] },\n\t\t\troles: {\n\t\t\t\t$eq: 'guest',\n\t\t\t\t$size: 1,\n\t\t\t},\n\t\t\tisRemote: { $ne: true },\n\t\t};\n\n\t\tif (idExceptions) {\n\t\t\tif (!_.isArray(idExceptions)) {\n\t\t\t\tidExceptions = [idExceptions];\n\t\t\t}\n\n\t\t\tquery._id = { $nin: idExceptions };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByActiveUsersExcept(\n\t\tsearchTerm,\n\t\texceptions,\n\t\toptions,\n\t\tforcedSearchFields,\n\t\textraQuery = [],\n\t\t{ startsWith = false, endsWith = false } = {},\n\t) {\n\t\tif (exceptions == null) {\n\t\t\texceptions = [];\n\t\t}\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\t\tif (!_.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\t// if the search term is empty, don't need to have the $or statement (because it would be an empty regex)\n\t\tif (!searchTerm) {\n\t\t\tconst query = {\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\tusername: { $exists: true, $nin: exceptions },\n\t\t\t\t\t},\n\t\t\t\t\t...extraQuery,\n\t\t\t\t],\n\t\t\t};\n\n\t\t\treturn this._db.find(query, options);\n\t\t}\n\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\n\t\tconst searchFields = forcedSearchFields || settings.get('Accounts_SearchFields').trim().split(',');\n\n\t\tconst orStmt = _.reduce(\n\t\t\tsearchFields,\n\t\t\tfunction (acc, el) {\n\t\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[],\n\t\t);\n\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tactive: true,\n\t\t\t\t\tusername: { $exists: true, $nin: exceptions },\n\t\t\t\t\t$or: orStmt,\n\t\t\t\t},\n\t\t\t\t...extraQuery,\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindByActiveLocalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n\t\tconst extraQuery = [\n\t\t\t{\n\t\t\t\t$or: [{ federation: { $exists: false } }, { 'federation.origin': localDomain }],\n\t\t\t},\n\t\t];\n\t\treturn this.findByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n\t}\n\n\tfindByActiveExternalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n\t\tconst extraQuery = [{ federation: { $exists: true } }, { 'federation.origin': { $ne: localDomain } }];\n\t\treturn this.findByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n\t}\n\n\tfindUsersByNameOrUsername(nameOrUsername, options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\n\t\t\t$or: [{ name: nameOrUsername }, { username: nameOrUsername }],\n\n\t\t\ttype: {\n\t\t\t\t$in: ['user'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsernameNameOrEmailAddress(usernameNameOrEmailAddress, options) {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{ name: usernameNameOrEmailAddress },\n\t\t\t\t{ username: usernameNameOrEmailAddress },\n\t\t\t\t{ 'emails.address': usernameNameOrEmailAddress },\n\t\t\t],\n\t\t\ttype: {\n\t\t\t\t$in: ['user', 'bot'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindCrowdUsers(options) {\n\t\tconst query = { crowd: true };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetLastLogin(options = { fields: { _id: 0, lastLogin: 1 } }) {\n\t\toptions.sort = { lastLogin: -1 };\n\t\toptions.limit = 1;\n\t\tconst [user] = this.find({}, options).fetch();\n\t\treturn user?.lastLogin;\n\t}\n\n\tfindUsersByUsernames(usernames, options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$in: usernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersByIds(ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithUsernameByIds(ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithUsernameByIdsNotOffline(ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {import('mongodb').FilterQuery<import('../../../../definition/IStats').IStats>} fields\n\t */\n\tgetOldest(fields = { _id: 1 }) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$ne: 'rocket.cat',\n\t\t\t},\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields,\n\t\t\tsort: {\n\t\t\t\tcreatedAt: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindRemote(options = {}) {\n\t\treturn this.find({ isRemote: true }, options);\n\t}\n\n\tfindActiveRemote(options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tisRemote: true,\n\t\t\t\troles: { $ne: ['guest'] },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tgetSAMLByIdAndSAMLProvider(_id, provider) {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t'services.saml.provider': provider,\n\t\t\t},\n\t\t\t{\n\t\t\t\t'services.saml': 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindBySAMLNameIdOrIdpSession(nameID, idpSession) {\n\t\treturn this.find({\n\t\t\t$or: [{ 'services.saml.nameID': nameID }, { 'services.saml.idpSession': idpSession }],\n\t\t});\n\t}\n\n\tfindBySAMLInResponseTo(inResponseTo) {\n\t\treturn this.find({\n\t\t\t'services.saml.inResponseTo': inResponseTo,\n\t\t});\n\t}\n\n\t// UPDATE\n\taddImportIds(_id, importIds) {\n\t\timportIds = [].concat(importIds);\n\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: importIds,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateInviteToken(_id, inviteToken) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tinviteToken,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tupdateStatusText(_id, statusText) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusText,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tupdateLastLoginById(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastLogin: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tupdateStatusById(_id, status) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\taddPasswordToHistory(_id, password) {\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\t'services.passwordHistory': {\n\t\t\t\t\t$each: [password],\n\t\t\t\t\t$slice: -Number(settings.get('Accounts_Password_History_Amount')),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetServiceId(_id, serviceName, serviceId) {\n\t\tconst update = { $set: {} };\n\n\t\tconst serviceIdKey = `services.${serviceName}.id`;\n\t\tupdate.$set[serviceIdKey] = serviceId;\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetUsername(_id, username) {\n\t\tconst update = { $set: { username } };\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetEmail(_id, email) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\temails: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: email,\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetEmailVerified(_id, email) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\temails: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\taddress: email,\n\t\t\t\t\tverified: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'emails.$.verified': true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetName(_id, name) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tunsetName(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetCustomFields(_id, fields) {\n\t\tconst values = {};\n\t\tObject.keys(fields).forEach((key) => {\n\t\t\tvalues[`customFields.${key}`] = fields[key];\n\t\t});\n\n\t\tconst update = { $set: values };\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetAvatarData(_id, origin, etag) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tavatarOrigin: origin,\n\t\t\t\tavatarETag: etag,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tunsetAvatarData(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tavatarOrigin: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetUserActive(_id, active) {\n\t\tif (active == null) {\n\t\t\tactive = true;\n\t\t}\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tactive,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetAllUsersActive(active) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tactive,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({}, update, { multi: true });\n\t}\n\n\t/**\n\t * @param latestLastLoginDate\n\t * @param {IRole['_id']} role the role id\n\t * @param {boolean} active\n\t */\n\tsetActiveNotLoggedInAfterWithRole(latestLastLoginDate, role = 'user', active = false) {\n\t\tconst neverActive = { lastLogin: { $exists: 0 }, createdAt: { $lte: latestLastLoginDate } };\n\t\tconst idleTooLong = { lastLogin: { $lte: latestLastLoginDate } };\n\n\t\tconst query = {\n\t\t\t$or: [neverActive, idleTooLong],\n\t\t\tactive: true,\n\t\t\troles: role,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tactive,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tunsetLoginTokens(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'services.resume.loginTokens': [],\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tunsetRequirePasswordChange(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\trequirePasswordChange: true,\n\t\t\t\trequirePasswordChangeReason: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tresetPasswordAndSetRequirePasswordChange(_id, requirePasswordChange, requirePasswordChangeReason) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t'services.password': 1,\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\trequirePasswordChange,\n\t\t\t\trequirePasswordChangeReason,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetLanguage(_id, language) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlanguage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetProfile(_id, profile) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'settings.profile': profile,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetBio(_id, bio = '') {\n\t\tconst update = {\n\t\t\t...(bio.trim()\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tbio,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tbio: 1,\n\t\t\t\t\t\t},\n\t\t\t\t  }),\n\t\t};\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetNickname(_id, nickname = '') {\n\t\tconst update = {\n\t\t\t...(nickname.trim()\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tnickname,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tnickname: 1,\n\t\t\t\t\t\t},\n\t\t\t\t  }),\n\t\t};\n\t\treturn this.update(_id, update);\n\t}\n\n\tclearSettings(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tsettings: {},\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetPreferences(_id, preferences) {\n\t\tconst settingsObject = Object.assign(\n\t\t\t{},\n\t\t\t...Object.keys(preferences).map((key) => ({\n\t\t\t\t[`settings.preferences.${key}`]: preferences[key],\n\t\t\t})),\n\t\t);\n\n\t\tconst update = {\n\t\t\t$set: settingsObject,\n\t\t};\n\t\tif (parseInt(preferences.clockMode) === 0) {\n\t\t\tdelete update.$set['settings.preferences.clockMode'];\n\t\t\tupdate.$unset = { 'settings.preferences.clockMode': 1 };\n\t\t}\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tsetTwoFactorAuthorizationHashAndUntilForUserIdAndToken(_id, token, hash, until) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t'services.resume.loginTokens.hashedToken': token,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.resume.loginTokens.$.twoFactorAuthorizedHash': hash,\n\t\t\t\t\t'services.resume.loginTokens.$.twoFactorAuthorizedUntil': until,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetUtcOffset(_id, utcOffset) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tutcOffset: {\n\t\t\t\t$ne: utcOffset,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tutcOffset,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveUserById(_id, data) {\n\t\tconst setData = {};\n\t\tconst unsetData = {};\n\n\t\tif (data.name != null) {\n\t\t\tif (!_.isEmpty(s.trim(data.name))) {\n\t\t\t\tsetData.name = s.trim(data.name);\n\t\t\t} else {\n\t\t\t\tunsetData.name = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.email != null) {\n\t\t\tif (!_.isEmpty(s.trim(data.email))) {\n\t\t\t\tsetData.emails = [{ address: s.trim(data.email) }];\n\t\t\t} else {\n\t\t\t\tunsetData.emails = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.phone != null) {\n\t\t\tif (!_.isEmpty(s.trim(data.phone))) {\n\t\t\t\tsetData.phone = [{ phoneNumber: s.trim(data.phone) }];\n\t\t\t} else {\n\t\t\t\tunsetData.phone = 1;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {};\n\n\t\tif (!_.isEmpty(setData)) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (!_.isEmpty(unsetData)) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (_.isEmpty(update)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tsetReason(_id, reason) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\treason,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tunsetReason(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\treason: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(_id, update);\n\t}\n\n\tbannerExistsById(_id, bannerId) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t[`banners.${bannerId}`]: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query).count() !== 0;\n\t}\n\n\tsetBannerReadById(_id, bannerId) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`banners.${bannerId}.read`]: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tremoveBannerById(_id, banner) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t[`banners.${banner.id}`]: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tremoveSamlServiceSession(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t'services.saml.idpSession': '',\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tupdateDefaultStatus(_id, statusDefault) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\tstatusDefault: { $ne: statusDefault },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatusDefault,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetSamlInResponseTo(_id, inResponseTo) {\n\t\tthis.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.saml.inResponseTo': inResponseTo,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t// INSERT\n\tcreate(data) {\n\t\tconst user = {\n\t\t\tcreatedAt: new Date(),\n\t\t\tavatarOrigin: 'none',\n\t\t};\n\n\t\t_.extend(user, data);\n\n\t\treturn this.insert(user);\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\treturn this.remove(_id);\n\t}\n\n\tremoveLivechatData(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tlivechat: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\t/*\nFind users to send a message by email if:\n- he is not online\n- has a verified email\n- has not disabled email notifications\n- `active` is equal to true (false means they were deactivated and can't login)\n*/\n\tgetUsersToSendOfflineEmail(usersIds) {\n\t\tconst query = {\n\t\t\t'_id': {\n\t\t\t\t$in: usersIds,\n\t\t\t},\n\t\t\t'active': true,\n\t\t\t'status': 'offline',\n\t\t\t'statusConnection': {\n\t\t\t\t$ne: 'online',\n\t\t\t},\n\t\t\t'emails.verified': true,\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t'name': 1,\n\t\t\t\t'username': 1,\n\t\t\t\t'emails': 1,\n\t\t\t\t'settings.preferences.emailNotificationMode': 1,\n\t\t\t\t'language': 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountActiveUsersByService(serviceName, options) {\n\t\tconst query = {\n\t\t\tactive: true,\n\t\t\ttype: { $nin: ['app'] },\n\t\t\troles: { $ne: ['guest'] },\n\t\t\t[`services.${serviceName}`]: { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options).count();\n\t}\n\n\tgetActiveLocalUserCount() {\n\t\treturn this.findActive().count() - this.findActiveRemote().count();\n\t}\n\n\tgetActiveLocalGuestCount(idExceptions = []) {\n\t\treturn this.findActiveLocalGuests(idExceptions).count();\n\t}\n\n\tremoveOlderResumeTokensByUserId(userId, fromDate) {\n\t\tthis.update(userId, {\n\t\t\t$pull: {\n\t\t\t\t'services.resume.loginTokens': {\n\t\t\t\t\twhen: { $lt: fromDate },\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tfindAllUsersWithPendingAvatar() {\n\t\tconst query = {\n\t\t\t_pendingAvatarUrl: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\t_pendingAvatarUrl: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateCustomFieldsById(userId, customFields) {\n\t\treturn this.update(userId, {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t});\n\t}\n}\n\nexport default new Users(Meteor.users, true);\n"]},"sourceType":"module","hash":"be43ba133e3ee66d1e53ffdd37901a56f527837e"}
