{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Messages.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/models/server/models/Messages.js","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Messages.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Messages.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/Messages.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Messages: () => Messages\n});\nlet Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 1);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 2);\nlet Rooms;\nmodule.link(\"./Rooms\", {\n  default(v) {\n    Rooms = v;\n  }\n\n}, 3);\nlet settings;\nmodule.link(\"../../../settings/server/functions/settings\", {\n  settings(v) {\n    settings = v;\n  }\n\n}, 4);\nlet otrSystemMessages;\nmodule.link(\"../../../otr/lib/constants\", {\n  otrSystemMessages(v) {\n    otrSystemMessages = v;\n  }\n\n}, 5);\n\nclass Messages extends Base {\n  constructor() {\n    super('message');\n\n    this.addAttachmentTranslations = function (messageId, attachmentIndex, translations) {\n      const updateObj = {};\n      Object.keys(translations).forEach(key => {\n        const translation = translations[key];\n        updateObj[\"attachments.\".concat(attachmentIndex, \".translations.\").concat(key)] = translation;\n      });\n      return this.update({\n        _id: messageId\n      }, {\n        $set: updateObj\n      });\n    };\n\n    this.tryEnsureIndex({\n      rid: 1,\n      ts: 1,\n      _updatedAt: 1\n    });\n    this.tryEnsureIndex({\n      ts: 1\n    });\n    this.tryEnsureIndex({\n      'u._id': 1\n    });\n    this.tryEnsureIndex({\n      editedAt: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'editedBy._id': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'rid': 1,\n      't': 1,\n      'u._id': 1\n    });\n    this.tryEnsureIndex({\n      expireAt: 1\n    }, {\n      expireAfterSeconds: 0\n    });\n    this.tryEnsureIndex({\n      msg: 'text'\n    });\n    this.tryEnsureIndex({\n      'file._id': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      'mentions.username': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      pinned: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      snippeted: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      location: '2dsphere'\n    });\n    this.tryEnsureIndex({\n      slackTs: 1,\n      slackBotId: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      unread: 1\n    }, {\n      sparse: true\n    }); // discussions\n\n    this.tryEnsureIndex({\n      drid: 1\n    }, {\n      sparse: true\n    }); // threads\n\n    this.tryEnsureIndex({\n      tmid: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      tcount: 1,\n      tlm: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      rid: 1,\n      tlm: -1\n    }, {\n      partialFilterExpression: {\n        tcount: {\n          $exists: true\n        }\n      }\n    }); // used for the List Threads\n\n    this.tryEnsureIndex({\n      rid: 1,\n      tcount: 1\n    }); // used for the List Threads Count\n    // livechat\n\n    this.tryEnsureIndex({\n      'navigation.token': 1\n    }, {\n      sparse: true\n    });\n  }\n\n  setReactions(messageId, reactions) {\n    return this.update({\n      _id: messageId\n    }, {\n      $set: {\n        reactions\n      }\n    });\n  }\n\n  keepHistoryForToken(token) {\n    return this.update({\n      'navigation.token': token,\n      'expireAt': {\n        $exists: true\n      }\n    }, {\n      $unset: {\n        expireAt: 1\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  setRoomIdByToken(token, rid) {\n    return this.update({\n      'navigation.token': token,\n      'rid': null\n    }, {\n      $set: {\n        rid\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  createRoomArchivedByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-archived', roomId, '', user);\n  }\n\n  createRoomUnarchivedByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-unarchived', roomId, '', user);\n  }\n\n  createRoomSetReadOnlyByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-set-read-only', roomId, '', user);\n  }\n\n  createRoomRemovedReadOnlyByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-removed-read-only', roomId, '', user);\n  }\n\n  createRoomAllowedReactingByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-allowed-reacting', roomId, '', user);\n  }\n\n  createRoomDisallowedReactingByRoomIdAndUser(roomId, user) {\n    return this.createWithTypeRoomIdMessageAndUser('room-disallowed-reacting', roomId, '', user);\n  }\n\n  unsetReactions(messageId) {\n    return this.update({\n      _id: messageId\n    }, {\n      $unset: {\n        reactions: 1\n      }\n    });\n  }\n\n  deleteOldOTRMessages(roomId, ts) {\n    const query = {\n      rid: roomId,\n      t: {\n        $in: ['otr', otrSystemMessages.USER_JOINED_OTR, otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH, otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY]\n      },\n      ts: {\n        $lte: ts\n      }\n    };\n    return this.remove(query);\n  }\n\n  updateOTRAck(_id, otrAck) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        otrAck\n      }\n    };\n    return this.update(query, update);\n  }\n\n  createRoomSettingsChangedWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData);\n  }\n\n  createRoomRenamedWithRoomIdRoomNameAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('r', roomId, roomName, user, extraData);\n  }\n\n  addTranslations(messageId, translations, providerName) {\n    const updateObj = {\n      translationProvider: providerName\n    };\n    Object.keys(translations).forEach(key => {\n      const translation = translations[key];\n      updateObj[\"translations.\".concat(key)] = translation;\n    });\n    return this.update({\n      _id: messageId\n    }, {\n      $set: updateObj\n    });\n  }\n\n  setImportFileRocketChatAttachment(importFileId, rocketChatUrl, attachment) {\n    const query = {\n      '_importFile.id': importFileId\n    };\n    return this.update(query, {\n      $set: {\n        '_importFile.rocketChatUrl': rocketChatUrl,\n        '_importFile.downloaded': true\n      },\n      $addToSet: {\n        attachments: attachment\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  countVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        $gte: afterTimestamp,\n        $lte: beforeTimestamp\n      }\n    };\n    return this.find(query, options).count();\n  } // FIND\n\n\n  findByMention(username, options) {\n    const query = {\n      'mentions.username': username\n    };\n    return this.find(query, options);\n  }\n\n  findFilesByUserId(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = {\n      'u._id': userId,\n      'file._id': {\n        $exists: true\n      }\n    };\n    return this.find(query, _objectSpread({\n      fields: {\n        'file._id': 1\n      }\n    }, options));\n  }\n\n  findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned) {\n    let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let ts = arguments.length > 3 ? arguments[3] : undefined;\n    let users = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    let ignoreThreads = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    const query = {\n      rid,\n      ts,\n      'file._id': {\n        $exists: true\n      }\n    };\n\n    if (excludePinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (ignoreThreads) {\n      query.tmid = {\n        $exists: 0\n      };\n      query.tcount = {\n        $exists: 0\n      };\n    }\n\n    if (ignoreDiscussion) {\n      query.drid = {\n        $exists: 0\n      };\n    }\n\n    if (users.length) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    return this.find(query, _objectSpread({\n      fields: {\n        'file._id': 1\n      }\n    }, options));\n  }\n\n  findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts) {\n    let users = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const query = {\n      rid,\n      ts,\n      drid: {\n        $exists: 1\n      }\n    };\n\n    if (excludePinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (users.length) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findVisibleByMentionAndRoomId(username, rid, options) {\n    const query = {\n      '_hidden': {\n        $ne: true\n      },\n      'mentions.username': username,\n      rid\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomId(rid, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByIds(ids, options) {\n    const query = {\n      _id: {\n        $in: ids\n      },\n      _hidden: {\n        $ne: true\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleThreadByThreadId(tmid, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      tmid\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdNotContainingTypes(roomId, types, options) {\n    let showThreadMessages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    const query = _objectSpread({\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId\n    }, !showThreadMessages && {\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    });\n\n    if (Match.test(types, [String]) && types.length > 0) {\n      query.t = {\n        $nin: types\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findInvisibleByRoomId(roomId, options) {\n    const query = {\n      _hidden: true,\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        $gt: timestamp\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findForUpdates(roomId, timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      _updatedAt: {\n        $gt: timestamp\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        $lt: timestamp\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options) {\n    let showThreadMessages = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let inclusive = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    const query = _objectSpread({\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        [inclusive ? '$lte' : '$lt']: timestamp\n      }\n    }, !showThreadMessages && {\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    });\n\n    if (Match.test(types, [String]) && types.length > 0) {\n      query.t = {\n        $nin: types\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, afterTimestamp, beforeTimestamp, types, options) {\n    let showThreadMessages = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    let inclusive = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n    const query = _objectSpread({\n      _hidden: {\n        $ne: true\n      },\n      rid: roomId,\n      ts: {\n        [inclusive ? '$gte' : '$gt']: afterTimestamp,\n        [inclusive ? '$lte' : '$lt']: beforeTimestamp\n      }\n    }, !showThreadMessages && {\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    });\n\n    if (Match.test(types, [String]) && types.length > 0) {\n      query.t = {\n        $nin: types\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findVisibleCreatedOrEditedAfterTimestamp(timestamp, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      $or: [{\n        ts: {\n          $gt: timestamp\n        }\n      }, {\n        editedAt: {\n          $gt: timestamp\n        }\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findStarredByUserAtRoom(userId, roomId, options) {\n    const query = {\n      '_hidden': {\n        $ne: true\n      },\n      'starred._id': userId,\n      'rid': roomId\n    };\n    return this.find(query, options);\n  }\n\n  findPinnedByRoom(roomId, options) {\n    const query = {\n      t: {\n        $ne: 'rm'\n      },\n      _hidden: {\n        $ne: true\n      },\n      pinned: true,\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  findSnippetedByRoom(roomId, options) {\n    const query = {\n      _hidden: {\n        $ne: true\n      },\n      snippeted: true,\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  getLastTimestamp() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fields: {\n        _id: 0,\n        ts: 1\n      }\n    };\n    options.sort = {\n      ts: -1\n    };\n    options.limit = 1;\n    const [message] = this.find({}, options).fetch();\n    return message === null || message === void 0 ? void 0 : message.ts;\n  }\n\n  findByRoomIdAndMessageIds(rid, messageIds, options) {\n    const query = {\n      rid,\n      _id: {\n        $in: messageIds\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {\n    const query = {\n      slackBotId,\n      slackTs\n    };\n    return this.findOne(query);\n  }\n\n  findOneBySlackTs(slackTs) {\n    const query = {\n      slackTs\n    };\n    return this.findOne(query);\n  }\n\n  findOneByRoomIdAndMessageId(rid, messageId, options) {\n    const query = {\n      rid,\n      _id: messageId\n    };\n    return this.findOne(query, options);\n  }\n\n  findByRoomIdAndType(roomId, type, options) {\n    const query = {\n      rid: roomId,\n      t: type\n    };\n\n    if (options == null) {\n      options = {};\n    }\n\n    return this.find(query, options);\n  }\n\n  findByRoomId(roomId, options) {\n    const query = {\n      rid: roomId\n    };\n    return this.find(query, options);\n  }\n\n  getLastVisibleMessageSentWithNoTypeByRoomId(rid, messageId) {\n    const query = {\n      rid,\n      _hidden: {\n        $ne: true\n      },\n      t: {\n        $exists: false\n      },\n      $or: [{\n        tmid: {\n          $exists: false\n        }\n      }, {\n        tshow: true\n      }]\n    };\n\n    if (messageId) {\n      query._id = {\n        $ne: messageId\n      };\n    }\n\n    const options = {\n      sort: {\n        ts: -1\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  cloneAndSaveAsHistoryById(_id, user) {\n    const record = this.findOneById(_id);\n    record._hidden = true;\n    record.parent = record._id;\n    record.editedAt = new Date();\n    record.editedBy = {\n      _id: user._id,\n      username: user.username\n    };\n    delete record._id;\n    return this.insert(record);\n  } // UPDATE\n\n\n  setHiddenById(_id, hidden) {\n    if (hidden == null) {\n      hidden = true;\n    }\n\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        _hidden: hidden\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAsDeletedByIdAndUser(_id, user) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        msg: '',\n        t: 'rm',\n        urls: [],\n        mentions: [],\n        attachments: [],\n        reactions: [],\n        editedAt: new Date(),\n        editedBy: {\n          _id: user._id,\n          username: user.username\n        }\n      },\n      $unset: {\n        md: 1,\n        blocks: 1,\n        tshow: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {\n    if (pinned == null) {\n      pinned = true;\n    }\n\n    if (pinnedAt == null) {\n      pinnedAt = 0;\n    }\n\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        pinned,\n        pinnedAt: pinnedAt || new Date(),\n        pinnedBy\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setSnippetedByIdAndUserId(message, snippetName, snippetedBy, snippeted, snippetedAt) {\n    if (snippeted == null) {\n      snippeted = true;\n    }\n\n    if (snippetedAt == null) {\n      snippetedAt = 0;\n    }\n\n    const query = {\n      _id: message._id\n    };\n    const msg = \"```\".concat(message.msg, \"```\");\n    const update = {\n      $set: {\n        msg,\n        snippeted,\n        snippetedAt: snippetedAt || new Date(),\n        snippetedBy,\n        snippetName\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setUrlsById(_id, urls) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        urls\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateAllUsernamesByUserId(userId, username) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        'u.username': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateUsernameOfEditByUserId(userId, username) {\n    const query = {\n      'editedBy._id': userId\n    };\n    const update = {\n      $set: {\n        'editedBy.username': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {\n    const query = {\n      _id,\n      'mentions.username': oldUsername\n    };\n    const update = {\n      $set: {\n        'mentions.$.username': newUsername,\n        'msg': newMessage\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateUserStarById(_id, userId, starred) {\n    let update;\n    const query = {\n      _id\n    };\n\n    if (starred) {\n      update = {\n        $addToSet: {\n          starred: {\n            _id: userId\n          }\n        }\n      };\n    } else {\n      update = {\n        $pull: {\n          starred: {\n            _id: userId\n          }\n        }\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  upgradeEtsToEditAt() {\n    const query = {\n      ets: {\n        $exists: 1\n      }\n    };\n    const update = {\n      $rename: {\n        ets: 'editedAt'\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setMessageAttachments(_id, attachments) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        attachments\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        slackBotId,\n        slackTs\n      }\n    };\n    return this.update(query, update);\n  }\n\n  unlinkUserId(userId, newUserId, newUsername, newNameAlias) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        'alias': newNameAlias,\n        'u._id': newUserId,\n        'u.username': newUsername,\n        'u.name': undefined\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  } // INSERT\n\n\n  createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    _.extend(record, extraData);\n\n    record._id = this.insertOrUpsert(record);\n    Rooms.incMsgCountById(roomId, 1);\n    return record;\n  }\n\n  createNavigationHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n    const type = 'livechat_navigation_history';\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    _.extend(record, extraData);\n\n    record._id = this.insertOrUpsert(record);\n    return record;\n  }\n\n  createTransferHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n    const type = 'livechat_transfer_history';\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    Object.assign(record, extraData);\n    record._id = this.insertOrUpsert(record);\n    return record;\n  }\n\n  createTranscriptHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n    const type = 'livechat_transcript_history';\n    const record = {\n      t: type,\n      rid: roomId,\n      ts: new Date(),\n      msg: message,\n      u: {\n        _id: user._id,\n        username: user.username\n      },\n      groupable: false\n    };\n\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      record.unread = true;\n    }\n\n    Object.assign(record, extraData);\n    record._id = this.insertOrUpsert(record);\n    return record;\n  }\n\n  createUserJoinWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);\n  }\n\n  createUserJoinTeamWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ujt', roomId, message, user, extraData);\n  }\n\n  createUserJoinWithRoomIdAndUserDiscussion(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ut', roomId, message, user, extraData);\n  }\n\n  createUserLeaveWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);\n  }\n\n  createUserLeaveTeamWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ult', roomId, message, user, extraData);\n  }\n\n  createUserConvertChannelToTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('user-converted-to-team', roomId, roomName, user, extraData);\n  }\n\n  createUserConvertTeamToChannelWithRoomIdAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('user-converted-to-channel', roomId, roomName, user, extraData);\n  }\n\n  createUserRemoveRoomFromTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('user-removed-room-from-team', roomId, roomName, user, extraData);\n  }\n\n  createUserDeleteRoomFromTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('user-deleted-room-from-team', roomId, roomName, user, extraData);\n  }\n\n  createUserAddRoomToTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('user-added-room-to-team', roomId, roomName, user, extraData);\n  }\n\n  createUserRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);\n  }\n\n  createUserRemovedFromTeamWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('removed-user-from-team', roomId, message, user, extraData);\n  }\n\n  createUserAddedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);\n  }\n\n  createUserAddedToTeamWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('added-user-to-team', roomId, message, user, extraData);\n  }\n\n  createCommandWithRoomIdAndUser(command, roomId, user, extraData) {\n    return this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);\n  }\n\n  createUserMutedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);\n  }\n\n  createUserUnmutedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);\n  }\n\n  createNewModeratorWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);\n  }\n\n  createModeratorRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);\n  }\n\n  createNewOwnerWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);\n  }\n\n  createOwnerRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);\n  }\n\n  createNewLeaderWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('new-leader', roomId, message, user, extraData);\n  }\n\n  createLeaderRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('leader-removed', roomId, message, user, extraData);\n  }\n\n  createSubscriptionRoleAddedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);\n  }\n\n  createSubscriptionRoleRemovedWithRoomIdAndUser(roomId, user, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);\n  }\n\n  createOtrSystemMessagesWithRoomIdAndUser(roomId, user, id, extraData) {\n    const message = user.username;\n    return this.createWithTypeRoomIdMessageAndUser(id, roomId, message, user, extraData);\n  } // REMOVE\n\n\n  removeById(_id) {\n    const query = {\n      _id\n    };\n    return this.remove(query);\n  }\n\n  removeByRoomId(roomId) {\n    const query = {\n      rid: roomId\n    };\n    return this.remove(query);\n  }\n\n  removeByRoomIds(rids) {\n    return this.remove({\n      rid: {\n        $in: rids\n      }\n    });\n  }\n\n  findThreadsByRoomIdPinnedTimestampAndUsers(_ref, options) {\n    let {\n      rid,\n      pinned,\n      ignoreDiscussion = true,\n      ts,\n      users = []\n    } = _ref;\n    const query = {\n      rid,\n      ts,\n      tlm: {\n        $exists: 1\n      },\n      tcount: {\n        $exists: 1\n      }\n    };\n\n    if (pinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (ignoreDiscussion) {\n      query.drid = {\n        $exists: 0\n      };\n    }\n\n    if (users.length > 0) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  removeByIdPinnedTimestampLimitAndUsers(rid, pinned) {\n    let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let ts = arguments.length > 3 ? arguments[3] : undefined;\n    let limit = arguments.length > 4 ? arguments[4] : undefined;\n    let users = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    let ignoreThreads = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n    const query = {\n      rid,\n      ts\n    };\n\n    if (pinned) {\n      query.pinned = {\n        $ne: true\n      };\n    }\n\n    if (ignoreDiscussion) {\n      query.drid = {\n        $exists: 0\n      };\n    }\n\n    if (ignoreThreads) {\n      query.tmid = {\n        $exists: 0\n      };\n      query.tcount = {\n        $exists: 0\n      };\n    }\n\n    if (users.length) {\n      query['u.username'] = {\n        $in: users\n      };\n    }\n\n    if (!limit) {\n      const count = this.remove(query); // decrease message count\n\n      Rooms.decreaseMessageCountById(rid, count);\n      return count;\n    }\n\n    const messagesToDelete = this.find(query, {\n      fields: {\n        _id: 1\n      },\n      limit\n    }).map(_ref2 => {\n      let {\n        _id\n      } = _ref2;\n      return _id;\n    });\n    const count = this.remove({\n      _id: {\n        $in: messagesToDelete\n      }\n    }); // decrease message count\n\n    Rooms.decreaseMessageCountById(rid, count);\n    return count;\n  }\n\n  removeByUserId(userId) {\n    const query = {\n      'u._id': userId\n    };\n    return this.remove(query);\n  }\n\n  getMessageByFileId(fileID) {\n    return this.findOne({\n      'file._id': fileID\n    });\n  }\n\n  getMessageByFileIdAndUsername(fileID, userId) {\n    const query = {\n      'file._id': fileID,\n      'u._id': userId\n    };\n    const options = {\n      fields: {\n        unread: 0,\n        mentions: 0,\n        channels: 0,\n        groupable: 0\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  setAsRead(rid, until) {\n    return this.update({\n      rid,\n      unread: true,\n      ts: {\n        $lt: until\n      }\n    }, {\n      $unset: {\n        unread: 1\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  setAsReadById(_id) {\n    return this.update({\n      _id\n    }, {\n      $unset: {\n        unread: 1\n      }\n    });\n  }\n\n  findUnreadMessagesByRoomAndDate(rid, after) {\n    const query = {\n      unread: true,\n      rid\n    };\n\n    if (after) {\n      query.ts = {\n        $gt: after\n      };\n    }\n\n    return this.find(query, {\n      fields: {\n        _id: 1\n      }\n    });\n  }\n  /**\n   * Copy metadata from the discussion to the system message in the parent channel\n   * which links to the discussion.\n   * Since we don't pass this metadata into the model's function, it is not a subject\n   * to race conditions: If multiple updates occur, the current state will be updated\n   * only if the new state of the discussion room is really newer.\n   */\n\n\n  refreshDiscussionMetadata(_ref3) {\n    let {\n      rid\n    } = _ref3;\n\n    if (!rid) {\n      return false;\n    }\n\n    const {\n      lm: dlm,\n      msgs: dcount\n    } = Rooms.findOneById(rid, {\n      fields: {\n        msgs: 1,\n        lm: 1\n      }\n    });\n    const query = {\n      drid: rid\n    };\n    return this.update(query, {\n      $set: {\n        dcount,\n        dlm\n      }\n    }, {\n      multi: 1\n    });\n  } // //////////////////////////////////////////////////////////////////\n  // threads\n\n\n  countThreads() {\n    return this.find({\n      tcount: {\n        $exists: true\n      }\n    }).count();\n  }\n\n  removeThreadRefByThreadId(tmid) {\n    const query = {\n      tmid\n    };\n    const update = {\n      $unset: {\n        tmid: 1\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateRepliesByThreadId(tmid, replies, ts) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $addToSet: {\n        replies: {\n          $each: replies\n        }\n      },\n      $set: {\n        tlm: ts\n      },\n      $inc: {\n        tcount: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  getThreadFollowsByThreadId(tmid) {\n    const msg = this.findOneById(tmid, {\n      fields: {\n        replies: 1\n      }\n    });\n    return msg && msg.replies;\n  }\n\n  getFirstReplyTsByThreadId(tmid) {\n    return this.findOne({\n      tmid\n    }, {\n      fields: {\n        ts: 1\n      },\n      sort: {\n        ts: 1\n      }\n    });\n  }\n\n  unsetThreadByThreadId(tmid) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $unset: {\n        tcount: 1,\n        tlm: 1,\n        replies: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateThreadLastMessageAndCountByThreadId(tmid, tlm, tcount) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $set: {\n        tlm\n      },\n      $inc: {\n        tcount\n      }\n    };\n    return this.update(query, update);\n  }\n\n  addThreadFollowerByThreadId(tmid, userId) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $addToSet: {\n        replies: userId\n      }\n    };\n    return this.update(query, update);\n  }\n\n  removeThreadFollowerByThreadId(tmid, userId) {\n    const query = {\n      _id: tmid\n    };\n    const update = {\n      $pull: {\n        replies: userId\n      }\n    };\n    return this.update(query, update);\n  }\n\n  findThreadsByRoomId(rid, skip, limit) {\n    return this.find({\n      rid,\n      tcount: {\n        $exists: true\n      }\n    }, {\n      sort: {\n        tlm: -1\n      },\n      skip,\n      limit\n    });\n  }\n\n  findAgentLastMessageByVisitorLastMessageTs(roomId, visitorLastMessageTs) {\n    const query = {\n      rid: roomId,\n      ts: {\n        $gt: visitorLastMessageTs\n      },\n      token: {\n        $exists: false\n      }\n    };\n    return this.findOne(query, {\n      sort: {\n        ts: 1\n      }\n    });\n  }\n\n  findAllImportedMessagesWithFilesToDownload() {\n    const query = {\n      '_importFile.downloadUrl': {\n        $exists: true\n      },\n      '_importFile.rocketChatUrl': {\n        $exists: false\n      },\n      '_importFile.downloaded': {\n        $ne: true\n      },\n      '_importFile.external': {\n        $ne: true\n      }\n    };\n    return this.find(query);\n  }\n\n  decreaseReplyCountById(_id) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const query = {\n      _id\n    };\n    const update = {\n      $inc: {\n        tcount: inc\n      }\n    };\n    return this.update(query, update);\n  }\n\n}\n\nmodule.exportDefault(new Messages());","map":{"version":3,"sources":["app/models/server/models/Messages.js"],"names":["_objectSpread","module","link","default","v","export","Messages","Match","_","Base","Rooms","settings","otrSystemMessages","constructor","addAttachmentTranslations","messageId","attachmentIndex","translations","updateObj","Object","keys","forEach","key","translation","update","_id","$set","tryEnsureIndex","rid","ts","_updatedAt","editedAt","sparse","expireAt","expireAfterSeconds","msg","pinned","snippeted","location","slackTs","slackBotId","unread","drid","tmid","tcount","tlm","partialFilterExpression","$exists","setReactions","reactions","keepHistoryForToken","token","$unset","multi","setRoomIdByToken","createRoomArchivedByRoomIdAndUser","roomId","user","createWithTypeRoomIdMessageAndUser","createRoomUnarchivedByRoomIdAndUser","createRoomSetReadOnlyByRoomIdAndUser","createRoomRemovedReadOnlyByRoomIdAndUser","createRoomAllowedReactingByRoomIdAndUser","createRoomDisallowedReactingByRoomIdAndUser","unsetReactions","deleteOldOTRMessages","query","t","$in","USER_JOINED_OTR","USER_REQUESTED_OTR_KEY_REFRESH","USER_KEY_REFRESHED_SUCCESSFULLY","$lte","remove","updateOTRAck","otrAck","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","type","message","extraData","createRoomRenamedWithRoomIdRoomNameAndUser","roomName","addTranslations","providerName","translationProvider","setImportFileRocketChatAttachment","importFileId","rocketChatUrl","attachment","$addToSet","attachments","countVisibleByRoomIdBetweenTimestampsInclusive","afterTimestamp","beforeTimestamp","options","_hidden","$ne","$gte","find","count","findByMention","username","findFilesByUserId","userId","fields","findFilesByRoomIdPinnedTimestampAndUsers","excludePinned","ignoreDiscussion","users","ignoreThreads","length","findDiscussionByRoomIdPinnedTimestampAndUsers","findVisibleByMentionAndRoomId","findVisibleByRoomId","findVisibleByIds","ids","findVisibleThreadByThreadId","findVisibleByRoomIdNotContainingTypes","types","showThreadMessages","$or","tshow","test","String","$nin","findInvisibleByRoomId","findVisibleByRoomIdAfterTimestamp","timestamp","$gt","findForUpdates","findVisibleByRoomIdBeforeTimestamp","$lt","findVisibleByRoomIdBeforeTimestampNotContainingTypes","inclusive","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","findVisibleCreatedOrEditedAfterTimestamp","findStarredByUserAtRoom","findPinnedByRoom","findSnippetedByRoom","getLastTimestamp","sort","limit","fetch","findByRoomIdAndMessageIds","messageIds","findOneBySlackBotIdAndSlackTs","findOne","findOneBySlackTs","findOneByRoomIdAndMessageId","findByRoomIdAndType","findByRoomId","getLastVisibleMessageSentWithNoTypeByRoomId","cloneAndSaveAsHistoryById","record","findOneById","parent","Date","editedBy","insert","setHiddenById","hidden","setAsDeletedByIdAndUser","urls","mentions","md","blocks","setPinnedByIdAndUserId","pinnedBy","pinnedAt","setSnippetedByIdAndUserId","snippetName","snippetedBy","snippetedAt","setUrlsById","updateAllUsernamesByUserId","updateUsernameOfEditByUserId","updateUsernameAndMessageOfMentionByIdAndOldUsername","oldUsername","newUsername","newMessage","updateUserStarById","starred","$pull","upgradeEtsToEditAt","ets","$rename","setMessageAttachments","setSlackBotIdAndSlackTs","unlinkUserId","newUserId","newNameAlias","undefined","u","groupable","get","extend","insertOrUpsert","incMsgCountById","createNavigationHistoryWithRoomIdMessageAndUser","createTransferHistoryWithRoomIdMessageAndUser","assign","createTranscriptHistoryWithRoomIdMessageAndUser","createUserJoinWithRoomIdAndUser","createUserJoinTeamWithRoomIdAndUser","createUserJoinWithRoomIdAndUserDiscussion","createUserLeaveWithRoomIdAndUser","createUserLeaveTeamWithRoomIdAndUser","createUserConvertChannelToTeamWithRoomIdAndUser","createUserConvertTeamToChannelWithRoomIdAndUser","createUserRemoveRoomFromTeamWithRoomIdAndUser","createUserDeleteRoomFromTeamWithRoomIdAndUser","createUserAddRoomToTeamWithRoomIdAndUser","createUserRemovedWithRoomIdAndUser","createUserRemovedFromTeamWithRoomIdAndUser","createUserAddedWithRoomIdAndUser","createUserAddedToTeamWithRoomIdAndUser","createCommandWithRoomIdAndUser","command","createUserMutedWithRoomIdAndUser","createUserUnmutedWithRoomIdAndUser","createNewModeratorWithRoomIdAndUser","createModeratorRemovedWithRoomIdAndUser","createNewOwnerWithRoomIdAndUser","createOwnerRemovedWithRoomIdAndUser","createNewLeaderWithRoomIdAndUser","createLeaderRemovedWithRoomIdAndUser","createSubscriptionRoleAddedWithRoomIdAndUser","createSubscriptionRoleRemovedWithRoomIdAndUser","createOtrSystemMessagesWithRoomIdAndUser","id","removeById","removeByRoomId","removeByRoomIds","rids","findThreadsByRoomIdPinnedTimestampAndUsers","removeByIdPinnedTimestampLimitAndUsers","decreaseMessageCountById","messagesToDelete","map","removeByUserId","getMessageByFileId","fileID","getMessageByFileIdAndUsername","channels","setAsRead","until","setAsReadById","findUnreadMessagesByRoomAndDate","after","refreshDiscussionMetadata","lm","dlm","msgs","dcount","countThreads","removeThreadRefByThreadId","updateRepliesByThreadId","replies","$each","$inc","getThreadFollowsByThreadId","getFirstReplyTsByThreadId","unsetThreadByThreadId","updateThreadLastMessageAndCountByThreadId","addThreadFollowerByThreadId","removeThreadFollowerByThreadId","findThreadsByRoomId","skip","findAgentLastMessageByVisitorLastMessageTs","visitorLastMessageTs","findAllImportedMessagesWithFilesToDownload","decreaseReplyCountById","inc","exportDefault"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\nimport _ from 'underscore';\n\nimport { Base } from './_Base';\nimport Rooms from './Rooms';\nimport { settings } from '../../../settings/server/functions/settings';\nimport { otrSystemMessages } from '../../../otr/lib/constants';\n\nexport class Messages extends Base {\n\tconstructor() {\n\t\tsuper('message');\n\n\t\tthis.tryEnsureIndex({ rid: 1, ts: 1, _updatedAt: 1 });\n\t\tthis.tryEnsureIndex({ ts: 1 });\n\t\tthis.tryEnsureIndex({ 'u._id': 1 });\n\t\tthis.tryEnsureIndex({ editedAt: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'editedBy._id': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'rid': 1, 't': 1, 'u._id': 1 });\n\t\tthis.tryEnsureIndex({ expireAt: 1 }, { expireAfterSeconds: 0 });\n\t\tthis.tryEnsureIndex({ msg: 'text' });\n\t\tthis.tryEnsureIndex({ 'file._id': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ 'mentions.username': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ pinned: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ snippeted: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ location: '2dsphere' });\n\t\tthis.tryEnsureIndex({ slackTs: 1, slackBotId: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ unread: 1 }, { sparse: true });\n\n\t\t// discussions\n\t\tthis.tryEnsureIndex({ drid: 1 }, { sparse: true });\n\t\t// threads\n\t\tthis.tryEnsureIndex({ tmid: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ tcount: 1, tlm: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ rid: 1, tlm: -1 }, { partialFilterExpression: { tcount: { $exists: true } } }); // used for the List Threads\n\t\tthis.tryEnsureIndex({ rid: 1, tcount: 1 }); // used for the List Threads Count\n\t\t// livechat\n\t\tthis.tryEnsureIndex({ 'navigation.token': 1 }, { sparse: true });\n\t}\n\n\tsetReactions(messageId, reactions) {\n\t\treturn this.update({ _id: messageId }, { $set: { reactions } });\n\t}\n\n\tkeepHistoryForToken(token) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'expireAt': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\texpireAt: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tsetRoomIdByToken(token, rid) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'rid': null,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\trid,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcreateRoomArchivedByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-archived', roomId, '', user);\n\t}\n\n\tcreateRoomUnarchivedByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-unarchived', roomId, '', user);\n\t}\n\n\tcreateRoomSetReadOnlyByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-set-read-only', roomId, '', user);\n\t}\n\n\tcreateRoomRemovedReadOnlyByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-removed-read-only', roomId, '', user);\n\t}\n\n\tcreateRoomAllowedReactingByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-allowed-reacting', roomId, '', user);\n\t}\n\n\tcreateRoomDisallowedReactingByRoomIdAndUser(roomId, user) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('room-disallowed-reacting', roomId, '', user);\n\t}\n\n\tunsetReactions(messageId) {\n\t\treturn this.update({ _id: messageId }, { $unset: { reactions: 1 } });\n\t}\n\n\tdeleteOldOTRMessages(roomId, ts) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tt: {\n\t\t\t\t$in: [\n\t\t\t\t\t'otr',\n\t\t\t\t\totrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\totrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t\t\totrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t],\n\t\t\t},\n\t\t\tts: { $lte: ts },\n\t\t};\n\t\treturn this.remove(query);\n\t}\n\n\tupdateOTRAck(_id, otrAck) {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { otrAck } };\n\t\treturn this.update(query, update);\n\t}\n\n\tcreateRoomSettingsChangedWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData);\n\t}\n\n\tcreateRoomRenamedWithRoomIdRoomNameAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('r', roomId, roomName, user, extraData);\n\t}\n\n\taddTranslations(messageId, translations, providerName) {\n\t\tconst updateObj = { translationProvider: providerName };\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`translations.${key}`] = translation;\n\t\t});\n\t\treturn this.update({ _id: messageId }, { $set: updateObj });\n\t}\n\n\taddAttachmentTranslations = function (messageId, attachmentIndex, translations) {\n\t\tconst updateObj = {};\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`attachments.${attachmentIndex}.translations.${key}`] = translation;\n\t\t});\n\t\treturn this.update({ _id: messageId }, { $set: updateObj });\n\t};\n\n\tsetImportFileRocketChatAttachment(importFileId, rocketChatUrl, attachment) {\n\t\tconst query = {\n\t\t\t'_importFile.id': importFileId,\n\t\t};\n\n\t\treturn this.update(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'_importFile.rocketChatUrl': rocketChatUrl,\n\t\t\t\t\t'_importFile.downloaded': true,\n\t\t\t\t},\n\t\t\t\t$addToSet: {\n\t\t\t\t\tattachments: attachment,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ multi: true },\n\t\t);\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gte: afterTimestamp,\n\t\t\t\t$lte: beforeTimestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options).count();\n\t}\n\n\t// FIND\n\tfindByMention(username, options) {\n\t\tconst query = { 'mentions.username': username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindFilesByUserId(userId, options = {}) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\t\treturn this.find(query, { fields: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindFilesByRoomIdPinnedTimestampAndUsers(\n\t\trid,\n\t\texcludePinned,\n\t\tignoreDiscussion = true,\n\t\tts,\n\t\tusers = [],\n\t\tignoreThreads = true,\n\t\toptions = {},\n\t) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\n\t\tif (excludePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: 0 };\n\t\t\tquery.tcount = { $exists: 0 };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: 0 };\n\t\t}\n\n\t\tif (users.length) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\treturn this.find(query, { fields: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, users = [], options = {}) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t\tdrid: { $exists: 1 },\n\t\t};\n\n\t\tif (excludePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (users.length) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByMentionAndRoomId(username, rid, options) {\n\t\tconst query = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomId(rid, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByIds(ids, options) {\n\t\tconst query = {\n\t\t\t_id: { $in: ids },\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleThreadByThreadId(tmid, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\ttmid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypes(roomId, types, options, showThreadMessages = true) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (Match.test(types, [String]) && types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindInvisibleByRoomId(roomId, options) {\n\t\tconst query = {\n\t\t\t_hidden: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindForUpdates(roomId, timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$lt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options, showThreadMessages = true, inclusive = false) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$lte' : '$lt']: timestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (Match.test(types, [String]) && types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId,\n\t\tafterTimestamp,\n\t\tbeforeTimestamp,\n\t\ttypes,\n\t\toptions,\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t) {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (Match.test(types, [String]) && types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleCreatedOrEditedAfterTimestamp(timestamp, options) {\n\t\tconst query = {\n\t\t\t_hidden: { $ne: true },\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tts: {\n\t\t\t\t\t\t$gt: timestamp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\teditedAt: {\n\t\t\t\t\t\t$gt: timestamp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindStarredByUserAtRoom(userId, roomId, options) {\n\t\tconst query = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': userId,\n\t\t\t'rid': roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPinnedByRoom(roomId, options) {\n\t\tconst query = {\n\t\t\tt: { $ne: 'rm' },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindSnippetedByRoom(roomId, options) {\n\t\tconst query = {\n\t\t\t_hidden: { $ne: true },\n\t\t\tsnippeted: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetLastTimestamp(options = { fields: { _id: 0, ts: 1 } }) {\n\t\toptions.sort = { ts: -1 };\n\t\toptions.limit = 1;\n\t\tconst [message] = this.find({}, options).fetch();\n\t\treturn message?.ts;\n\t}\n\n\tfindByRoomIdAndMessageIds(rid, messageIds, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: {\n\t\t\t\t$in: messageIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {\n\t\tconst query = {\n\t\t\tslackBotId,\n\t\t\tslackTs,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneBySlackTs(slackTs) {\n\t\tconst query = { slackTs };\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid, messageId, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByRoomIdAndType(roomId, type, options) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tt: type,\n\t\t};\n\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(roomId, options) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetLastVisibleMessageSentWithNoTypeByRoomId(rid, messageId) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_hidden: { $ne: true },\n\t\t\tt: { $exists: false },\n\t\t\t$or: [{ tmid: { $exists: false } }, { tshow: true }],\n\t\t};\n\n\t\tif (messageId) {\n\t\t\tquery._id = { $ne: messageId };\n\t\t}\n\n\t\tconst options = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tcloneAndSaveAsHistoryById(_id, user) {\n\t\tconst record = this.findOneById(_id);\n\t\trecord._hidden = true;\n\t\trecord.parent = record._id;\n\t\trecord.editedAt = new Date();\n\t\trecord.editedBy = {\n\t\t\t_id: user._id,\n\t\t\tusername: user.username,\n\t\t};\n\t\tdelete record._id;\n\t\treturn this.insert(record);\n\t}\n\n\t// UPDATE\n\tsetHiddenById(_id, hidden) {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAsDeletedByIdAndUser(_id, user) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: [],\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {\n\t\tif (pinned == null) {\n\t\t\tpinned = true;\n\t\t}\n\t\tif (pinnedAt == null) {\n\t\t\tpinnedAt = 0;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tpinned,\n\t\t\t\tpinnedAt: pinnedAt || new Date(),\n\t\t\t\tpinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetSnippetedByIdAndUserId(message, snippetName, snippetedBy, snippeted, snippetedAt) {\n\t\tif (snippeted == null) {\n\t\t\tsnippeted = true;\n\t\t}\n\t\tif (snippetedAt == null) {\n\t\t\tsnippetedAt = 0;\n\t\t}\n\t\tconst query = { _id: message._id };\n\n\t\tconst msg = `\\`\\`\\`${message.msg}\\`\\`\\``;\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tmsg,\n\t\t\t\tsnippeted,\n\t\t\t\tsnippetedAt: snippetedAt || new Date(),\n\t\t\t\tsnippetedBy,\n\t\t\t\tsnippetName,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetUrlsById(_id, urls) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\turls,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateAllUsernamesByUserId(userId, username) {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateUsernameOfEditByUserId(userId, username) {\n\t\tconst query = { 'editedBy._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'editedBy.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'mentions.username': oldUsername,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'mentions.$.username': newUsername,\n\t\t\t\t'msg': newMessage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateUserStarById(_id, userId, starred) {\n\t\tlet update;\n\t\tconst query = { _id };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupgradeEtsToEditAt() {\n\t\tconst query = { ets: { $exists: 1 } };\n\n\t\tconst update = {\n\t\t\t$rename: {\n\t\t\t\tets: 'editedAt',\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetMessageAttachments(_id, attachments) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tattachments,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tslackBotId,\n\t\t\t\tslackTs,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tunlinkUserId(userId, newUserId, newUsername, newNameAlias) {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'alias': newNameAlias,\n\t\t\t\t'u._id': newUserId,\n\t\t\t\t'u.username': newUsername,\n\t\t\t\t'u.name': undefined,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\t// INSERT\n\tcreateWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\n\t\t_.extend(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\tRooms.incMsgCountById(roomId, 1);\n\t\treturn record;\n\t}\n\n\tcreateNavigationHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n\t\tconst type = 'livechat_navigation_history';\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\n\t\t_.extend(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\treturn record;\n\t}\n\n\tcreateTransferHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n\t\tconst type = 'livechat_transfer_history';\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\t\tObject.assign(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\treturn record;\n\t}\n\n\tcreateTranscriptHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {\n\t\tconst type = 'livechat_transcript_history';\n\t\tconst record = {\n\t\t\tt: type,\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\trecord.unread = true;\n\t\t}\n\t\tObject.assign(record, extraData);\n\n\t\trecord._id = this.insertOrUpsert(record);\n\t\treturn record;\n\t}\n\n\tcreateUserJoinWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);\n\t}\n\n\tcreateUserJoinTeamWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ujt', roomId, message, user, extraData);\n\t}\n\n\tcreateUserJoinWithRoomIdAndUserDiscussion(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ut', roomId, message, user, extraData);\n\t}\n\n\tcreateUserLeaveWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);\n\t}\n\n\tcreateUserLeaveTeamWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ult', roomId, message, user, extraData);\n\t}\n\n\tcreateUserConvertChannelToTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-converted-to-team', roomId, roomName, user, extraData);\n\t}\n\n\tcreateUserConvertTeamToChannelWithRoomIdAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-converted-to-channel', roomId, roomName, user, extraData);\n\t}\n\n\tcreateUserRemoveRoomFromTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-removed-room-from-team', roomId, roomName, user, extraData);\n\t}\n\n\tcreateUserDeleteRoomFromTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-deleted-room-from-team', roomId, roomName, user, extraData);\n\t}\n\n\tcreateUserAddRoomToTeamWithRoomIdAndUser(roomId, roomName, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-added-room-to-team', roomId, roomName, user, extraData);\n\t}\n\n\tcreateUserRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);\n\t}\n\n\tcreateUserRemovedFromTeamWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('removed-user-from-team', roomId, message, user, extraData);\n\t}\n\n\tcreateUserAddedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);\n\t}\n\n\tcreateUserAddedToTeamWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('added-user-to-team', roomId, message, user, extraData);\n\t}\n\n\tcreateCommandWithRoomIdAndUser(command, roomId, user, extraData) {\n\t\treturn this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);\n\t}\n\n\tcreateUserMutedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);\n\t}\n\n\tcreateUserUnmutedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);\n\t}\n\n\tcreateNewModeratorWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);\n\t}\n\n\tcreateModeratorRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateNewOwnerWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);\n\t}\n\n\tcreateOwnerRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateNewLeaderWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('new-leader', roomId, message, user, extraData);\n\t}\n\n\tcreateLeaderRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('leader-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateSubscriptionRoleAddedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);\n\t}\n\n\tcreateSubscriptionRoleRemovedWithRoomIdAndUser(roomId, user, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);\n\t}\n\n\tcreateOtrSystemMessagesWithRoomIdAndUser(roomId, user, id, extraData) {\n\t\tconst message = user.username;\n\t\treturn this.createWithTypeRoomIdMessageAndUser(id, roomId, message, user, extraData);\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\tconst query = { _id };\n\n\t\treturn this.remove(query);\n\t}\n\n\tremoveByRoomId(roomId) {\n\t\tconst query = { rid: roomId };\n\n\t\treturn this.remove(query);\n\t}\n\n\tremoveByRoomIds(rids) {\n\t\treturn this.remove({ rid: { $in: rids } });\n\t}\n\n\tfindThreadsByRoomIdPinnedTimestampAndUsers({ rid, pinned, ignoreDiscussion = true, ts, users = [] }, options) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t\ttlm: { $exists: 1 },\n\t\t\ttcount: { $exists: 1 },\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: 0 };\n\t\t}\n\n\t\tif (users.length > 0) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tremoveByIdPinnedTimestampLimitAndUsers(rid, pinned, ignoreDiscussion = true, ts, limit, users = [], ignoreThreads = true) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tts,\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: 0 };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: 0 };\n\t\t\tquery.tcount = { $exists: 0 };\n\t\t}\n\n\t\tif (users.length) {\n\t\t\tquery['u.username'] = { $in: users };\n\t\t}\n\n\t\tif (!limit) {\n\t\t\tconst count = this.remove(query);\n\n\t\t\t// decrease message count\n\t\t\tRooms.decreaseMessageCountById(rid, count);\n\n\t\t\treturn count;\n\t\t}\n\n\t\tconst messagesToDelete = this.find(query, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t},\n\t\t\tlimit,\n\t\t}).map(({ _id }) => _id);\n\n\t\tconst count = this.remove({\n\t\t\t_id: {\n\t\t\t\t$in: messagesToDelete,\n\t\t\t},\n\t\t});\n\n\t\t// decrease message count\n\t\tRooms.decreaseMessageCountById(rid, count);\n\n\t\treturn count;\n\t}\n\n\tremoveByUserId(userId) {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.remove(query);\n\t}\n\n\tgetMessageByFileId(fileID) {\n\t\treturn this.findOne({ 'file._id': fileID });\n\t}\n\n\tgetMessageByFileIdAndUsername(fileID, userId) {\n\t\tconst query = {\n\t\t\t'file._id': fileID,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\tunread: 0,\n\t\t\t\tmentions: 0,\n\t\t\t\tchannels: 0,\n\t\t\t\tgroupable: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetAsRead(rid, until) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmulti: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tsetAsReadById(_id) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindUnreadMessagesByRoomAndDate(rid, after) {\n\t\tconst query = {\n\t\t\tunread: true,\n\t\t\trid,\n\t\t};\n\n\t\tif (after) {\n\t\t\tquery.ts = { $gt: after };\n\t\t}\n\n\t\treturn this.find(query, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Copy metadata from the discussion to the system message in the parent channel\n\t * which links to the discussion.\n\t * Since we don't pass this metadata into the model's function, it is not a subject\n\t * to race conditions: If multiple updates occur, the current state will be updated\n\t * only if the new state of the discussion room is really newer.\n\t */\n\trefreshDiscussionMetadata({ rid }) {\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst { lm: dlm, msgs: dcount } = Rooms.findOneById(rid, {\n\t\t\tfields: {\n\t\t\t\tmsgs: 1,\n\t\t\t\tlm: 1,\n\t\t\t},\n\t\t});\n\n\t\tconst query = {\n\t\t\tdrid: rid,\n\t\t};\n\n\t\treturn this.update(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdcount,\n\t\t\t\t\tdlm,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ multi: 1 },\n\t\t);\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tcountThreads() {\n\t\treturn this.find({ tcount: { $exists: true } }).count();\n\t}\n\n\tremoveThreadRefByThreadId(tmid) {\n\t\tconst query = { tmid };\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateRepliesByThreadId(tmid, replies, ts) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: {\n\t\t\t\t\t$each: replies,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\ttlm: ts,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tgetThreadFollowsByThreadId(tmid) {\n\t\tconst msg = this.findOneById(tmid, { fields: { replies: 1 } });\n\t\treturn msg && msg.replies;\n\t}\n\n\tgetFirstReplyTsByThreadId(tmid) {\n\t\treturn this.findOne({ tmid }, { fields: { ts: 1 }, sort: { ts: 1 } });\n\t}\n\n\tunsetThreadByThreadId(tmid) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\ttcount: 1,\n\t\t\t\ttlm: 1,\n\t\t\t\treplies: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateThreadLastMessageAndCountByThreadId(tmid, tlm, tcount) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\ttlm,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\taddThreadFollowerByThreadId(tmid, userId) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tremoveThreadFollowerByThreadId(tmid, userId) {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tfindThreadsByRoomId(rid, skip, limit) {\n\t\treturn this.find({ rid, tcount: { $exists: true } }, { sort: { tlm: -1 }, skip, limit });\n\t}\n\n\tfindAgentLastMessageByVisitorLastMessageTs(roomId, visitorLastMessageTs) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tts: { $gt: visitorLastMessageTs },\n\t\t\ttoken: { $exists: false },\n\t\t};\n\n\t\treturn this.findOne(query, { sort: { ts: 1 } });\n\t}\n\n\tfindAllImportedMessagesWithFilesToDownload() {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tdecreaseReplyCountById(_id, inc = -1) {\n\t\tconst query = { _id };\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\ttcount: inc,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update);\n\t}\n}\n\nexport default new Messages();\n"]},"sourceType":"module","hash":"6d67a334a00475de44cfcf996a9eae911f163d0f"}
