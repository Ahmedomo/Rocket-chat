{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Rooms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"app/models/server/models/Rooms.js","filename":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Rooms.js","targets":{"android":"95.0.0","chrome":"95.0.0","edge":"95.0.0","firefox":"78.0.0","ie":"10.0.0","ios":"15.0.0","opera":"81.0.0","safari":"15.1.0","samsung":"14.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/weslley/Documents/projects/Rocket.Chat","root":"/home/weslley/Documents/projects/Rocket.Chat","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.16.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/weslley/Documents/projects/Rocket.Chat/app/models/server/models/Rooms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/server/models/Rooms.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Rooms: () => Rooms\n});\n\nlet _;\n\nmodule.link(\"underscore\", {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nlet s;\nmodule.link(\"underscore.string\", {\n  default(v) {\n    s = v;\n  }\n\n}, 1);\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n\n}, 2);\nlet Base;\nmodule.link(\"./_Base\", {\n  Base(v) {\n    Base = v;\n  }\n\n}, 3);\nlet Messages;\nmodule.link(\"./Messages\", {\n  default(v) {\n    Messages = v;\n  }\n\n}, 4);\nlet Subscriptions;\nmodule.link(\"./Subscriptions\", {\n  default(v) {\n    Subscriptions = v;\n  }\n\n}, 5);\n\nclass Rooms extends Base {\n  constructor() {\n    super(...arguments);\n\n    this.setAllowReactingWhenReadOnlyById = function (_id, allowReacting) {\n      const query = {\n        _id\n      };\n      const update = {\n        $set: {\n          reactWhenReadOnly: allowReacting\n        }\n      };\n      return this.update(query, update);\n    };\n\n    this.setSystemMessagesById = function (_id, systemMessages) {\n      const query = {\n        _id\n      };\n      const update = systemMessages && systemMessages.length > 0 ? {\n        $set: {\n          sysMes: systemMessages\n        }\n      } : {\n        $unset: {\n          sysMes: ''\n        }\n      };\n      return this.update(query, update);\n    };\n\n    this.tryEnsureIndex({\n      name: 1\n    }, {\n      unique: true,\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      default: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      featured: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      muted: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      t: 1\n    });\n    this.tryEnsureIndex({\n      'u._id': 1\n    });\n    this.tryEnsureIndex({\n      ts: 1\n    }); // Tokenpass\n\n    this.tryEnsureIndex({\n      'tokenpass.tokens.token': 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      tokenpass: 1\n    }, {\n      sparse: true\n    }); // discussions\n\n    this.tryEnsureIndex({\n      prid: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      fname: 1\n    }, {\n      sparse: true\n    }); // field used for DMs only\n\n    this.tryEnsureIndex({\n      uids: 1\n    }, {\n      sparse: true\n    });\n    this.tryEnsureIndex({\n      teamId: 1,\n      teamDefault: 1\n    }, {\n      sparse: true\n    });\n  }\n\n  findOneByIdOrName(_idOrName, options) {\n    const query = {\n      $or: [{\n        _id: _idOrName\n      }, {\n        name: _idOrName\n      }]\n    };\n    return this.findOne(query, options);\n  }\n\n  setJitsiTimeout(_id, time) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        jitsiTimeout: time\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setCallStatus(_id, status) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        callStatus: status\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setCallStatusAndCallStartTime(_id, status) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        callStatus: status,\n        webRtcCallStartTime: new Date()\n      }\n    };\n    return this.update(query, update);\n  }\n\n  findByTokenpass(tokens) {\n    const query = {\n      'tokenpass.tokens.token': {\n        $in: tokens\n      }\n    };\n    return this._db.find(query).fetch();\n  }\n\n  setTokensById(_id, tokens) {\n    const update = {\n      $set: {\n        'tokenpass.tokens.token': tokens\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  findAllTokenChannels() {\n    const query = {\n      tokenpass: {\n        $exists: true\n      }\n    };\n    const options = {\n      fields: {\n        tokenpass: 1\n      }\n    };\n    return this._db.find(query, options);\n  }\n\n  setReactionsInLastMessage(roomId, lastMessage) {\n    return this.update({\n      _id: roomId\n    }, {\n      $set: {\n        'lastMessage.reactions': lastMessage.reactions\n      }\n    });\n  }\n\n  unsetReactionsInLastMessage(roomId) {\n    return this.update({\n      _id: roomId\n    }, {\n      $unset: {\n        lastMessage: {\n          reactions: 1\n        }\n      }\n    });\n  }\n\n  unsetAllImportIds() {\n    const query = {\n      importIds: {\n        $exists: true\n      }\n    };\n    const update = {\n      $unset: {\n        importIds: 1\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  updateLastMessageStar(roomId, userId, starred) {\n    let update;\n    const query = {\n      _id: roomId\n    };\n\n    if (starred) {\n      update = {\n        $addToSet: {\n          'lastMessage.starred': {\n            _id: userId\n          }\n        }\n      };\n    } else {\n      update = {\n        $pull: {\n          'lastMessage.starred': {\n            _id: userId\n          }\n        }\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  setLastMessageSnippeted(roomId, message, snippetName, snippetedBy, snippeted, snippetedAt) {\n    const query = {\n      _id: roomId\n    };\n    const msg = \"```\".concat(message.msg, \"```\");\n    const update = {\n      $set: {\n        'lastMessage.msg': msg,\n        'lastMessage.snippeted': snippeted,\n        'lastMessage.snippetedAt': snippetedAt || new Date(),\n        'lastMessage.snippetedBy': snippetedBy,\n        'lastMessage.snippetName': snippetName\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setLastMessagePinned(roomId, pinnedBy, pinned, pinnedAt) {\n    const query = {\n      _id: roomId\n    };\n    const update = {\n      $set: {\n        'lastMessage.pinned': pinned,\n        'lastMessage.pinnedAt': pinnedAt || new Date(),\n        'lastMessage.pinnedBy': pinnedBy\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setLastMessageAsRead(roomId) {\n    return this.update({\n      _id: roomId\n    }, {\n      $unset: {\n        'lastMessage.unread': 1\n      }\n    });\n  }\n\n  setSentiment(roomId, sentiment) {\n    return this.update({\n      _id: roomId\n    }, {\n      $set: {\n        sentiment\n      }\n    });\n  }\n\n  setDescriptionById(_id, description) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        description\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setStreamingOptionsById(_id, streamingOptions) {\n    const update = {\n      $set: {\n        streamingOptions\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  setTokenpassById(_id, tokenpass) {\n    const update = {\n      $set: {\n        tokenpass\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  setReadOnlyById(_id, readOnly) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        ro: readOnly\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setDmReadOnlyByUserId(_id, ids, readOnly, reactWhenReadOnly) {\n    const query = _objectSpread(_objectSpread({\n      uids: {\n        $size: 2,\n        $in: [_id]\n      }\n    }, ids && Array.isArray(ids) ? {\n      _id: {\n        $in: ids\n      }\n    } : {}), {}, {\n      t: 'd'\n    });\n\n    const update = {\n      $set: {\n        ro: readOnly,\n        reactWhenReadOnly\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  getDirectConversationsByUserId(_id, options) {\n    return this.find({\n      t: 'd',\n      uids: {\n        $size: 2,\n        $in: [_id]\n      }\n    }, options);\n  }\n\n  setAvatarData(_id, origin, etag) {\n    const update = {\n      $set: {\n        avatarOrigin: origin,\n        avatarETag: etag\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  unsetAvatarData(_id) {\n    const update = {\n      $set: {\n        avatarETag: Date.now()\n      },\n      $unset: {\n        avatarOrigin: 1\n      }\n    };\n    return this.update({\n      _id\n    }, update);\n  }\n\n  setE2eKeyId(_id, e2eKeyId, options) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        e2eKeyId\n      }\n    };\n    return this.update(query, update, options);\n  }\n\n  findOneByImportId(_id, options) {\n    const query = {\n      importIds: _id\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByNonValidatedName(name, options) {\n    const room = this.findOneByName(name, options);\n\n    if (room) {\n      return room;\n    }\n\n    let channelName = s.trim(name);\n\n    try {\n      // TODO evaluate if this function call should be here\n      const {\n        getValidRoomName\n      } = Promise.await(module.dynamicImport('../../../utils/lib/getValidRoomName'));\n      channelName = getValidRoomName(channelName, null, {\n        allowDuplicates: true\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    return this.findOneByName(channelName, options);\n  }\n\n  findOneByName(name, options) {\n    const query = {\n      name\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByNameAndNotId(name, rid) {\n    const query = {\n      _id: {\n        $ne: rid\n      },\n      name\n    };\n    return this.findOne(query);\n  }\n\n  findOneByDisplayName(fname, options) {\n    const query = {\n      fname\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneByNameAndType(name, type, options) {\n    const query = {\n      name,\n      t: type,\n      teamId: {\n        $exists: false\n      }\n    };\n    return this.findOne(query, options);\n  } // FIND\n\n\n  findById(roomId, options) {\n    return this.find({\n      _id: roomId\n    }, options);\n  }\n\n  findByIds(roomIds, options) {\n    return this.find({\n      _id: {\n        $in: [].concat(roomIds)\n      }\n    }, options);\n  }\n\n  findByType(type, options) {\n    const query = {\n      t: type\n    };\n    return this.find(query, options);\n  }\n\n  findByTypeInIds(type, ids, options) {\n    const query = {\n      _id: {\n        $in: ids\n      },\n      t: type\n    };\n    return this.find(query, options);\n  }\n\n  findByTypes(types) {\n    let discussion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const query = {\n      t: {\n        $in: types\n      },\n      prid: {\n        $exists: discussion\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findByUserId(userId, options) {\n    const query = {\n      'u._id': userId\n    };\n    return this.find(query, options);\n  }\n\n  findBySubscriptionUserId(userId, options) {\n    const data = Subscriptions.cachedFindByUserId(userId, {\n      fields: {\n        rid: 1\n      }\n    }).fetch().map(item => item.rid);\n    const query = {\n      _id: {\n        $in: data\n      },\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: data\n        }\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findBySubscriptionTypeAndUserId(type, userId, options) {\n    const data = Subscriptions.findByUserIdAndType(userId, type, {\n      fields: {\n        rid: 1\n      }\n    }).fetch().map(item => item.rid);\n    const query = {\n      t: type,\n      _id: {\n        $in: data\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findBySubscriptionUserIdUpdatedAfter(userId, _updatedAt, options) {\n    const ids = Subscriptions.findByUserId(userId, {\n      fields: {\n        rid: 1\n      }\n    }).fetch().map(item => item.rid);\n    const query = {\n      _id: {\n        $in: ids\n      },\n      _updatedAt: {\n        $gt: _updatedAt\n      },\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: ids\n        }\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findByNameContaining(name) {\n    let discussion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n    const query = {\n      prid: {\n        $exists: discussion\n      },\n      $or: [{\n        name: nameRegex\n      }, {\n        t: 'd',\n        usernames: nameRegex\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findByNameContainingAndTypes(name, types) {\n    let discussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n    const query = {\n      t: {\n        $in: types\n      },\n      prid: {\n        $exists: discussion\n      },\n      $or: [{\n        name: nameRegex\n      }, {\n        t: 'd',\n        usernames: nameRegex\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findByNameAndType(name, type, options) {\n    const query = {\n      t: type,\n      name\n    }; // do not use cache\n\n    return this._db.find(query, options);\n  }\n\n  findByNameOrFNameAndType(name, type, options) {\n    const query = {\n      t: type,\n      teamId: {\n        $exists: false\n      },\n      $or: [{\n        name\n      }, {\n        fname: name\n      }]\n    }; // do not use cache\n\n    return this._db.find(query, options);\n  }\n\n  findByNameOrFNameAndRoomIdsIncludingTeamRooms(text, teamIds, roomIds, options) {\n    const searchTerm = text && new RegExp(text, 'i');\n    const query = {\n      $and: [{\n        teamMain: {\n          $exists: false\n        }\n      }, {\n        prid: {\n          $exists: false\n        }\n      }, {\n        $or: [{\n          t: 'c',\n          teamId: {\n            $exists: false\n          }\n        }, {\n          t: 'c',\n          teamId: {\n            $in: teamIds\n          }\n        }, ...((roomIds === null || roomIds === void 0 ? void 0 : roomIds.length) > 0 ? [{\n          _id: {\n            $in: roomIds\n          }\n        }] : [])]\n      }, ...(searchTerm ? [{\n        $or: [{\n          name: searchTerm\n        }, {\n          fname: searchTerm\n        }]\n      }] : [])]\n    };\n    return this._db.find(query, options);\n  }\n\n  findContainingNameOrFNameInIdsAsTeamMain(text, rids, options) {\n    const query = {\n      teamMain: true,\n      $and: [{\n        $or: [{\n          t: 'p',\n          _id: {\n            $in: rids\n          }\n        }, {\n          t: 'c'\n        }]\n      }]\n    };\n\n    if (text) {\n      const regex = new RegExp(text, 'i');\n      query.$and.push({\n        $or: [{\n          name: regex\n        }, {\n          fname: regex\n        }]\n      });\n    }\n\n    return this._db.find(query, options);\n  }\n\n  findByNameAndTypeNotDefault(name, type, options) {\n    const query = {\n      t: type,\n      name,\n      default: {\n        $ne: true\n      },\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamMain: true\n      }]\n    }; // do not use cache\n\n    return this._db.find(query, options);\n  }\n\n  findByNameAndTypesNotInIds(name, types, ids, options) {\n    const query = {\n      _id: {\n        $nin: ids\n      },\n      t: {\n        $in: types\n      },\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: ids\n        }\n      }, {\n        // Also return the main room of public teams\n        // this will have no effect if the method is called without the 'c' type, as the type filter is outside the $or group.\n        teamMain: true,\n        t: 'c'\n      }],\n      name\n    }; // do not use cache\n\n    return this._db.find(query, options);\n  }\n\n  findChannelAndPrivateByNameStarting(name, sIds, options) {\n    const nameRegex = new RegExp(\"^\".concat(s.trim(escapeRegExp(name))), 'i');\n    const query = {\n      t: {\n        $in: ['c', 'p']\n      },\n      name: nameRegex,\n      teamMain: {\n        $exists: false\n      },\n      $or: [{\n        teamId: {\n          $exists: false\n        }\n      }, {\n        teamId: {\n          $exists: true\n        },\n        _id: {\n          $in: sIds\n        }\n      }]\n    };\n    return this.find(query, options);\n  }\n\n  findByDefaultAndTypes(defaultValue, types, options) {\n    const query = {\n      default: defaultValue,\n      t: {\n        $in: types\n      }\n    };\n    return this.find(query, options);\n  }\n\n  findDirectRoomContainingAllUsernames(usernames, options) {\n    const query = {\n      t: 'd',\n      usernames: {\n        $size: usernames.length,\n        $all: usernames\n      },\n      usersCount: usernames.length\n    };\n    return this.findOne(query, options);\n  }\n\n  findOneDirectRoomContainingAllUserIDs(uid, options) {\n    const query = {\n      t: 'd',\n      uids: {\n        $size: uid.length,\n        $all: uid\n      }\n    };\n    return this.findOne(query, options);\n  }\n\n  findByTypeAndName(type, name, options) {\n    const query = {\n      name,\n      t: type\n    };\n    return this.findOne(query, options);\n  }\n\n  findByTypeAndNameOrId(type, identifier, options) {\n    const query = {\n      t: type,\n      $or: [{\n        name: identifier\n      }, {\n        _id: identifier\n      }]\n    };\n    return this.findOne(query, options);\n  }\n\n  findByTypeAndNameContaining(type, name, options) {\n    const nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n    const query = {\n      name: nameRegex,\n      t: type\n    };\n    return this.find(query, options);\n  }\n\n  findByTypeInIdsAndNameContaining(type, ids, name, options) {\n    const nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n    const query = {\n      _id: {\n        $in: ids\n      },\n      name: nameRegex,\n      t: type\n    };\n    return this.find(query, options);\n  }\n\n  findByTypeAndArchivationState(type, archivationstate, options) {\n    const query = {\n      t: type\n    };\n\n    if (archivationstate) {\n      query.archived = true;\n    } else {\n      query.archived = {\n        $ne: true\n      };\n    }\n\n    return this.find(query, options);\n  }\n\n  findGroupDMsByUids(uids, options) {\n    return this.find({\n      usersCount: {\n        $gt: 2\n      },\n      uids\n    }, options);\n  }\n\n  find1On1ByUserId(userId, options) {\n    return this.find({\n      uids: userId,\n      usersCount: 2\n    }, options);\n  } // UPDATE\n\n\n  addImportIds(_id, importIds) {\n    importIds = [].concat(importIds);\n    const query = {\n      _id\n    };\n    const update = {\n      $addToSet: {\n        importIds: {\n          $each: importIds\n        }\n      }\n    };\n    return this.update(query, update);\n  }\n\n  archiveById(_id) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        archived: true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  unarchiveById(_id) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        archived: false\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setNameById(_id, name, fname) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        name,\n        fname\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setFnameById(_id, fname) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        fname\n      }\n    };\n    return this.update(query, update);\n  }\n\n  incMsgCountById(_id) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const query = {\n      _id\n    };\n    const update = {\n      $inc: {\n        msgs: inc\n      }\n    };\n    return this.update(query, update);\n  }\n\n  incMsgCountAndSetLastMessageById(_id, inc, lastMessageTimestamp, lastMessage) {\n    if (inc == null) {\n      inc = 1;\n    }\n\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        lm: lastMessageTimestamp\n      },\n      $inc: {\n        msgs: inc\n      }\n    };\n\n    if (lastMessage) {\n      update.$set.lastMessage = lastMessage;\n    }\n\n    return this.update(query, update);\n  }\n\n  decreaseMessageCountById(_id) {\n    let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return this.incMsgCountById(_id, -count);\n  }\n\n  incUsersCountById(_id) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const query = {\n      _id\n    };\n    const update = {\n      $inc: {\n        usersCount: inc\n      }\n    };\n    return this.update(query, update);\n  }\n\n  incUsersCountByIds(ids) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const query = {\n      _id: {\n        $in: ids\n      }\n    };\n    const update = {\n      $inc: {\n        usersCount: inc\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  incUsersCountNotDMsByIds(ids) {\n    let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const query = {\n      _id: {\n        $in: ids\n      },\n      t: {\n        $ne: 'd'\n      }\n    };\n    const update = {\n      $inc: {\n        usersCount: inc\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setLastMessageById(_id, lastMessage) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        lastMessage\n      }\n    };\n    return this.update(query, update);\n  }\n\n  resetLastMessageById(_id) {\n    let messageId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    const query = {\n      _id\n    };\n    const lastMessage = Messages.getLastVisibleMessageSentWithNoTypeByRoomId(_id, messageId);\n    const update = lastMessage ? {\n      $set: {\n        lastMessage\n      }\n    } : {\n      $unset: {\n        lastMessage: 1\n      }\n    };\n    return this.update(query, update);\n  }\n\n  replaceUsername(previousUsername, username) {\n    const query = {\n      usernames: previousUsername\n    };\n    const update = {\n      $set: {\n        'usernames.$': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  replaceMutedUsername(previousUsername, username) {\n    const query = {\n      muted: previousUsername\n    };\n    const update = {\n      $set: {\n        'muted.$': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  replaceUsernameOfUserByUserId(userId, username) {\n    const query = {\n      'u._id': userId\n    };\n    const update = {\n      $set: {\n        'u.username': username\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  }\n\n  setJoinCodeById(_id, joinCode) {\n    let update;\n    const query = {\n      _id\n    };\n\n    if ((joinCode != null ? joinCode.trim() : undefined) !== '') {\n      update = {\n        $set: {\n          joinCodeRequired: true,\n          joinCode\n        }\n      };\n    } else {\n      update = {\n        $set: {\n          joinCodeRequired: false\n        },\n        $unset: {\n          joinCode: 1\n        }\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  setUserById(_id, user) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        u: {\n          _id: user._id,\n          username: user.username\n        }\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setTypeById(_id, type) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        t: type\n      }\n    };\n\n    if (type === 'p') {\n      update.$unset = {\n        default: ''\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  setTopicById(_id, topic) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        topic\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setAnnouncementById(_id, announcement, announcementDetails) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        announcement,\n        announcementDetails\n      }\n    };\n    return this.update(query, update);\n  }\n\n  setCustomFieldsById(_id, customFields) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        customFields\n      }\n    };\n    return this.update(query, update);\n  }\n\n  muteUsernameByRoomId(_id, username) {\n    const query = {\n      _id\n    };\n    const update = {\n      $addToSet: {\n        muted: username\n      },\n      $pull: {\n        unmuted: username\n      }\n    };\n    return this.update(query, update);\n  }\n\n  unmuteUsernameByRoomId(_id, username) {\n    const query = {\n      _id\n    };\n    const update = {\n      $pull: {\n        muted: username\n      },\n      $addToSet: {\n        unmuted: username\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveFeaturedById(_id, featured) {\n    const query = {\n      _id\n    };\n    const set = ['true', true].includes(featured);\n    const update = {\n      [set ? '$set' : '$unset']: {\n        featured: true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveDefaultById(_id, defaultValue) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        default: defaultValue\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveFavoriteById(_id, favorite, defaultValue) {\n    const query = {\n      _id\n    };\n\n    const update = _objectSpread(_objectSpread({}, favorite && defaultValue && {\n      $set: {\n        favorite\n      }\n    }), (!favorite || !defaultValue) && {\n      $unset: {\n        favorite: 1\n      }\n    });\n\n    return this.update(query, update);\n  }\n\n  saveRetentionEnabledById(_id, value) {\n    const query = {\n      _id\n    };\n    const update = {};\n\n    if (value == null) {\n      update.$unset = {\n        'retention.enabled': true\n      };\n    } else {\n      update.$set = {\n        'retention.enabled': !!value\n      };\n    }\n\n    return this.update(query, update);\n  }\n\n  saveRetentionMaxAgeById(_id, value) {\n    const query = {\n      _id\n    };\n    value = Number(value);\n\n    if (!value) {\n      value = 30;\n    }\n\n    const update = {\n      $set: {\n        'retention.maxAge': value\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveRetentionExcludePinnedById(_id, value) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        'retention.excludePinned': value === true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveRetentionIgnoreThreadsById(_id, value) {\n    const query = {\n      _id\n    };\n    const update = {\n      [value === true ? '$set' : '$unset']: {\n        'retention.ignoreThreads': true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveRetentionFilesOnlyById(_id, value) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        'retention.filesOnly': value === true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveRetentionOverrideGlobalById(_id, value) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        'retention.overrideGlobal': value === true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  saveEncryptedById(_id, value) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        encrypted: value === true\n      }\n    };\n    return this.update(query, update);\n  }\n\n  updateGroupDMsRemovingUsernamesByUsername(username, userId) {\n    const query = {\n      t: 'd',\n      usernames: username,\n      usersCount: {\n        $gt: 2\n      }\n    };\n    const update = {\n      $pull: {\n        usernames: username,\n        uids: userId\n      }\n    };\n    return this.update(query, update, {\n      multi: true\n    });\n  } // INSERT\n\n\n  createWithTypeNameUserAndUsernames(type, name, fname, user, usernames, extraData) {\n    const room = {\n      name,\n      fname,\n      t: type,\n      usernames,\n      msgs: 0,\n      usersCount: 0,\n      u: {\n        _id: user._id,\n        username: user.username\n      }\n    };\n\n    _.extend(room, extraData);\n\n    room._id = this.insert(room);\n    return room;\n  }\n\n  createWithIdTypeAndName(_id, type, name, extraData) {\n    const room = {\n      _id,\n      ts: new Date(),\n      t: type,\n      name,\n      usernames: [],\n      msgs: 0,\n      usersCount: 0\n    };\n\n    _.extend(room, extraData);\n\n    this.insert(room);\n    return room;\n  }\n\n  createWithFullRoomData(room) {\n    delete room._id;\n    room._id = this.insert(room);\n    return room;\n  } // REMOVE\n\n\n  removeById(_id) {\n    const query = {\n      _id\n    };\n    return this.remove(query);\n  }\n\n  removeByIds(ids) {\n    return this.remove({\n      _id: {\n        $in: ids\n      }\n    });\n  }\n\n  removeDirectRoomContainingUsername(username) {\n    const query = {\n      t: 'd',\n      usernames: username,\n      usersCount: {\n        $lte: 2\n      }\n    };\n    return this.remove(query);\n  } // ############################\n  // Discussion\n\n\n  findDiscussionParentByNameStarting(name, options) {\n    const nameRegex = new RegExp(\"^\".concat(s.trim(escapeRegExp(name))), 'i');\n    const query = {\n      t: {\n        $in: ['c']\n      },\n      name: nameRegex,\n      archived: {\n        $ne: true\n      },\n      prid: {\n        $exists: false\n      }\n    };\n    return this.find(query, options);\n  }\n\n  setLinkMessageById(_id, linkMessageId) {\n    const query = {\n      _id\n    };\n    const update = {\n      $set: {\n        linkMessageId\n      }\n    };\n    return this.update(query, update);\n  }\n\n  countDiscussions() {\n    return this.find({\n      prid: {\n        $exists: true\n      }\n    }).count();\n  }\n\n}\n\nmodule.exportDefault(new Rooms('room', true));","map":{"version":3,"sources":["app/models/server/models/Rooms.js"],"names":["_objectSpread","module","link","default","v","export","Rooms","_","s","escapeRegExp","Base","Messages","Subscriptions","constructor","setAllowReactingWhenReadOnlyById","_id","allowReacting","query","update","$set","reactWhenReadOnly","setSystemMessagesById","systemMessages","length","sysMes","$unset","tryEnsureIndex","name","unique","sparse","featured","muted","t","ts","tokenpass","prid","fname","uids","teamId","teamDefault","findOneByIdOrName","_idOrName","options","$or","findOne","setJitsiTimeout","time","jitsiTimeout","setCallStatus","status","callStatus","setCallStatusAndCallStartTime","webRtcCallStartTime","Date","findByTokenpass","tokens","$in","_db","find","fetch","setTokensById","findAllTokenChannels","$exists","fields","setReactionsInLastMessage","roomId","lastMessage","reactions","unsetReactionsInLastMessage","unsetAllImportIds","importIds","multi","updateLastMessageStar","userId","starred","$addToSet","$pull","setLastMessageSnippeted","message","snippetName","snippetedBy","snippeted","snippetedAt","msg","setLastMessagePinned","pinnedBy","pinned","pinnedAt","setLastMessageAsRead","setSentiment","sentiment","setDescriptionById","description","setStreamingOptionsById","streamingOptions","setTokenpassById","setReadOnlyById","readOnly","ro","setDmReadOnlyByUserId","ids","$size","Array","isArray","getDirectConversationsByUserId","setAvatarData","origin","etag","avatarOrigin","avatarETag","unsetAvatarData","now","setE2eKeyId","e2eKeyId","findOneByImportId","findOneByNonValidatedName","room","findOneByName","channelName","trim","getValidRoomName","Promise","await","allowDuplicates","e","console","error","findOneByNameAndNotId","rid","$ne","findOneByDisplayName","findOneByNameAndType","type","findById","findByIds","roomIds","concat","findByType","findByTypeInIds","findByTypes","types","discussion","findByUserId","findBySubscriptionUserId","data","cachedFindByUserId","map","item","findBySubscriptionTypeAndUserId","findByUserIdAndType","findBySubscriptionUserIdUpdatedAfter","_updatedAt","$gt","findByNameContaining","nameRegex","RegExp","usernames","findByNameContainingAndTypes","findByNameAndType","findByNameOrFNameAndType","findByNameOrFNameAndRoomIdsIncludingTeamRooms","text","teamIds","searchTerm","$and","teamMain","findContainingNameOrFNameInIdsAsTeamMain","rids","regex","push","findByNameAndTypeNotDefault","findByNameAndTypesNotInIds","$nin","findChannelAndPrivateByNameStarting","sIds","findByDefaultAndTypes","defaultValue","findDirectRoomContainingAllUsernames","$all","usersCount","findOneDirectRoomContainingAllUserIDs","uid","findByTypeAndName","findByTypeAndNameOrId","identifier","findByTypeAndNameContaining","findByTypeInIdsAndNameContaining","findByTypeAndArchivationState","archivationstate","archived","findGroupDMsByUids","find1On1ByUserId","addImportIds","$each","archiveById","unarchiveById","setNameById","setFnameById","incMsgCountById","inc","$inc","msgs","incMsgCountAndSetLastMessageById","lastMessageTimestamp","lm","decreaseMessageCountById","count","incUsersCountById","incUsersCountByIds","incUsersCountNotDMsByIds","setLastMessageById","resetLastMessageById","messageId","undefined","getLastVisibleMessageSentWithNoTypeByRoomId","replaceUsername","previousUsername","username","replaceMutedUsername","replaceUsernameOfUserByUserId","setJoinCodeById","joinCode","joinCodeRequired","setUserById","user","u","setTypeById","setTopicById","topic","setAnnouncementById","announcement","announcementDetails","setCustomFieldsById","customFields","muteUsernameByRoomId","unmuted","unmuteUsernameByRoomId","saveFeaturedById","set","includes","saveDefaultById","saveFavoriteById","favorite","saveRetentionEnabledById","value","saveRetentionMaxAgeById","Number","saveRetentionExcludePinnedById","saveRetentionIgnoreThreadsById","saveRetentionFilesOnlyById","saveRetentionOverrideGlobalById","saveEncryptedById","encrypted","updateGroupDMsRemovingUsernamesByUsername","createWithTypeNameUserAndUsernames","extraData","extend","insert","createWithIdTypeAndName","createWithFullRoomData","removeById","remove","removeByIds","removeDirectRoomContainingUsername","$lte","findDiscussionParentByNameStarting","setLinkMessageById","linkMessageId","countDiscussions","exportDefault"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport s from 'underscore.string';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { Base } from './_Base';\nimport Messages from './Messages';\nimport Subscriptions from './Subscriptions';\n\nexport class Rooms extends Base {\n\tconstructor(...args) {\n\t\tsuper(...args);\n\n\t\tthis.tryEnsureIndex({ name: 1 }, { unique: true, sparse: true });\n\t\tthis.tryEnsureIndex({ default: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ featured: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ muted: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ t: 1 });\n\t\tthis.tryEnsureIndex({ 'u._id': 1 });\n\t\tthis.tryEnsureIndex({ ts: 1 });\n\t\t// Tokenpass\n\t\tthis.tryEnsureIndex({ 'tokenpass.tokens.token': 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ tokenpass: 1 }, { sparse: true });\n\t\t// discussions\n\t\tthis.tryEnsureIndex({ prid: 1 }, { sparse: true });\n\t\tthis.tryEnsureIndex({ fname: 1 }, { sparse: true });\n\t\t// field used for DMs only\n\t\tthis.tryEnsureIndex({ uids: 1 }, { sparse: true });\n\n\t\tthis.tryEnsureIndex(\n\t\t\t{\n\t\t\t\tteamId: 1,\n\t\t\t\tteamDefault: 1,\n\t\t\t},\n\t\t\t{ sparse: true },\n\t\t);\n\t}\n\n\tfindOneByIdOrName(_idOrName, options) {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetJitsiTimeout(_id, time) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tjitsiTimeout: time,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetCallStatus(_id, status) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetCallStatusAndCallStartTime(_id, status) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t\twebRtcCallStartTime: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tfindByTokenpass(tokens) {\n\t\tconst query = {\n\t\t\t'tokenpass.tokens.token': {\n\t\t\t\t$in: tokens,\n\t\t\t},\n\t\t};\n\n\t\treturn this._db.find(query).fetch();\n\t}\n\n\tsetTokensById(_id, tokens) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'tokenpass.tokens.token': tokens,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tfindAllTokenChannels() {\n\t\tconst query = {\n\t\t\ttokenpass: { $exists: true },\n\t\t};\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\ttokenpass: 1,\n\t\t\t},\n\t\t};\n\t\treturn this._db.find(query, options);\n\t}\n\n\tsetReactionsInLastMessage(roomId, lastMessage) {\n\t\treturn this.update({ _id: roomId }, { $set: { 'lastMessage.reactions': lastMessage.reactions } });\n\t}\n\n\tunsetReactionsInLastMessage(roomId) {\n\t\treturn this.update({ _id: roomId }, { $unset: { lastMessage: { reactions: 1 } } });\n\t}\n\n\tunsetAllImportIds() {\n\t\tconst query = {\n\t\t\timportIds: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\timportIds: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tupdateLastMessageStar(roomId, userId, starred) {\n\t\tlet update;\n\t\tconst query = { _id: roomId };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetLastMessageSnippeted(roomId, message, snippetName, snippetedBy, snippeted, snippetedAt) {\n\t\tconst query = { _id: roomId };\n\n\t\tconst msg = `\\`\\`\\`${message.msg}\\`\\`\\``;\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'lastMessage.msg': msg,\n\t\t\t\t'lastMessage.snippeted': snippeted,\n\t\t\t\t'lastMessage.snippetedAt': snippetedAt || new Date(),\n\t\t\t\t'lastMessage.snippetedBy': snippetedBy,\n\t\t\t\t'lastMessage.snippetName': snippetName,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetLastMessagePinned(roomId, pinnedBy, pinned, pinnedAt) {\n\t\tconst query = { _id: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'lastMessage.pinned': pinned,\n\t\t\t\t'lastMessage.pinnedAt': pinnedAt || new Date(),\n\t\t\t\t'lastMessage.pinnedBy': pinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetLastMessageAsRead(roomId) {\n\t\treturn this.update(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'lastMessage.unread': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetSentiment(roomId, sentiment) {\n\t\treturn this.update({ _id: roomId }, { $set: { sentiment } });\n\t}\n\n\tsetDescriptionById(_id, description) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdescription,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update);\n\t}\n\n\tsetStreamingOptionsById(_id, streamingOptions) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstreamingOptions,\n\t\t\t},\n\t\t};\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tsetTokenpassById(_id, tokenpass) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\ttokenpass,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tsetReadOnlyById(_id, readOnly) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetDmReadOnlyByUserId(_id, ids, readOnly, reactWhenReadOnly) {\n\t\tconst query = {\n\t\t\tuids: {\n\t\t\t\t$size: 2,\n\t\t\t\t$in: [_id],\n\t\t\t},\n\t\t\t...(ids && Array.isArray(ids) ? { _id: { $in: ids } } : {}),\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t\treactWhenReadOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tgetDirectConversationsByUserId(_id, options) {\n\t\treturn this.find({ t: 'd', uids: { $size: 2, $in: [_id] } }, options);\n\t}\n\n\tsetAllowReactingWhenReadOnlyById = function (_id, allowReacting) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\treactWhenReadOnly: allowReacting,\n\t\t\t},\n\t\t};\n\t\treturn this.update(query, update);\n\t};\n\n\tsetAvatarData(_id, origin, etag) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tavatarOrigin: origin,\n\t\t\t\tavatarETag: etag,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tunsetAvatarData(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tavatarETag: Date.now(),\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tavatarOrigin: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update({ _id }, update);\n\t}\n\n\tsetSystemMessagesById = function (_id, systemMessages) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update =\n\t\t\tsystemMessages && systemMessages.length > 0\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tsysMes: systemMessages,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tsysMes: '',\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\treturn this.update(query, update);\n\t};\n\n\tsetE2eKeyId(_id, e2eKeyId, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\te2eKeyId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, options);\n\t}\n\n\tfindOneByImportId(_id, options) {\n\t\tconst query = { importIds: _id };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNonValidatedName(name, options) {\n\t\tconst room = this.findOneByName(name, options);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\tlet channelName = s.trim(name);\n\t\ttry {\n\t\t\t// TODO evaluate if this function call should be here\n\t\t\tconst { getValidRoomName } = Promise.await(import('../../../utils/lib/getValidRoomName'));\n\t\t\tchannelName = getValidRoomName(channelName, null, { allowDuplicates: true });\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\n\t\treturn this.findOneByName(channelName, options);\n\t}\n\n\tfindOneByName(name, options) {\n\t\tconst query = { name };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndNotId(name, rid) {\n\t\tconst query = {\n\t\t\t_id: { $ne: rid },\n\t\t\tname,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByDisplayName(fname, options) {\n\t\tconst query = { fname };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndType(name, type, options) {\n\t\tconst query = {\n\t\t\tname,\n\t\t\tt: type,\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t// FIND\n\n\tfindById(roomId, options) {\n\t\treturn this.find({ _id: roomId }, options);\n\t}\n\n\tfindByIds(roomIds, options) {\n\t\treturn this.find({ _id: { $in: [].concat(roomIds) } }, options);\n\t}\n\n\tfindByType(type, options) {\n\t\tconst query = { t: type };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIds(type, ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypes(types, discussion = false, options = {}) {\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\tprid: { $exists: discussion },\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserId(userId, options) {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindBySubscriptionUserId(userId, options) {\n\t\tconst data = Subscriptions.cachedFindByUserId(userId, { fields: { rid: 1 } })\n\t\t\t.fetch()\n\t\t\t.map((item) => item.rid);\n\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: data,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindBySubscriptionTypeAndUserId(type, userId, options) {\n\t\tconst data = Subscriptions.findByUserIdAndType(userId, type, {\n\t\t\tfields: { rid: 1 },\n\t\t})\n\t\t\t.fetch()\n\t\t\t.map((item) => item.rid);\n\n\t\tconst query = {\n\t\t\tt: type,\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindBySubscriptionUserIdUpdatedAfter(userId, _updatedAt, options) {\n\t\tconst ids = Subscriptions.findByUserId(userId, { fields: { rid: 1 } })\n\t\t\t.fetch()\n\t\t\t.map((item) => item.rid);\n\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: _updatedAt,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameContaining(name, discussion = false, options = {}) {\n\t\tconst nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n\n\t\tconst query = {\n\t\t\tprid: { $exists: discussion },\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameContainingAndTypes(name, types, discussion = false, options = {}) {\n\t\tconst nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\tprid: { $exists: discussion },\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndType(name, type, options) {\n\t\tconst query = {\n\t\t\tt: type,\n\t\t\tname,\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindByNameOrFNameAndType(name, type, options) {\n\t\tconst query = {\n\t\t\tt: type,\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: name,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindByNameOrFNameAndRoomIdsIncludingTeamRooms(text, teamIds, roomIds, options) {\n\t\tconst searchTerm = text && new RegExp(text, 'i');\n\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{ teamMain: { $exists: false } },\n\t\t\t\t{ prid: { $exists: false } },\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $in: teamIds },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(roomIds?.length > 0\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t...(searchTerm\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: []),\n\t\t\t],\n\t\t};\n\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindContainingNameOrFNameInIdsAsTeamMain(text, rids, options) {\n\t\tconst query = {\n\t\t\tteamMain: true,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'p',\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tif (text) {\n\t\t\tconst regex = new RegExp(text, 'i');\n\n\t\t\tquery.$and.push({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: regex,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfname: regex,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindByNameAndTypeNotDefault(name, type, options) {\n\t\tconst query = {\n\t\t\tt: type,\n\t\t\tname,\n\t\t\tdefault: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamMain: true,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindByNameAndTypesNotInIds(name, types, ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$nin: ids,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// Also return the main room of public teams\n\t\t\t\t\t// this will have no effect if the method is called without the 'c' type, as the type filter is outside the $or group.\n\t\t\t\t\tteamMain: true,\n\t\t\t\t\tt: 'c',\n\t\t\t\t},\n\t\t\t],\n\t\t\tname,\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this._db.find(query, options);\n\t}\n\n\tfindChannelAndPrivateByNameStarting(name, sIds, options) {\n\t\tconst nameRegex = new RegExp(`^${s.trim(escapeRegExp(name))}`, 'i');\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: sIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByDefaultAndTypes(defaultValue, types, options) {\n\t\tconst query = {\n\t\t\tdefault: defaultValue,\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDirectRoomContainingAllUsernames(usernames, options) {\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\tusernames: { $size: usernames.length, $all: usernames },\n\t\t\tusersCount: usernames.length,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneDirectRoomContainingAllUserIDs(uid, options) {\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\tuids: { $size: uid.length, $all: uid },\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndName(type, name, options) {\n\t\tconst query = {\n\t\t\tname,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameOrId(type, identifier, options) {\n\t\tconst query = {\n\t\t\tt: type,\n\t\t\t$or: [{ name: identifier }, { _id: identifier }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameContaining(type, name, options) {\n\t\tconst nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n\n\t\tconst query = {\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIdsAndNameContaining(type, ids, name, options) {\n\t\tconst nameRegex = new RegExp(s.trim(escapeRegExp(name)), 'i');\n\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeAndArchivationState(type, archivationstate, options) {\n\t\tconst query = { t: type };\n\n\t\tif (archivationstate) {\n\t\t\tquery.archived = true;\n\t\t} else {\n\t\t\tquery.archived = { $ne: true };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindGroupDMsByUids(uids, options) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tusersCount: { $gt: 2 },\n\t\t\t\tuids,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfind1On1ByUserId(userId, options) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tuids: userId,\n\t\t\t\tusersCount: 2,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\t// UPDATE\n\taddImportIds(_id, importIds) {\n\t\timportIds = [].concat(importIds);\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: importIds,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tarchiveById(_id) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tunarchiveById(_id) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetNameById(_id, name, fname) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetFnameById(_id, fname) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tincMsgCountById(_id, inc = 1) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tmsgs: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tincMsgCountAndSetLastMessageById(_id, inc, lastMessageTimestamp, lastMessage) {\n\t\tif (inc == null) {\n\t\t\tinc = 1;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlm: lastMessageTimestamp,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tmsgs: inc,\n\t\t\t},\n\t\t};\n\n\t\tif (lastMessage) {\n\t\t\tupdate.$set.lastMessage = lastMessage;\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tdecreaseMessageCountById(_id, count = 1) {\n\t\treturn this.incMsgCountById(_id, -count);\n\t}\n\n\tincUsersCountById(_id, inc = 1) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tincUsersCountByIds(ids, inc = 1) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tincUsersCountNotDMsByIds(ids, inc = 1) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: { $ne: 'd' },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetLastMessageById(_id, lastMessage) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastMessage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tresetLastMessageById(_id, messageId = undefined) {\n\t\tconst query = { _id };\n\t\tconst lastMessage = Messages.getLastVisibleMessageSentWithNoTypeByRoomId(_id, messageId);\n\n\t\tconst update = lastMessage\n\t\t\t? {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tlastMessage,\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\t$unset: {\n\t\t\t\t\t\tlastMessage: 1,\n\t\t\t\t\t},\n\t\t\t  };\n\n\t\treturn this.update(query, update);\n\t}\n\n\treplaceUsername(previousUsername, username) {\n\t\tconst query = { usernames: previousUsername };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'usernames.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\treplaceMutedUsername(previousUsername, username) {\n\t\tconst query = { muted: previousUsername };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'muted.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\treplaceUsernameOfUserByUserId(userId, username) {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\tsetJoinCodeById(_id, joinCode) {\n\t\tlet update;\n\t\tconst query = { _id };\n\n\t\tif ((joinCode != null ? joinCode.trim() : undefined) !== '') {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: true,\n\t\t\t\t\tjoinCode,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: false,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tjoinCode: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetUserById(_id, user) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tu: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetTypeById(_id, type) {\n\t\tconst query = { _id };\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\t\tif (type === 'p') {\n\t\t\tupdate.$unset = { default: '' };\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetTopicById(_id, topic) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\ttopic,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetAnnouncementById(_id, announcement, announcementDetails) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tannouncement,\n\t\t\t\tannouncementDetails,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsetCustomFieldsById(_id, customFields) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tmuteUsernameByRoomId(_id, username) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tunmuteUsernameByRoomId(_id, username) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveFeaturedById(_id, featured) {\n\t\tconst query = { _id };\n\t\tconst set = ['true', true].includes(featured);\n\n\t\tconst update = {\n\t\t\t[set ? '$set' : '$unset']: {\n\t\t\t\tfeatured: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveDefaultById(_id, defaultValue) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdefault: defaultValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveFavoriteById(_id, favorite, defaultValue) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t...(favorite && defaultValue && { $set: { favorite } }),\n\t\t\t...((!favorite || !defaultValue) && { $unset: { favorite: 1 } }),\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRetentionEnabledById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tconst update = {};\n\n\t\tif (value == null) {\n\t\t\tupdate.$unset = { 'retention.enabled': true };\n\t\t} else {\n\t\t\tupdate.$set = { 'retention.enabled': !!value };\n\t\t}\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRetentionMaxAgeById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tvalue = Number(value);\n\t\tif (!value) {\n\t\t\tvalue = 30;\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'retention.maxAge': value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRetentionExcludePinnedById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'retention.excludePinned': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRetentionIgnoreThreadsById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t[value === true ? '$set' : '$unset']: {\n\t\t\t\t'retention.ignoreThreads': true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRetentionFilesOnlyById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'retention.filesOnly': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveRetentionOverrideGlobalById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'retention.overrideGlobal': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tsaveEncryptedById(_id, value) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tencrypted: value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tupdateGroupDMsRemovingUsernamesByUsername(username, userId) {\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $gt: 2 },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\tusernames: username,\n\t\t\t\tuids: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update, { multi: true });\n\t}\n\n\t// INSERT\n\tcreateWithTypeNameUserAndUsernames(type, name, fname, user, usernames, extraData) {\n\t\tconst room = {\n\t\t\tname,\n\t\t\tfname,\n\t\t\tt: type,\n\t\t\tusernames,\n\t\t\tmsgs: 0,\n\t\t\tusersCount: 0,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t};\n\n\t\t_.extend(room, extraData);\n\n\t\troom._id = this.insert(room);\n\t\treturn room;\n\t}\n\n\tcreateWithIdTypeAndName(_id, type, name, extraData) {\n\t\tconst room = {\n\t\t\t_id,\n\t\t\tts: new Date(),\n\t\t\tt: type,\n\t\t\tname,\n\t\t\tusernames: [],\n\t\t\tmsgs: 0,\n\t\t\tusersCount: 0,\n\t\t};\n\n\t\t_.extend(room, extraData);\n\n\t\tthis.insert(room);\n\t\treturn room;\n\t}\n\n\tcreateWithFullRoomData(room) {\n\t\tdelete room._id;\n\n\t\troom._id = this.insert(room);\n\t\treturn room;\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\tconst query = { _id };\n\n\t\treturn this.remove(query);\n\t}\n\n\tremoveByIds(ids) {\n\t\treturn this.remove({ _id: { $in: ids } });\n\t}\n\n\tremoveDirectRoomContainingUsername(username) {\n\t\tconst query = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $lte: 2 },\n\t\t};\n\n\t\treturn this.remove(query);\n\t}\n\n\t// ############################\n\t// Discussion\n\tfindDiscussionParentByNameStarting(name, options) {\n\t\tconst nameRegex = new RegExp(`^${s.trim(escapeRegExp(name))}`, 'i');\n\n\t\tconst query = {\n\t\t\tt: {\n\t\t\t\t$in: ['c'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tarchived: { $ne: true },\n\t\t\tprid: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tsetLinkMessageById(_id, linkMessageId) {\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlinkMessageId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.update(query, update);\n\t}\n\n\tcountDiscussions() {\n\t\treturn this.find({ prid: { $exists: true } }).count();\n\t}\n}\n\nexport default new Rooms('room', true);\n"]},"sourceType":"module","hash":"f87336133f02dfa31440f961496c3ec4bc4022d5"}
